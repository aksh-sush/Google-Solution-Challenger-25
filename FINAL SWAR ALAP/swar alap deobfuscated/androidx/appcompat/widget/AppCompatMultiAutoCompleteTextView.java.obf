package androidx.appcompat.widget;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.PorterDuff.Mode;
import android.graphics.drawable.Drawable;
import android.text.method.KeyListener;
import android.util.AttributeSet;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.widget.AutoCompleteTextView;
import android.widget.MultiAutoCompleteTextView;
import android.widget.TextView;

public class q
  extends MultiAutoCompleteTextView
  implements androidx.core.widget.n
{
  private static final int[] h = { 16843126 };
  private final e e;
  private final b0 f;
  private final l g;
  
  public q(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, f.a.m);
  }
  
  public q(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(c1.b(paramContext), paramAttributeSet, paramInt);
    b1.a(this, getContext());
    paramContext = f1.v(getContext(), paramAttributeSet, h, paramInt, 0);
    if (paramContext.s(0)) {
      setDropDownBackgroundDrawable(paramContext.g(0));
    }
    paramContext.w();
    paramContext = new e(this);
    e = paramContext;
    paramContext.e(paramAttributeSet, paramInt);
    paramContext = new b0(this);
    f = paramContext;
    paramContext.m(paramAttributeSet, paramInt);
    paramContext.b();
    paramContext = new l(this);
    g = paramContext;
    paramContext.c(paramAttributeSet, paramInt);
    a(paramContext);
  }
  
  void a(l paramL)
  {
    KeyListener localKeyListener = getKeyListener();
    if (paramL.b(localKeyListener))
    {
      boolean bool1 = super.isFocusable();
      boolean bool2 = super.isClickable();
      boolean bool3 = super.isLongClickable();
      int i = super.getInputType();
      paramL = paramL.a(localKeyListener);
      if (paramL == localKeyListener) {
        return;
      }
      super.setKeyListener(paramL);
      super.setRawInputType(i);
      super.setFocusable(bool1);
      super.setClickable(bool2);
      super.setLongClickable(bool3);
    }
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    Object localObject = e;
    if (localObject != null) {
      ((e)localObject).b();
    }
    localObject = f;
    if (localObject != null) {
      ((b0)localObject).b();
    }
  }
  
  public ColorStateList getSupportBackgroundTintList()
  {
    e localE = e;
    if (localE != null) {
      return localE.c();
    }
    return null;
  }
  
  public PorterDuff.Mode getSupportBackgroundTintMode()
  {
    e localE = e;
    if (localE != null) {
      return localE.d();
    }
    return null;
  }
  
  public ColorStateList getSupportCompoundDrawablesTintList()
  {
    return f.j();
  }
  
  public PorterDuff.Mode getSupportCompoundDrawablesTintMode()
  {
    return f.k();
  }
  
  public InputConnection onCreateInputConnection(EditorInfo paramEditorInfo)
  {
    InputConnection localInputConnection = n.a(super.onCreateInputConnection(paramEditorInfo), paramEditorInfo, this);
    return g.d(localInputConnection, paramEditorInfo);
  }
  
  public void setBackgroundDrawable(Drawable paramDrawable)
  {
    super.setBackgroundDrawable(paramDrawable);
    e localE = e;
    if (localE != null) {
      localE.f(paramDrawable);
    }
  }
  
  public void setBackgroundResource(int paramInt)
  {
    super.setBackgroundResource(paramInt);
    e localE = e;
    if (localE != null) {
      localE.g(paramInt);
    }
  }
  
  public void setCompoundDrawables(Drawable paramDrawable1, Drawable paramDrawable2, Drawable paramDrawable3, Drawable paramDrawable4)
  {
    super.setCompoundDrawables(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
    paramDrawable1 = f;
    if (paramDrawable1 != null) {
      paramDrawable1.p();
    }
  }
  
  public void setCompoundDrawablesRelative(Drawable paramDrawable1, Drawable paramDrawable2, Drawable paramDrawable3, Drawable paramDrawable4)
  {
    super.setCompoundDrawablesRelative(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
    paramDrawable1 = f;
    if (paramDrawable1 != null) {
      paramDrawable1.p();
    }
  }
  
  public void setDropDownBackgroundResource(int paramInt)
  {
    setDropDownBackgroundDrawable(g.a.b(getContext(), paramInt));
  }
  
  public void setEmojiCompatEnabled(boolean paramBoolean)
  {
    g.e(paramBoolean);
  }
  
  public void setKeyListener(KeyListener paramKeyListener)
  {
    super.setKeyListener(g.a(paramKeyListener));
  }
  
  public void setSupportBackgroundTintList(ColorStateList paramColorStateList)
  {
    e localE = e;
    if (localE != null) {
      localE.i(paramColorStateList);
    }
  }
  
  public void setSupportBackgroundTintMode(PorterDuff.Mode paramMode)
  {
    e localE = e;
    if (localE != null) {
      localE.j(paramMode);
    }
  }
  
  public void setSupportCompoundDrawablesTintList(ColorStateList paramColorStateList)
  {
    f.w(paramColorStateList);
    f.b();
  }
  
  public void setSupportCompoundDrawablesTintMode(PorterDuff.Mode paramMode)
  {
    f.x(paramMode);
    f.b();
  }
  
  public void setTextAppearance(Context paramContext, int paramInt)
  {
    super.setTextAppearance(paramContext, paramInt);
    b0 localB0 = f;
    if (localB0 != null) {
      localB0.q(paramContext, paramInt);
    }
  }
}
