package y1;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.AsyncTask;
import android.os.BaseBundle;
import android.os.Bundle;
import android.text.TextUtils;
import com.facebook.i0;
import com.facebook.m0;
import com.facebook.m0.c;
import com.facebook.r0;
import e2.n;
import e2.n.b;
import e2.s0;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import ta.b0;
import ta.m;
import x1.k;
import x1.k.a;

public final class f
{
  public static final f a = new f();
  private static final Map b = new ConcurrentHashMap();
  private static final List c = m.g(new String[] { "other", "fb_mobile_complete_registration", "fb_mobile_add_to_cart", "fb_mobile_purchase", "fb_mobile_initiated_checkout" });
  private static final List d = m.g(new String[] { "none", "address", "health" });
  
  private f() {}
  
  private final void e(JSONObject paramJSONObject)
  {
    Iterator localIterator = paramJSONObject.keys();
    try
    {
      while (localIterator.hasNext())
      {
        Object localObject = (String)localIterator.next();
        localObject = b.i.c(paramJSONObject.getJSONObject((String)localObject));
        if (localObject != null) {
          b.put(((b)localObject).g(), localObject);
        }
      }
      return;
    }
    catch (JSONException paramJSONObject) {}
  }
  
  public static final void f()
  {
    s0 localS0 = s0.a;
    s0.B0(new c());
  }
  
  private static final void g()
  {
    for (;;)
    {
      int i;
      try
      {
        Object localObject1 = i0.l();
        i = 0;
        Object localObject2 = ((Context)localObject1).getSharedPreferences("com.facebook.internal.MODEL_STORE", 0);
        localObject1 = ((SharedPreferences)localObject2).getString("models", null);
        if (localObject1 != null)
        {
          if (((CharSequence)localObject1).length() != 0) {
            break label170;
          }
          i = 1;
          break label170;
          localObject1 = new JSONObject((String)localObject1);
        }
        else
        {
          localObject1 = new JSONObject();
        }
        long l = ((SharedPreferences)localObject2).getLong("model_request_timestamp", 0L);
        n localN = n.a;
        if ((!n.g(n.b.q)) || (((JSONObject)localObject1).length() == 0) || (!a.n(l)))
        {
          localObject1 = a.k();
          if (localObject1 == null) {
            return;
          }
          ((SharedPreferences)localObject2).edit().putString("models", ((JSONObject)localObject1).toString()).putLong("model_request_timestamp", System.currentTimeMillis()).apply();
        }
        localObject2 = a;
        ((f)localObject2).e((JSONObject)localObject1);
        ((f)localObject2).h();
        return;
      }
      catch (Exception localException)
      {
        return;
      }
      label170:
      if (i == 0) {}
    }
  }
  
  private final void h()
  {
    ArrayList localArrayList = new ArrayList();
    Iterator localIterator = b.entrySet().iterator();
    Object localObject1 = null;
    int i = 0;
    while (localIterator.hasNext())
    {
      Object localObject2 = (Map.Entry)localIterator.next();
      String str = (String)((Map.Entry)localObject2).getKey();
      localObject2 = (b)((Map.Entry)localObject2).getValue();
      int j = i;
      if (db.l.a(str, a.f.d()))
      {
        localObject1 = ((b)localObject2).b();
        j = Math.max(i, ((b)localObject2).h());
        n localN = n.a;
        if ((n.g(n.b.o)) && (m())) {
          localArrayList.add(((b)localObject2).j(new d()));
        }
      }
      i = j;
      if (db.l.a(str, a.e.d()))
      {
        str = ((b)localObject2).b();
        j = Math.max(j, ((b)localObject2).h());
        localObject1 = n.a;
        localObject1 = str;
        i = j;
        if (n.g(n.b.p))
        {
          localArrayList.add(((b)localObject2).j(new e()));
          localObject1 = str;
          i = j;
        }
      }
    }
    if ((localObject1 != null) && (i > 0) && (!localArrayList.isEmpty()))
    {
      localObject1 = new b("MTML", (String)localObject1, null, i, null);
      b.i.f((b)localObject1, localArrayList);
    }
  }
  
  private static final void i() {}
  
  private static final void j() {}
  
  private final JSONObject k()
  {
    Object localObject = new Bundle();
    ((BaseBundle)localObject).putString("fields", TextUtils.join(",", new String[] { "use_case", "version_id", "asset_uri", "rules_uri", "thresholds" }));
    m0 localM0 = m0.n.x(null, "app/model_asset", null);
    localM0.G((Bundle)localObject);
    localObject = localM0.k().c();
    if (localObject == null) {
      return null;
    }
    return p((JSONObject)localObject);
  }
  
  public static final File l(a paramA)
  {
    db.l.e(paramA, "task");
    paramA = (b)b.get(paramA.d());
    if (paramA == null) {
      return null;
    }
    return paramA.d();
  }
  
  private final boolean m()
  {
    Object localObject = s0.N();
    boolean bool;
    if (localObject != null)
    {
      localObject = ((Locale)localObject).getLanguage();
      db.l.d(localObject, "locale.language");
      bool = false;
      if (!lb.g.w((CharSequence)localObject, "en", false, 2, null)) {}
    }
    else
    {
      bool = true;
    }
    return bool;
  }
  
  private final boolean n(long paramLong)
  {
    boolean bool = false;
    if (paramLong == 0L) {
      return false;
    }
    if (System.currentTimeMillis() - paramLong < 259200000L) {
      bool = true;
    }
    return bool;
  }
  
  private final float[] o(JSONArray paramJSONArray)
  {
    if (paramJSONArray == null) {
      return null;
    }
    float[] arrayOfFloat = new float[paramJSONArray.length()];
    int k = paramJSONArray.length();
    if (k > 0)
    {
      int j;
      for (int i = 0;; i = j)
      {
        j = i + 1;
        try
        {
          String str = paramJSONArray.getString(i);
          db.l.d(str, "jsonArray.getString(i)");
          arrayOfFloat[i] = Float.parseFloat(str);
        }
        catch (JSONException localJSONException)
        {
          for (;;) {}
        }
        if (j >= k) {
          return arrayOfFloat;
        }
      }
    }
    return arrayOfFloat;
  }
  
  private final JSONObject p(JSONObject paramJSONObject)
  {
    JSONObject localJSONObject1 = new JSONObject();
    try
    {
      JSONArray localJSONArray = paramJSONObject.getJSONArray("data");
      int k = localJSONArray.length();
      paramJSONObject = localJSONObject1;
      if (k <= 0) {
        break label182;
      }
      int j;
      for (int i = 0;; i = j)
      {
        j = i + 1;
        paramJSONObject = localJSONArray.getJSONObject(i);
        JSONObject localJSONObject2 = new JSONObject();
        localJSONObject2.put("version_id", paramJSONObject.getString("version_id"));
        localJSONObject2.put("use_case", paramJSONObject.getString("use_case"));
        localJSONObject2.put("thresholds", paramJSONObject.getJSONArray("thresholds"));
        localJSONObject2.put("asset_uri", paramJSONObject.getString("asset_uri"));
        if (paramJSONObject.has("rules_uri")) {
          localJSONObject2.put("rules_uri", paramJSONObject.getString("rules_uri"));
        }
        localJSONObject1.put(paramJSONObject.getString("use_case"), localJSONObject2);
        if (j >= k) {
          return localJSONObject1;
        }
      }
    }
    catch (JSONException paramJSONObject)
    {
      label182:
      for (;;) {}
    }
    paramJSONObject = new JSONObject();
    return paramJSONObject;
  }
  
  public static final String[] q(a paramA, float[][] paramArrayOfFloat, String[] paramArrayOfString)
  {
    db.l.e(paramA, "task");
    db.l.e(paramArrayOfFloat, "denses");
    db.l.e(paramArrayOfString, "texts");
    Object localObject2 = (b)b.get(paramA.d());
    Object localObject1 = null;
    b localB;
    if (localObject2 == null) {
      localB = null;
    } else {
      localB = ((b)localObject2).c();
    }
    if (localB == null) {
      return null;
    }
    localObject2 = ((b)localObject2).f();
    int m = paramArrayOfString.length;
    int j = 0;
    int n = paramArrayOfFloat[0].length;
    a localA = new a(new int[] { m, n });
    int i;
    if (m > 0)
    {
      int k;
      for (i = 0;; i = k)
      {
        k = i + 1;
        System.arraycopy(paramArrayOfFloat[i], 0, localA.a(), i * n, n);
        if (k >= m) {
          break;
        }
      }
    }
    paramArrayOfString = localB.b(localA, paramArrayOfString, paramA.c());
    paramArrayOfFloat = localObject1;
    if (paramArrayOfString != null)
    {
      paramArrayOfFloat = localObject1;
      if (localObject2 != null)
      {
        if (paramArrayOfString.a().length == 0) {
          i = 1;
        } else {
          i = 0;
        }
        paramArrayOfFloat = localObject1;
        if (i == 0)
        {
          i = j;
          if (localObject2.length == 0) {
            i = 1;
          }
          if (i != 0) {
            return null;
          }
          i = c.a[paramA.ordinal()];
          if (i != 1)
          {
            if (i == 2) {
              return a.r(paramArrayOfString, (float[])localObject2);
            }
            throw new sa.l();
          }
          paramArrayOfFloat = a.s(paramArrayOfString, (float[])localObject2);
        }
      }
    }
    return paramArrayOfFloat;
  }
  
  private final String[] r(a paramA, float[] paramArrayOfFloat)
  {
    int i = paramA.b(0);
    int k = paramA.b(1);
    float[] arrayOfFloat = paramA.a();
    if (k != paramArrayOfFloat.length) {
      return null;
    }
    paramA = ib.g.h(0, i);
    ArrayList localArrayList = new ArrayList(m.l(paramA, 10));
    Iterator localIterator = paramA.iterator();
    while (localIterator.hasNext())
    {
      int m = ((b0)localIterator).b();
      int n = paramArrayOfFloat.length;
      paramA = "none";
      int j = 0;
      i = 0;
      while (j < n)
      {
        float f = paramArrayOfFloat[j];
        if (arrayOfFloat[(m * k + i)] >= f) {
          paramA = d.get(i);
        }
        j += 1;
        i += 1;
      }
      localArrayList.add((String)paramA);
    }
    paramA = localArrayList.toArray(new String[0]);
    if (paramA != null) {
      return (String[])paramA;
    }
    throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<T>");
  }
  
  private final String[] s(a paramA, float[] paramArrayOfFloat)
  {
    int i = paramA.b(0);
    int k = paramA.b(1);
    float[] arrayOfFloat = paramA.a();
    if (k != paramArrayOfFloat.length) {
      return null;
    }
    paramA = ib.g.h(0, i);
    ArrayList localArrayList = new ArrayList(m.l(paramA, 10));
    Iterator localIterator = paramA.iterator();
    while (localIterator.hasNext())
    {
      int m = ((b0)localIterator).b();
      int n = paramArrayOfFloat.length;
      paramA = "other";
      int j = 0;
      i = 0;
      while (j < n)
      {
        float f = paramArrayOfFloat[j];
        if (arrayOfFloat[(m * k + i)] >= f) {
          paramA = c.get(i);
        }
        j += 1;
        i += 1;
      }
      localArrayList.add((String)paramA);
    }
    paramA = localArrayList.toArray(new String[0]);
    if (paramA != null) {
      return (String[])paramA;
    }
    throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<T>");
  }
  
  public static enum a
  {
    public final String c()
    {
      int i = a.a[ordinal()];
      if (i != 1)
      {
        if (i == 2) {
          return "app_event_pred";
        }
        throw new sa.l();
      }
      return "integrity_detect";
    }
    
    public final String d()
    {
      int i = a.a[ordinal()];
      if (i != 1)
      {
        if (i == 2) {
          return "MTML_APP_EVENT_PRED";
        }
        throw new sa.l();
      }
      return "MTML_INTEGRITY_DETECT";
    }
  }
  
  public static final class b
  {
    public static final a i = new a(null);
    private String a;
    private String b;
    private String c;
    private int d;
    private float[] e;
    private File f;
    private b g;
    private Runnable h;
    
    public b(String paramString1, String paramString2, String paramString3, int paramInt, float[] paramArrayOfFloat)
    {
      a = paramString1;
      b = paramString2;
      c = paramString3;
      d = paramInt;
      e = paramArrayOfFloat;
    }
    
    public final String b()
    {
      return b;
    }
    
    public final b c()
    {
      return g;
    }
    
    public final File d()
    {
      return f;
    }
    
    public final String e()
    {
      return c;
    }
    
    public final float[] f()
    {
      return e;
    }
    
    public final String g()
    {
      return a;
    }
    
    public final int h()
    {
      return d;
    }
    
    public final void i(b paramB)
    {
      g = paramB;
    }
    
    public final b j(Runnable paramRunnable)
    {
      h = paramRunnable;
      return this;
    }
    
    public final void k(File paramFile)
    {
      f = paramFile;
    }
    
    public static final class a
    {
      private a() {}
      
      private final void d(String paramString, int paramInt)
      {
        Object localObject1 = j.a();
        if (localObject1 == null) {
          return;
        }
        localObject1 = ((File)localObject1).listFiles();
        if (localObject1 != null)
        {
          int i;
          if (localObject1.length == 0) {
            i = 1;
          } else {
            i = 0;
          }
          if (i != 0) {
            return;
          }
          Object localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append(paramString);
          ((StringBuilder)localObject2).append('_');
          ((StringBuilder)localObject2).append(paramInt);
          localObject2 = ((StringBuilder)localObject2).toString();
          int j = localObject1.length;
          paramInt = 0;
          while (paramInt < j)
          {
            Object localObject3 = localObject1[paramInt];
            i = paramInt + 1;
            String str = localObject3.getName();
            db.l.d(str, "name");
            paramInt = i;
            if (lb.g.t(str, paramString, false, 2, null))
            {
              paramInt = i;
              if (!lb.g.t(str, (String)localObject2, false, 2, null))
              {
                localObject3.delete();
                paramInt = i;
              }
            }
          }
        }
      }
      
      private final void e(String paramString1, String paramString2, k.a paramA)
      {
        paramString2 = new File(j.a(), paramString2);
        if ((paramString1 != null) && (!paramString2.exists()))
        {
          new k(paramString1, paramString2, paramA).execute(new String[0]);
          return;
        }
        paramA.a(paramString2);
      }
      
      private static final void g(List paramList, File paramFile)
      {
        db.l.e(paramList, "$slaves");
        db.l.e(paramFile, "file");
        paramFile = b.m.a(paramFile);
        if (paramFile != null)
        {
          paramList = paramList.iterator();
          while (paramList.hasNext())
          {
            f.b localB = (f.b)paramList.next();
            Object localObject = new StringBuilder();
            ((StringBuilder)localObject).append(localB.g());
            ((StringBuilder)localObject).append('_');
            ((StringBuilder)localObject).append(localB.h());
            ((StringBuilder)localObject).append("_rule");
            localObject = ((StringBuilder)localObject).toString();
            f.b.i.e(localB.e(), (String)localObject, new h(localB, paramFile));
          }
        }
      }
      
      private static final void h(f.b paramB, b paramB1, File paramFile)
      {
        db.l.e(paramB, "$slave");
        db.l.e(paramFile, "file");
        paramB.i(paramB1);
        paramB.k(paramFile);
        paramB = f.b.a(paramB);
        if (paramB == null) {
          return;
        }
        paramB.run();
      }
      
      public final f.b c(JSONObject paramJSONObject)
      {
        if (paramJSONObject == null) {
          return null;
        }
        try
        {
          String str1 = paramJSONObject.getString("use_case");
          String str2 = paramJSONObject.getString("asset_uri");
          String str3 = paramJSONObject.optString("rules_uri", null);
          int i = paramJSONObject.getInt("version_id");
          paramJSONObject = f.d(f.a, paramJSONObject.getJSONArray("thresholds"));
          db.l.d(str1, "useCase");
          db.l.d(str2, "assetUri");
          paramJSONObject = new f.b(str1, str2, str3, i, paramJSONObject);
          return paramJSONObject;
        }
        catch (Exception paramJSONObject) {}
        return null;
      }
      
      public final void f(f.b paramB, List paramList)
      {
        db.l.e(paramB, "master");
        db.l.e(paramList, "slaves");
        d(paramB.g(), paramB.h());
        Object localObject = new StringBuilder();
        ((StringBuilder)localObject).append(paramB.g());
        ((StringBuilder)localObject).append('_');
        ((StringBuilder)localObject).append(paramB.h());
        localObject = ((StringBuilder)localObject).toString();
        e(paramB.b(), (String)localObject, new g(paramList));
      }
    }
  }
}
