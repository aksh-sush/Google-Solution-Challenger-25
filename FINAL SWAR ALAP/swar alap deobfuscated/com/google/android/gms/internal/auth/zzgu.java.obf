package com.google.android.gms.internal.auth;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

class zzgu
  extends AbstractMap
{
  private final int zza;
  private List zzb;
  private Map zzc;
  private boolean zzd;
  private volatile zzgs zze;
  private Map zzf;
  
  private final int zzk(Comparable paramComparable)
  {
    int k = zzb.size() - 1;
    int m = 0;
    int i = k;
    int j = m;
    if (k >= 0)
    {
      i = paramComparable.compareTo(((zzgo)zzb.get(k)).zza());
      if (i > 0) {
        return -(k + 2);
      }
      if (i != 0)
      {
        i = k;
        j = m;
      }
      else
      {
        return k;
      }
    }
    while (j <= i)
    {
      k = (j + i) / 2;
      m = paramComparable.compareTo(((zzgo)zzb.get(k)).zza());
      if (m < 0) {
        i = k - 1;
      } else if (m > 0) {
        j = k + 1;
      } else {
        return k;
      }
    }
    return -(j + 1);
  }
  
  private final Object zzl(int paramInt)
  {
    zzn();
    Object localObject = ((zzgo)zzb.remove(paramInt)).getValue();
    if (!zzc.isEmpty())
    {
      Iterator localIterator = zzm().entrySet().iterator();
      List localList = zzb;
      Map.Entry localEntry = (Map.Entry)localIterator.next();
      localList.add(new zzgo(this, (Comparable)localEntry.getKey(), localEntry.getValue()));
      localIterator.remove();
    }
    return localObject;
  }
  
  private final SortedMap zzm()
  {
    zzn();
    if ((zzc.isEmpty()) && (!(zzc instanceof TreeMap)))
    {
      TreeMap localTreeMap = new TreeMap();
      zzc = localTreeMap;
      zzf = localTreeMap.descendingMap();
    }
    return (SortedMap)zzc;
  }
  
  private final void zzn()
  {
    if (!zzd) {
      return;
    }
    throw new UnsupportedOperationException();
  }
  
  public final void clear()
  {
    zzn();
    if (!zzb.isEmpty()) {
      zzb.clear();
    }
    if (!zzc.isEmpty()) {
      zzc.clear();
    }
  }
  
  public final boolean containsKey(Object paramObject)
  {
    paramObject = (Comparable)paramObject;
    return (zzk(paramObject) >= 0) || (zzc.containsKey(paramObject));
  }
  
  public final Set entrySet()
  {
    if (zze == null) {
      zze = new zzgs(this, null);
    }
    return zze;
  }
  
  public final boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof zzgu)) {
      return super.equals(paramObject);
    }
    Object localObject = (zzgu)paramObject;
    int j = size();
    if (j != ((zzgu)localObject).size()) {
      return false;
    }
    int k = zzb();
    if (k == ((zzgu)localObject).zzb())
    {
      int i = 0;
      while (i < k)
      {
        if (!zzg(i).equals(((zzgu)localObject).zzg(i))) {
          return false;
        }
        i += 1;
      }
      if (k != j) {
        paramObject = zzc;
      }
    }
    for (localObject = zzc;; localObject = ((zzgu)localObject).entrySet())
    {
      return paramObject.equals(localObject);
      return true;
      paramObject = entrySet();
    }
  }
  
  public final Object get(Object paramObject)
  {
    paramObject = (Comparable)paramObject;
    int i = zzk(paramObject);
    if (i >= 0) {
      return ((zzgo)zzb.get(i)).getValue();
    }
    return zzc.get(paramObject);
  }
  
  public final int hashCode()
  {
    int k = zzb();
    int j = 0;
    int i = 0;
    while (j < k)
    {
      i += ((zzgo)zzb.get(j)).hashCode();
      j += 1;
    }
    j = i;
    if (zzc.size() > 0) {
      j = i + zzc.hashCode();
    }
    return j;
  }
  
  public final Object remove(Object paramObject)
  {
    zzn();
    paramObject = (Comparable)paramObject;
    int i = zzk(paramObject);
    if (i >= 0) {
      return zzl(i);
    }
    if (zzc.isEmpty()) {
      return null;
    }
    return zzc.remove(paramObject);
  }
  
  public final int size()
  {
    return zzb.size() + zzc.size();
  }
  
  public void zza()
  {
    if (!zzd)
    {
      Map localMap;
      if (zzc.isEmpty()) {
        localMap = Collections.emptyMap();
      } else {
        localMap = Collections.unmodifiableMap(zzc);
      }
      zzc = localMap;
      if (zzf.isEmpty()) {
        localMap = Collections.emptyMap();
      } else {
        localMap = Collections.unmodifiableMap(zzf);
      }
      zzf = localMap;
      zzd = true;
    }
  }
  
  public final int zzb()
  {
    return zzb.size();
  }
  
  public final Iterable zzc()
  {
    if (zzc.isEmpty()) {
      return zzgn.zza();
    }
    return zzc.entrySet();
  }
  
  public final Object zze(Comparable paramComparable, Object paramObject)
  {
    zzn();
    int i = zzk(paramComparable);
    if (i >= 0) {
      return ((zzgo)zzb.get(i)).setValue(paramObject);
    }
    zzn();
    if ((zzb.isEmpty()) && (!(zzb instanceof ArrayList))) {
      zzb = new ArrayList(zza);
    }
    i = -(i + 1);
    if (i >= zza) {
      return zzm().put(paramComparable, paramObject);
    }
    int j = zzb.size();
    int k = zza;
    if (j == k)
    {
      zzgo localZzgo = (zzgo)zzb.remove(k - 1);
      zzm().put(localZzgo.zza(), localZzgo.getValue());
    }
    zzb.add(i, new zzgo(this, paramComparable, paramObject));
    return null;
  }
  
  public final Map.Entry zzg(int paramInt)
  {
    return (Map.Entry)zzb.get(paramInt);
  }
  
  public final boolean zzj()
  {
    return zzd;
  }
}
