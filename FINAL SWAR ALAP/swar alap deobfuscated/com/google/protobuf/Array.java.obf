package com.google.protobuf;

import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.RandomAccess;

final class k0
  extends c
  implements c0.h, RandomAccess, e1
{
  private static final k0 h;
  private long[] f;
  private int g;
  
  static
  {
    k0 localK0 = new k0(new long[0], 0);
    h = localK0;
    localK0.c();
  }
  
  private k0(long[] paramArrayOfLong, int paramInt)
  {
    f = paramArrayOfLong;
    g = paramInt;
  }
  
  private void f(int paramInt, long paramLong)
  {
    b();
    if (paramInt >= 0)
    {
      int i = g;
      if (paramInt <= i)
      {
        long[] arrayOfLong1 = f;
        if (i < arrayOfLong1.length)
        {
          System.arraycopy(arrayOfLong1, paramInt, arrayOfLong1, paramInt + 1, i - paramInt);
        }
        else
        {
          long[] arrayOfLong2 = new long[i * 3 / 2 + 1];
          System.arraycopy(arrayOfLong1, 0, arrayOfLong2, 0, paramInt);
          System.arraycopy(f, paramInt, arrayOfLong2, paramInt + 1, g - paramInt);
          f = arrayOfLong2;
        }
        f[paramInt] = paramLong;
        g += 1;
        modCount += 1;
        return;
      }
    }
    throw new IndexOutOfBoundsException(m(paramInt));
  }
  
  public static k0 i()
  {
    return h;
  }
  
  private void j(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < g)) {
      return;
    }
    throw new IndexOutOfBoundsException(m(paramInt));
  }
  
  private String m(int paramInt)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Index:");
    localStringBuilder.append(paramInt);
    localStringBuilder.append(", Size:");
    localStringBuilder.append(g);
    return localStringBuilder.toString();
  }
  
  public c0.h a(int paramInt)
  {
    if (paramInt >= g) {
      return new k0(Arrays.copyOf(f, paramInt), g);
    }
    throw new IllegalArgumentException();
  }
  
  public boolean addAll(Collection paramCollection)
  {
    b();
    c0.a(paramCollection);
    if (!(paramCollection instanceof k0)) {
      return super.addAll(paramCollection);
    }
    paramCollection = (k0)paramCollection;
    int i = g;
    if (i == 0) {
      return false;
    }
    int j = g;
    if (Integer.MAX_VALUE - j >= i)
    {
      i = j + i;
      long[] arrayOfLong = f;
      if (i > arrayOfLong.length) {
        f = Arrays.copyOf(arrayOfLong, i);
      }
      System.arraycopy(f, 0, f, g, g);
      g = i;
      modCount += 1;
      return true;
    }
    throw new OutOfMemoryError();
  }
  
  public boolean contains(Object paramObject)
  {
    return indexOf(paramObject) != -1;
  }
  
  public void d(int paramInt, Long paramLong)
  {
    f(paramInt, paramLong.longValue());
  }
  
  public boolean e(Long paramLong)
  {
    h(paramLong.longValue());
    return true;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof k0)) {
      return super.equals(paramObject);
    }
    paramObject = (k0)paramObject;
    if (g != g) {
      return false;
    }
    paramObject = f;
    int i = 0;
    while (i < g)
    {
      if (f[i] != paramObject[i]) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public void h(long paramLong)
  {
    b();
    int i = g;
    long[] arrayOfLong1 = f;
    if (i == arrayOfLong1.length)
    {
      long[] arrayOfLong2 = new long[i * 3 / 2 + 1];
      System.arraycopy(arrayOfLong1, 0, arrayOfLong2, 0, i);
      f = arrayOfLong2;
    }
    arrayOfLong1 = f;
    i = g;
    g = (i + 1);
    arrayOfLong1[i] = paramLong;
  }
  
  public int hashCode()
  {
    int j = 1;
    int i = 0;
    while (i < g)
    {
      j = j * 31 + c0.f(f[i]);
      i += 1;
    }
    return j;
  }
  
  public int indexOf(Object paramObject)
  {
    if (!(paramObject instanceof Long)) {
      return -1;
    }
    long l = ((Long)paramObject).longValue();
    int j = size();
    int i = 0;
    while (i < j)
    {
      if (f[i] == l) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public Long k(int paramInt)
  {
    return Long.valueOf(l(paramInt));
  }
  
  public long l(int paramInt)
  {
    j(paramInt);
    return f[paramInt];
  }
  
  public Long o(int paramInt)
  {
    b();
    j(paramInt);
    long[] arrayOfLong = f;
    long l = arrayOfLong[paramInt];
    int i = g;
    if (paramInt < i - 1) {
      System.arraycopy(arrayOfLong, paramInt + 1, arrayOfLong, paramInt, i - paramInt - 1);
    }
    g -= 1;
    modCount += 1;
    return Long.valueOf(l);
  }
  
  public Long p(int paramInt, Long paramLong)
  {
    return Long.valueOf(q(paramInt, paramLong.longValue()));
  }
  
  public long q(int paramInt, long paramLong)
  {
    b();
    j(paramInt);
    long[] arrayOfLong = f;
    long l = arrayOfLong[paramInt];
    arrayOfLong[paramInt] = paramLong;
    return l;
  }
  
  protected void removeRange(int paramInt1, int paramInt2)
  {
    b();
    if (paramInt2 >= paramInt1)
    {
      long[] arrayOfLong = f;
      System.arraycopy(arrayOfLong, paramInt2, arrayOfLong, paramInt1, g - paramInt2);
      g -= paramInt2 - paramInt1;
      modCount += 1;
      return;
    }
    throw new IndexOutOfBoundsException("toIndex < fromIndex");
  }
  
  public int size()
  {
    return g;
  }
}
