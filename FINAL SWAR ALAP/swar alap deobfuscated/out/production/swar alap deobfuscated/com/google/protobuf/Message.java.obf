package com.google.protobuf;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

public abstract class a
  implements t0
{
  protected int memoizedHashCode = 0;
  
  public a() {}
  
  @Deprecated
  protected static <T> void addAll(Iterable<T> paramIterable, Collection<? super T> paramCollection)
  {
    a.addAll(paramIterable, (List)paramCollection);
  }
  
  protected static <T> void addAll(Iterable<T> paramIterable, List<? super T> paramList)
  {
    a.addAll(paramIterable, paramList);
  }
  
  private String b(String paramString)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Serializing ");
    localStringBuilder.append(getClass().getName());
    localStringBuilder.append(" to a ");
    localStringBuilder.append(paramString);
    localStringBuilder.append(" threw an IOException (should never happen).");
    return localStringBuilder.toString();
  }
  
  protected static void checkByteStringIsUtf8(j paramJ)
  {
    if (paramJ.w()) {
      return;
    }
    throw new IllegalArgumentException("Byte string is not UTF-8.");
  }
  
  abstract int getMemoizedSerializedSize();
  
  int getSerializedSize(l1 paramL1)
  {
    int j = getMemoizedSerializedSize();
    int i = j;
    if (j == -1)
    {
      i = paramL1.h(this);
      setMemoizedSerializedSize(i);
    }
    return i;
  }
  
  s1 newUninitializedMessageException()
  {
    return new s1(this);
  }
  
  abstract void setMemoizedSerializedSize(int paramInt);
  
  public byte[] toByteArray()
  {
    try
    {
      byte[] arrayOfByte = new byte[getSerializedSize()];
      m localM = m.e0(arrayOfByte);
      writeTo(localM);
      localM.d();
      return arrayOfByte;
    }
    catch (IOException localIOException)
    {
      throw new RuntimeException(b("byte array"), localIOException);
    }
  }
  
  public j toByteString()
  {
    try
    {
      Object localObject = j.y(getSerializedSize());
      writeTo(((j.h)localObject).b());
      localObject = ((j.h)localObject).a();
      return localObject;
    }
    catch (IOException localIOException)
    {
      throw new RuntimeException(b("ByteString"), localIOException);
    }
  }
  
  public void writeDelimitedTo(OutputStream paramOutputStream)
  {
    int i = getSerializedSize();
    paramOutputStream = m.d0(paramOutputStream, m.G(m.I(i) + i));
    paramOutputStream.K0(i);
    writeTo(paramOutputStream);
    paramOutputStream.a0();
  }
  
  public void writeTo(OutputStream paramOutputStream)
  {
    paramOutputStream = m.d0(paramOutputStream, m.G(getSerializedSize()));
    writeTo(paramOutputStream);
    paramOutputStream.a0();
  }
  
  public static abstract class a
    implements t0.a
  {
    public a() {}
    
    @Deprecated
    protected static <T> void addAll(Iterable<T> paramIterable, Collection<? super T> paramCollection)
    {
      addAll(paramIterable, (List)paramCollection);
    }
    
    protected static <T> void addAll(Iterable<T> paramIterable, List<? super T> paramList)
    {
      c0.a(paramIterable);
      if ((paramIterable instanceof i0))
      {
        Object localObject = ((i0)paramIterable).R();
        paramIterable = (i0)paramList;
        int j = paramList.size();
        paramList = ((List)localObject).iterator();
        while (paramList.hasNext())
        {
          localObject = paramList.next();
          if (localObject == null)
          {
            paramList = new StringBuilder();
            paramList.append("Element at index ");
            paramList.append(paramIterable.size() - j);
            paramList.append(" is null.");
            paramList = paramList.toString();
            int i = paramIterable.size() - 1;
            while (i >= j)
            {
              paramIterable.remove(i);
              i -= 1;
            }
            throw new NullPointerException(paramList);
          }
          if ((localObject instanceof j)) {
            paramIterable.n((j)localObject);
          } else {
            paramIterable.add((String)localObject);
          }
        }
      }
      if ((paramIterable instanceof e1))
      {
        paramList.addAll((Collection)paramIterable);
        return;
      }
      b(paramIterable, paramList);
    }
    
    private static void b(Iterable paramIterable, List paramList)
    {
      if (((paramList instanceof ArrayList)) && ((paramIterable instanceof Collection))) {
        ((ArrayList)paramList).ensureCapacity(paramList.size() + ((Collection)paramIterable).size());
      }
      int j = paramList.size();
      paramIterable = paramIterable.iterator();
      while (paramIterable.hasNext())
      {
        Object localObject = paramIterable.next();
        if (localObject == null)
        {
          paramIterable = new StringBuilder();
          paramIterable.append("Element at index ");
          paramIterable.append(paramList.size() - j);
          paramIterable.append(" is null.");
          paramIterable = paramIterable.toString();
          int i = paramList.size() - 1;
          while (i >= j)
          {
            paramList.remove(i);
            i -= 1;
          }
          throw new NullPointerException(paramIterable);
        }
        paramList.add(localObject);
      }
    }
    
    private String c(String paramString)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Reading ");
      localStringBuilder.append(getClass().getName());
      localStringBuilder.append(" from a ");
      localStringBuilder.append(paramString);
      localStringBuilder.append(" threw an IOException (should never happen).");
      return localStringBuilder.toString();
    }
    
    protected static s1 newUninitializedMessageException(t0 paramT0)
    {
      return new s1(paramT0);
    }
    
    protected abstract a internalMergeFrom(a paramA);
    
    public boolean mergeDelimitedFrom(InputStream paramInputStream)
    {
      return mergeDelimitedFrom(paramInputStream, r.b());
    }
    
    public boolean mergeDelimitedFrom(InputStream paramInputStream, r paramR)
    {
      int i = paramInputStream.read();
      if (i == -1) {
        return false;
      }
      mergeFrom(new a(paramInputStream, k.x(i, paramInputStream)), paramR);
      return true;
    }
    
    public a mergeFrom(j paramJ)
    {
      try
      {
        paramJ = paramJ.z();
        mergeFrom(paramJ);
        paramJ.a(0);
        return this;
      }
      catch (IOException paramJ)
      {
        throw new RuntimeException(c("ByteString"), paramJ);
      }
      catch (d0 paramJ)
      {
        throw paramJ;
      }
    }
    
    public a mergeFrom(j paramJ, r paramR)
    {
      try
      {
        paramJ = paramJ.z();
        mergeFrom(paramJ, paramR);
        paramJ.a(0);
        return this;
      }
      catch (IOException paramJ)
      {
        throw new RuntimeException(c("ByteString"), paramJ);
      }
      catch (d0 paramJ)
      {
        throw paramJ;
      }
    }
    
    public a mergeFrom(k paramK)
    {
      return mergeFrom(paramK, r.b());
    }
    
    public abstract a mergeFrom(k paramK, r paramR);
    
    public a mergeFrom(t0 paramT0)
    {
      if (getDefaultInstanceForType().getClass().isInstance(paramT0)) {
        return internalMergeFrom((a)paramT0);
      }
      throw new IllegalArgumentException("mergeFrom(MessageLite) can only merge messages of the same type.");
    }
    
    public a mergeFrom(InputStream paramInputStream)
    {
      paramInputStream = k.f(paramInputStream);
      mergeFrom(paramInputStream);
      paramInputStream.a(0);
      return this;
    }
    
    public a mergeFrom(InputStream paramInputStream, r paramR)
    {
      paramInputStream = k.f(paramInputStream);
      mergeFrom(paramInputStream, paramR);
      paramInputStream.a(0);
      return this;
    }
    
    public a mergeFrom(byte[] paramArrayOfByte)
    {
      return mergeFrom(paramArrayOfByte, 0, paramArrayOfByte.length);
    }
    
    public abstract a mergeFrom(byte[] paramArrayOfByte, int paramInt1, int paramInt2);
    
    public abstract a mergeFrom(byte[] paramArrayOfByte, int paramInt1, int paramInt2, r paramR);
    
    public a mergeFrom(byte[] paramArrayOfByte, r paramR)
    {
      return mergeFrom(paramArrayOfByte, 0, paramArrayOfByte.length, paramR);
    }
    
    static final class a
      extends FilterInputStream
    {
      private int e;
      
      a(InputStream paramInputStream, int paramInt)
      {
        super();
        e = paramInt;
      }
      
      public int available()
      {
        return Math.min(super.available(), e);
      }
      
      public int read()
      {
        if (e <= 0) {
          return -1;
        }
        int i = super.read();
        if (i >= 0) {
          e -= 1;
        }
        return i;
      }
      
      public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
      {
        int i = e;
        if (i <= 0) {
          return -1;
        }
        paramInt1 = super.read(paramArrayOfByte, paramInt1, Math.min(paramInt2, i));
        if (paramInt1 >= 0) {
          e -= paramInt1;
        }
        return paramInt1;
      }
      
      public long skip(long paramLong)
      {
        paramLong = super.skip(Math.min(paramLong, e));
        if (paramLong >= 0L) {
          e = ((int)(e - paramLong));
        }
        return paramLong;
      }
    }
  }
}
