package androidx.core.app;

import android.app.Activity;
import android.app.SharedElementCallback;
import android.app.SharedElementCallback.OnSharedElementsReadyListener;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.content.pm.PackageManager;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public abstract class b
  extends androidx.core.content.a
{
  public static void A(Activity paramActivity)
  {
    c.e(paramActivity);
  }
  
  public static void p(Activity paramActivity)
  {
    b.a(paramActivity);
  }
  
  public static void q(Activity paramActivity)
  {
    c.a(paramActivity);
  }
  
  public static void s(Activity paramActivity)
  {
    c.b(paramActivity);
  }
  
  public static void t(Activity paramActivity)
  {
    if (Build.VERSION.SDK_INT >= 28)
    {
      paramActivity.recreate();
      return;
    }
    new Handler(paramActivity.getMainLooper()).post(new a(paramActivity));
  }
  
  public static void u(final Activity paramActivity, String[] paramArrayOfString, final int paramInt)
  {
    HashSet localHashSet = new HashSet();
    int k = 0;
    int i = 0;
    while (i < paramArrayOfString.length) {
      if (!TextUtils.isEmpty(paramArrayOfString[i]))
      {
        if ((!androidx.core.os.a.d()) && (TextUtils.equals(paramArrayOfString[i], "android.permission.POST_NOTIFICATIONS"))) {
          localHashSet.add(Integer.valueOf(i));
        }
        i += 1;
      }
      else
      {
        paramActivity = new StringBuilder();
        paramActivity.append("Permission request for permissions ");
        paramActivity.append(Arrays.toString(paramArrayOfString));
        paramActivity.append(" must not contain null or empty values");
        throw new IllegalArgumentException(paramActivity.toString());
      }
    }
    i = localHashSet.size();
    String[] arrayOfString;
    if (i > 0) {
      arrayOfString = new String[paramArrayOfString.length - i];
    } else {
      arrayOfString = paramArrayOfString;
    }
    if (i > 0)
    {
      if (i == paramArrayOfString.length) {
        return;
      }
      int j = 0;
      i = k;
      while (i < paramArrayOfString.length)
      {
        k = j;
        if (!localHashSet.contains(Integer.valueOf(i)))
        {
          arrayOfString[j] = paramArrayOfString[i];
          k = j + 1;
        }
        i += 1;
        j = k;
      }
    }
    if (Build.VERSION.SDK_INT >= 23)
    {
      if ((paramActivity instanceof f)) {
        ((f)paramActivity).validateRequestPermissionsRequestCode(paramInt);
      }
      d.b(paramActivity, paramArrayOfString, paramInt);
      return;
    }
    if ((paramActivity instanceof e)) {
      new Handler(Looper.getMainLooper()).post(new a(arrayOfString, paramActivity, paramInt));
    }
  }
  
  public static void v(Activity paramActivity, n0 paramN0)
  {
    c.c(paramActivity, null);
  }
  
  public static void w(Activity paramActivity, n0 paramN0)
  {
    c.d(paramActivity, null);
  }
  
  public static boolean x(Activity paramActivity, String paramString)
  {
    if ((!androidx.core.os.a.d()) && (TextUtils.equals("android.permission.POST_NOTIFICATIONS", paramString))) {
      return false;
    }
    if (Build.VERSION.SDK_INT >= 23) {
      return d.c(paramActivity, paramString);
    }
    return false;
  }
  
  public static void y(Activity paramActivity, Intent paramIntent, int paramInt, Bundle paramBundle)
  {
    b.b(paramActivity, paramIntent, paramInt, paramBundle);
  }
  
  public static void z(Activity paramActivity, IntentSender paramIntentSender, int paramInt1, Intent paramIntent, int paramInt2, int paramInt3, int paramInt4, Bundle paramBundle)
  {
    b.c(paramActivity, paramIntentSender, paramInt1, paramIntent, paramInt2, paramInt3, paramInt4, paramBundle);
  }
  
  class a
    implements Runnable
  {
    a(Activity paramActivity, int paramInt) {}
    
    public void run()
    {
      int[] arrayOfInt = new int[b.this.length];
      PackageManager localPackageManager = paramActivity.getPackageManager();
      String str = paramActivity.getPackageName();
      int j = b.this.length;
      int i = 0;
      while (i < j)
      {
        arrayOfInt[i] = localPackageManager.checkPermission(b.this[i], str);
        i += 1;
      }
      ((b.e)paramActivity).onRequestPermissionsResult(paramInt, b.this, arrayOfInt);
    }
  }
  
  static abstract class b
  {
    static void a(Activity paramActivity)
    {
      paramActivity.finishAffinity();
    }
    
    static void b(Activity paramActivity, Intent paramIntent, int paramInt, Bundle paramBundle)
    {
      paramActivity.startActivityForResult(paramIntent, paramInt, paramBundle);
    }
    
    static void c(Activity paramActivity, IntentSender paramIntentSender, int paramInt1, Intent paramIntent, int paramInt2, int paramInt3, int paramInt4, Bundle paramBundle)
    {
      paramActivity.startIntentSenderForResult(paramIntentSender, paramInt1, paramIntent, paramInt2, paramInt3, paramInt4, paramBundle);
    }
  }
  
  static abstract class c
  {
    static void a(Activity paramActivity)
    {
      paramActivity.finishAfterTransition();
    }
    
    static void b(Activity paramActivity)
    {
      paramActivity.postponeEnterTransition();
    }
    
    static void c(Activity paramActivity, SharedElementCallback paramSharedElementCallback)
    {
      paramActivity.setEnterSharedElementCallback(paramSharedElementCallback);
    }
    
    static void d(Activity paramActivity, SharedElementCallback paramSharedElementCallback)
    {
      paramActivity.setExitSharedElementCallback(paramSharedElementCallback);
    }
    
    static void e(Activity paramActivity)
    {
      paramActivity.startPostponedEnterTransition();
    }
  }
  
  static abstract class d
  {
    static void a(Object paramObject)
    {
      ((SharedElementCallback.OnSharedElementsReadyListener)paramObject).onSharedElementsReady();
    }
    
    static void b(Activity paramActivity, String[] paramArrayOfString, int paramInt)
    {
      paramActivity.requestPermissions(paramArrayOfString, paramInt);
    }
    
    static boolean c(Activity paramActivity, String paramString)
    {
      return paramActivity.shouldShowRequestPermissionRationale(paramString);
    }
  }
  
  public static abstract interface e
  {
    public abstract void onRequestPermissionsResult(int paramInt, String[] paramArrayOfString, int[] paramArrayOfInt);
  }
  
  public static abstract interface f
  {
    public abstract void validateRequestPermissionsRequestCode(int paramInt);
  }
}
