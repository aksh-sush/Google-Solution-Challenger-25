package androidx.core.graphics.drawable;

import android.content.ContentResolver;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.Bitmap.Config;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.PorterDuff.Mode;
import android.graphics.Shader;
import android.graphics.Shader.TileMode;
import android.graphics.drawable.AdaptiveIconDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Icon;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Parcelable;
import android.text.TextUtils;
import android.util.Log;
import androidx.core.util.c;
import androidx.versionedparcelable.CustomVersionedParcelable;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.charset.Charset;

public class IconCompat
  extends CustomVersionedParcelable
{
  static final PorterDuff.Mode k = PorterDuff.Mode.SRC_IN;
  public int a;
  Object b;
  public byte[] c;
  public Parcelable d;
  public int e;
  public int f;
  public ColorStateList g;
  PorterDuff.Mode h;
  public String i;
  public String j;
  
  public IconCompat()
  {
    a = -1;
    c = null;
    d = null;
    e = 0;
    f = 0;
    g = null;
    h = k;
    i = null;
  }
  
  IconCompat(int paramInt)
  {
    c = null;
    d = null;
    e = 0;
    f = 0;
    g = null;
    h = k;
    i = null;
    a = paramInt;
  }
  
  static Bitmap a(Bitmap paramBitmap, boolean paramBoolean)
  {
    int m = (int)(Math.min(paramBitmap.getWidth(), paramBitmap.getHeight()) * 0.6666667F);
    Bitmap localBitmap = Bitmap.createBitmap(m, m, Bitmap.Config.ARGB_8888);
    Canvas localCanvas = new Canvas(localBitmap);
    Paint localPaint = new Paint(3);
    float f1 = m;
    float f2 = 0.5F * f1;
    float f3 = 0.9166667F * f2;
    if (paramBoolean)
    {
      float f4 = 0.010416667F * f1;
      localPaint.setColor(0);
      localPaint.setShadowLayer(f4, 0.0F, f1 * 0.020833334F, 1023410176);
      localCanvas.drawCircle(f2, f2, f3, localPaint);
      localPaint.setShadowLayer(f4, 0.0F, 0.0F, 503316480);
      localCanvas.drawCircle(f2, f2, f3, localPaint);
      localPaint.clearShadowLayer();
    }
    localPaint.setColor(-16777216);
    Object localObject = Shader.TileMode.CLAMP;
    localObject = new BitmapShader(paramBitmap, (Shader.TileMode)localObject, (Shader.TileMode)localObject);
    Matrix localMatrix = new Matrix();
    localMatrix.setTranslate(-(paramBitmap.getWidth() - m) / 2.0F, -(paramBitmap.getHeight() - m) / 2.0F);
    ((Shader)localObject).setLocalMatrix(localMatrix);
    localPaint.setShader((Shader)localObject);
    localCanvas.drawCircle(f2, f2, f3, localPaint);
    localCanvas.setBitmap(null);
    return localBitmap;
  }
  
  public static IconCompat b(Bitmap paramBitmap)
  {
    c.c(paramBitmap);
    IconCompat localIconCompat = new IconCompat(1);
    b = paramBitmap;
    return localIconCompat;
  }
  
  public static IconCompat c(Resources paramResources, String paramString, int paramInt)
  {
    c.c(paramString);
    IconCompat localIconCompat;
    if (paramInt != 0)
    {
      localIconCompat = new IconCompat(2);
      e = paramInt;
      if (paramResources == null) {}
    }
    try
    {
      b = paramResources.getResourceName(paramInt);
    }
    catch (Resources.NotFoundException paramResources)
    {
      for (;;) {}
    }
    throw new IllegalArgumentException("Icon resource cannot be found");
    b = paramString;
    j = paramString;
    return localIconCompat;
    throw new IllegalArgumentException("Drawable resource ID must not be 0");
  }
  
  private static String n(int paramInt)
  {
    switch (paramInt)
    {
    default: 
      return "UNKNOWN";
    case 6: 
      return "URI_MASKABLE";
    case 5: 
      return "BITMAP_MASKABLE";
    case 4: 
      return "URI";
    case 3: 
      return "DATA";
    case 2: 
      return "RESOURCE";
    }
    return "BITMAP";
  }
  
  public Bitmap d()
  {
    int m = a;
    if ((m == -1) && (Build.VERSION.SDK_INT >= 23))
    {
      localObject = b;
      if ((localObject instanceof Bitmap)) {
        return (Bitmap)localObject;
      }
      return null;
    }
    if (m == 1) {
      return (Bitmap)b;
    }
    if (m == 5) {
      return a((Bitmap)b, true);
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("called getBitmap() on ");
    ((StringBuilder)localObject).append(this);
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public int e()
  {
    int m = a;
    if ((m == -1) && (Build.VERSION.SDK_INT >= 23)) {
      return a.a(b);
    }
    if (m == 2) {
      return e;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("called getResId() on ");
    localStringBuilder.append(this);
    throw new IllegalStateException(localStringBuilder.toString());
  }
  
  public String f()
  {
    int m = a;
    if ((m == -1) && (Build.VERSION.SDK_INT >= 23)) {
      return a.b(b);
    }
    if (m == 2)
    {
      localObject = j;
      if ((localObject != null) && (!TextUtils.isEmpty((CharSequence)localObject))) {
        return j;
      }
      return ((String)b).split(":", -1)[0];
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("called getResPackage() on ");
    ((StringBuilder)localObject).append(this);
    throw new IllegalStateException(((StringBuilder)localObject).toString());
  }
  
  public int g()
  {
    int n = a;
    int m = n;
    if (n == -1)
    {
      m = n;
      if (Build.VERSION.SDK_INT >= 23) {
        m = a.c(b);
      }
    }
    return m;
  }
  
  public Uri h()
  {
    int m = a;
    if ((m == -1) && (Build.VERSION.SDK_INT >= 23)) {
      return a.d(b);
    }
    if ((m != 4) && (m != 6))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("called getUri() on ");
      localStringBuilder.append(this);
      throw new IllegalStateException(localStringBuilder.toString());
    }
    return Uri.parse((String)b);
  }
  
  public InputStream i(Context paramContext)
  {
    Uri localUri = h();
    String str = localUri.getScheme();
    if ((!"content".equals(str)) && (!"file".equals(str))) {
      try
      {
        paramContext = new FileInputStream(new File((String)b));
        return paramContext;
      }
      catch (FileNotFoundException localFileNotFoundException)
      {
        paramContext = new StringBuilder();
        str = "Unable to load image from path: ";
      }
    } else {
      try
      {
        paramContext = paramContext.getContentResolver().openInputStream(localUri);
        return paramContext;
      }
      catch (Exception localException)
      {
        paramContext = new StringBuilder();
        str = "Unable to load image from URI: ";
      }
    }
    paramContext.append(str);
    paramContext.append(localUri);
    Log.w("IconCompat", paramContext.toString(), localException);
    return null;
  }
  
  public void j()
  {
    h = PorterDuff.Mode.valueOf(i);
    Object localObject;
    switch (a)
    {
    case 0: 
    default: 
      return;
    case 3: 
      b = c;
      return;
    case 2: 
    case 4: 
    case 6: 
      localObject = new String(c, Charset.forName("UTF-16"));
      b = localObject;
      if ((a != 2) || (j != null)) {
        return;
      }
      j = localObject.split(":", -1)[0];
      return;
    case 1: 
    case 5: 
      localObject = d;
      if (localObject == null)
      {
        localObject = c;
        b = localObject;
        a = 3;
        e = 0;
        f = localObject.length;
        return;
      }
      break;
    case -1: 
      localObject = d;
      if (localObject == null) {
        break label176;
      }
    }
    b = localObject;
    return;
    label176:
    throw new IllegalArgumentException("Invalid icon");
  }
  
  public void k(boolean paramBoolean)
  {
    i = h.name();
    switch (a)
    {
    case 0: 
    default: 
      return;
    case 4: 
    case 6: 
      c = b.toString().getBytes(Charset.forName("UTF-16"));
      return;
    case 3: 
      c = ((byte[])b);
      return;
    case 2: 
      c = ((String)b).getBytes(Charset.forName("UTF-16"));
      return;
    case 1: 
    case 5: 
      if (paramBoolean)
      {
        Bitmap localBitmap = (Bitmap)b;
        ByteArrayOutputStream localByteArrayOutputStream = new ByteArrayOutputStream();
        localBitmap.compress(Bitmap.CompressFormat.PNG, 90, localByteArrayOutputStream);
        c = localByteArrayOutputStream.toByteArray();
        return;
      }
      break;
    case -1: 
      if (paramBoolean) {
        break label171;
      }
    }
    d = ((Parcelable)b);
    return;
    label171:
    throw new IllegalArgumentException("Can't serialize Icon created with IconCompat#createFromIcon");
  }
  
  public Icon l()
  {
    return m(null);
  }
  
  public Icon m(Context paramContext)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      return a.f(this, paramContext);
    }
    throw new UnsupportedOperationException("This method is only supported on API level 23+");
  }
  
  public String toString()
  {
    if (a == -1) {
      return String.valueOf(b);
    }
    StringBuilder localStringBuilder = new StringBuilder("Icon(typ=");
    localStringBuilder.append(n(a));
    int m;
    switch (a)
    {
    default: 
      break;
    case 4: 
    case 6: 
      localStringBuilder.append(" uri=");
      localStringBuilder.append(b);
      break;
    case 3: 
      localStringBuilder.append(" len=");
      localStringBuilder.append(e);
      if (f == 0) {
        break label244;
      }
      localStringBuilder.append(" off=");
      m = f;
      break;
    case 2: 
      localStringBuilder.append(" pkg=");
      localStringBuilder.append(j);
      localStringBuilder.append(" id=");
      localStringBuilder.append(String.format("0x%08x", new Object[] { Integer.valueOf(e()) }));
      break;
    case 1: 
    case 5: 
      localStringBuilder.append(" size=");
      localStringBuilder.append(((Bitmap)b).getWidth());
      localStringBuilder.append("x");
      m = ((Bitmap)b).getHeight();
    }
    localStringBuilder.append(m);
    label244:
    if (g != null)
    {
      localStringBuilder.append(" tint=");
      localStringBuilder.append(g);
    }
    if (h != k)
    {
      localStringBuilder.append(" mode=");
      localStringBuilder.append(h);
    }
    localStringBuilder.append(")");
    return localStringBuilder.toString();
  }
  
  static abstract class a
  {
    static int a(Object paramObject)
    {
      if (Build.VERSION.SDK_INT >= 28) {
        return IconCompat.c.a(paramObject);
      }
      try
      {
        int i = ((Integer)paramObject.getClass().getMethod("getResId", new Class[0]).invoke(paramObject, new Object[0])).intValue();
        return i;
      }
      catch (NoSuchMethodException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon resource", paramObject);
        return 0;
      }
      catch (InvocationTargetException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon resource", paramObject);
        return 0;
      }
      catch (IllegalAccessException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon resource", paramObject);
      }
      return 0;
    }
    
    static String b(Object paramObject)
    {
      if (Build.VERSION.SDK_INT >= 28) {
        return IconCompat.c.b(paramObject);
      }
      try
      {
        paramObject = (String)paramObject.getClass().getMethod("getResPackage", new Class[0]).invoke(paramObject, new Object[0]);
        return paramObject;
      }
      catch (NoSuchMethodException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon package", paramObject);
        return null;
      }
      catch (InvocationTargetException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon package", paramObject);
        return null;
      }
      catch (IllegalAccessException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon package", paramObject);
      }
      return null;
    }
    
    static int c(Object paramObject)
    {
      if (Build.VERSION.SDK_INT >= 28) {
        return IconCompat.c.c(paramObject);
      }
      try
      {
        int i = ((Integer)paramObject.getClass().getMethod("getType", new Class[0]).invoke(paramObject, new Object[0])).intValue();
        return i;
      }
      catch (NoSuchMethodException localNoSuchMethodException)
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("Unable to get icon type ");
        localStringBuilder.append(paramObject);
        Log.e("IconCompat", localStringBuilder.toString(), localNoSuchMethodException);
        return -1;
      }
      catch (InvocationTargetException localInvocationTargetException)
      {
        for (;;)
        {
          localStringBuilder = new StringBuilder();
        }
      }
      catch (IllegalAccessException localIllegalAccessException)
      {
        for (;;)
        {
          StringBuilder localStringBuilder = new StringBuilder();
        }
      }
    }
    
    static Uri d(Object paramObject)
    {
      if (Build.VERSION.SDK_INT >= 28) {
        return IconCompat.c.d(paramObject);
      }
      try
      {
        paramObject = (Uri)paramObject.getClass().getMethod("getUri", new Class[0]).invoke(paramObject, new Object[0]);
        return paramObject;
      }
      catch (NoSuchMethodException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon uri", paramObject);
        return null;
      }
      catch (InvocationTargetException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon uri", paramObject);
        return null;
      }
      catch (IllegalAccessException paramObject)
      {
        Log.e("IconCompat", "Unable to get icon uri", paramObject);
      }
      return null;
    }
    
    static Drawable e(Icon paramIcon, Context paramContext)
    {
      return paramIcon.loadDrawable(paramContext);
    }
    
    static Icon f(IconCompat paramIconCompat, Context paramContext)
    {
      Object localObject;
      switch (a)
      {
      case 0: 
      default: 
        throw new IllegalArgumentException("Unknown type");
      case 6: 
        int i = Build.VERSION.SDK_INT;
        if (i >= 30)
        {
          paramContext = IconCompat.d.a(paramIconCompat.h());
        }
        else if (paramContext != null)
        {
          paramContext = paramIconCompat.i(paramContext);
          if (paramContext != null)
          {
            paramContext = BitmapFactory.decodeStream(paramContext);
            localObject = paramContext;
            if (i < 26) {
              break label217;
            }
          }
          else
          {
            paramContext = new StringBuilder();
            paramContext.append("Cannot load adaptive icon from uri: ");
            paramContext.append(paramIconCompat.h());
            throw new IllegalStateException(paramContext.toString());
          }
        }
        else
        {
          paramContext = new StringBuilder();
          paramContext.append("Context is required to resolve the file uri of the icon: ");
          paramContext.append(paramIconCompat.h());
          throw new IllegalArgumentException(paramContext.toString());
        }
      case 5: 
        if (Build.VERSION.SDK_INT >= 26)
        {
          paramContext = (Bitmap)b;
          paramContext = IconCompat.b.b(paramContext);
        }
        else
        {
          localObject = (Bitmap)b;
          paramContext = IconCompat.a((Bitmap)localObject, false);
        }
        break;
      case 4: 
        paramContext = Icon.createWithContentUri((String)b);
        break;
      case 3: 
        paramContext = Icon.createWithData((byte[])b, e, f);
        break;
      case 2: 
        paramContext = Icon.createWithResource(paramIconCompat.f(), e);
        break;
      case 1: 
        label217:
        paramContext = (Bitmap)b;
        paramContext = Icon.createWithBitmap(paramContext);
        localObject = g;
        if (localObject != null) {
          paramContext.setTintList((ColorStateList)localObject);
        }
        paramIconCompat = h;
        if (paramIconCompat != IconCompat.k) {
          paramContext.setTintMode(paramIconCompat);
        }
        return paramContext;
      }
      return (Icon)b;
    }
  }
  
  static abstract class b
  {
    static Drawable a(Drawable paramDrawable1, Drawable paramDrawable2)
    {
      return new AdaptiveIconDrawable(paramDrawable1, paramDrawable2);
    }
    
    static Icon b(Bitmap paramBitmap)
    {
      return Icon.createWithAdaptiveBitmap(paramBitmap);
    }
  }
  
  static abstract class c
  {
    static int a(Object paramObject)
    {
      return ((Icon)paramObject).getResId();
    }
    
    static String b(Object paramObject)
    {
      return ((Icon)paramObject).getResPackage();
    }
    
    static int c(Object paramObject)
    {
      return ((Icon)paramObject).getType();
    }
    
    static Uri d(Object paramObject)
    {
      return ((Icon)paramObject).getUri();
    }
  }
  
  static abstract class d
  {
    static Icon a(Uri paramUri)
    {
      return Icon.createWithAdaptiveBitmapContentUri(paramUri);
    }
  }
}
