package androidx.fragment.app;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.util.Log;
import android.view.LayoutInflater.Factory2;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import androidx.activity.OnBackPressedDispatcher;
import androidx.activity.result.ActivityResultRegistry;
import androidx.activity.result.d;
import androidx.activity.result.e.a;
import androidx.lifecycle.i.b;
import androidx.lifecycle.l0;
import androidx.lifecycle.m0;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class m
{
  private static boolean O = false;
  static boolean P = true;
  private androidx.activity.result.c A;
  private androidx.activity.result.c B;
  ArrayDeque C = new ArrayDeque();
  private boolean D;
  private boolean E;
  private boolean F;
  private boolean G;
  private boolean H;
  private ArrayList I;
  private ArrayList J;
  private ArrayList K;
  private ArrayList L;
  private p M;
  private Runnable N = new g();
  private final ArrayList a = new ArrayList();
  private boolean b;
  private final t c = new t();
  ArrayList d;
  private ArrayList e;
  private final k f = new k(this);
  private OnBackPressedDispatcher g;
  private final androidx.activity.o h = new c(false);
  private final AtomicInteger i = new AtomicInteger();
  private final Map j = Collections.synchronizedMap(new HashMap());
  private final Map k = Collections.synchronizedMap(new HashMap());
  private ArrayList l;
  private Map m = Collections.synchronizedMap(new HashMap());
  private final v.g n = new d();
  private final l o = new l(this);
  private final CopyOnWriteArrayList p = new CopyOnWriteArrayList();
  int q = -1;
  private j r;
  private g s;
  private Fragment t;
  Fragment u;
  private i v = null;
  private i w = new e();
  private b0 x = null;
  private b0 y = new f();
  private androidx.activity.result.c z;
  
  public m() {}
  
  static boolean F0(int paramInt)
  {
    return (O) || (Log.isLoggable("FragmentManager", paramInt));
  }
  
  private boolean G0(Fragment paramFragment)
  {
    return ((mHasMenu) && (mMenuVisible)) || (mChildFragmentManager.o());
  }
  
  private void L(Fragment paramFragment)
  {
    if ((paramFragment != null) && (paramFragment.equals(g0(mWho)))) {
      paramFragment.performPrimaryNavigationFragmentChanged();
    }
  }
  
  private void O0(androidx.collection.b paramB)
  {
    int i2 = paramB.size();
    int i1 = 0;
    while (i1 < i2)
    {
      Fragment localFragment = (Fragment)paramB.k(i1);
      if (!mAdded)
      {
        View localView = localFragment.requireView();
        mPostponedAlpha = localView.getAlpha();
        localView.setAlpha(0.0F);
      }
      i1 += 1;
    }
  }
  
  private void S(int paramInt)
  {
    try
    {
      b = true;
      c.d(paramInt);
      Q0(paramInt, false);
      if (P)
      {
        Iterator localIterator = r().iterator();
        while (localIterator.hasNext()) {
          ((a0)localIterator.next()).j();
        }
      }
      b = false;
      a0(true);
      return;
    }
    finally
    {
      b = false;
    }
  }
  
  private void V()
  {
    if (H)
    {
      H = false;
      q1();
    }
  }
  
  private void X()
  {
    Iterator localIterator;
    if (P)
    {
      localIterator = r().iterator();
      while (localIterator.hasNext()) {
        ((a0)localIterator.next()).j();
      }
    }
    if (!m.isEmpty())
    {
      localIterator = m.keySet().iterator();
      while (localIterator.hasNext())
      {
        Fragment localFragment = (Fragment)localIterator.next();
        n(localFragment);
        R0(localFragment);
      }
    }
  }
  
  private boolean Y0(String paramString, int paramInt1, int paramInt2)
  {
    a0(false);
    Z(true);
    Fragment localFragment = u;
    if ((localFragment != null) && (paramInt1 < 0) && (paramString == null) && (localFragment.getChildFragmentManager().X0())) {
      return true;
    }
    boolean bool = Z0(I, J, paramString, paramInt1, paramInt2);
    if (bool) {
      b = true;
    }
    try
    {
      e1(I, J);
      q();
    }
    finally
    {
      q();
    }
    V();
    c.b();
    return bool;
  }
  
  private void Z(boolean paramBoolean)
  {
    if (!b)
    {
      if (r == null)
      {
        if (G) {
          throw new IllegalStateException("FragmentManager has been destroyed");
        }
        throw new IllegalStateException("FragmentManager has not been attached to a host.");
      }
      if (Looper.myLooper() == r.g().getLooper())
      {
        if (!paramBoolean) {
          p();
        }
        if (I == null)
        {
          I = new ArrayList();
          J = new ArrayList();
        }
        b = true;
        try
        {
          f0(null, null);
          return;
        }
        finally
        {
          b = false;
        }
      }
      throw new IllegalStateException("Must be called from main thread of fragment host");
    }
    throw new IllegalStateException("FragmentManager is already executing transactions");
  }
  
  private int a1(ArrayList paramArrayList1, ArrayList paramArrayList2, int paramInt1, int paramInt2, androidx.collection.b paramB)
  {
    int i1 = paramInt2 - 1;
    int i3;
    for (int i2 = paramInt2; i1 >= paramInt1; i2 = i3)
    {
      a localA = (a)paramArrayList1.get(i1);
      boolean bool = ((Boolean)paramArrayList2.get(i1)).booleanValue();
      int i4;
      if ((localA.A()) && (!localA.y(paramArrayList1, i1 + 1, paramInt2))) {
        i4 = 1;
      } else {
        i4 = 0;
      }
      i3 = i2;
      if (i4 != 0)
      {
        if (L == null) {
          L = new ArrayList();
        }
        p localP = new p(localA, bool);
        L.add(localP);
        localA.C(localP);
        if (bool) {
          localA.t();
        } else {
          localA.u(false);
        }
        i3 = i2 - 1;
        if (i1 != i3)
        {
          paramArrayList1.remove(i1);
          paramArrayList1.add(i3, localA);
        }
        d(paramB);
      }
      i1 -= 1;
    }
    return i2;
  }
  
  private static void c0(ArrayList paramArrayList1, ArrayList paramArrayList2, int paramInt1, int paramInt2)
  {
    while (paramInt1 < paramInt2)
    {
      a localA = (a)paramArrayList1.get(paramInt1);
      boolean bool2 = ((Boolean)paramArrayList2.get(paramInt1)).booleanValue();
      boolean bool1 = true;
      if (bool2)
      {
        localA.p(-1);
        if (paramInt1 != paramInt2 - 1) {
          bool1 = false;
        }
        localA.u(bool1);
      }
      else
      {
        localA.p(1);
        localA.t();
      }
      paramInt1 += 1;
    }
  }
  
  private void d(androidx.collection.b paramB)
  {
    int i1 = q;
    if (i1 < 1) {
      return;
    }
    i1 = Math.min(i1, 5);
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if (mState < i1)
      {
        S0(localFragment, i1);
        if ((mView != null) && (!mHidden) && (mIsNewlyAdded)) {
          paramB.add(localFragment);
        }
      }
    }
  }
  
  private void d0(ArrayList paramArrayList1, ArrayList paramArrayList2, int paramInt1, int paramInt2)
  {
    boolean bool = getr;
    Object localObject1 = K;
    if (localObject1 == null) {
      K = new ArrayList();
    } else {
      ((ArrayList)localObject1).clear();
    }
    K.addAll(c.n());
    localObject1 = x0();
    int i2 = paramInt1;
    int i1 = 0;
    Object localObject2;
    while (i2 < paramInt2)
    {
      localObject2 = (a)paramArrayList1.get(i2);
      if (!((Boolean)paramArrayList2.get(i2)).booleanValue()) {
        localObject1 = ((a)localObject2).v(K, (Fragment)localObject1);
      } else {
        localObject1 = ((a)localObject2).D(K, (Fragment)localObject1);
      }
      if ((i1 == 0) && (!i)) {
        i1 = 0;
      } else {
        i1 = 1;
      }
      i2 += 1;
    }
    K.clear();
    if ((!bool) && (q >= 1))
    {
      if (P)
      {
        i2 = paramInt1;
        while (i2 < paramInt2)
        {
          localObject1 = getc.iterator();
          while (((Iterator)localObject1).hasNext())
          {
            localObject2 = nextb;
            if ((localObject2 != null) && (mFragmentManager != null))
            {
              localObject2 = v((Fragment)localObject2);
              c.p((s)localObject2);
            }
          }
          i2 += 1;
        }
      }
      v.B(r.f(), s, paramArrayList1, paramArrayList2, paramInt1, paramInt2, false, n);
    }
    c0(paramArrayList1, paramArrayList2, paramInt1, paramInt2);
    if (P)
    {
      bool = ((Boolean)paramArrayList2.get(paramInt2 - 1)).booleanValue();
      i2 = paramInt1;
      while (i2 < paramInt2)
      {
        localObject1 = (a)paramArrayList1.get(i2);
        if (bool)
        {
          int i3 = c.size() - 1;
          while (i3 >= 0)
          {
            localObject2 = c.get(i3)).b;
            if (localObject2 != null) {
              v((Fragment)localObject2).m();
            }
            i3 -= 1;
          }
        }
        localObject1 = c.iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject2 = nextb;
          if (localObject2 != null) {
            v((Fragment)localObject2).m();
          }
        }
        i2 += 1;
      }
      Q0(q, true);
      localObject1 = s(paramArrayList1, paramInt1, paramInt2).iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (a0)((Iterator)localObject1).next();
        ((a0)localObject2).r(bool);
        ((a0)localObject2).p();
        ((a0)localObject2).g();
      }
    }
    else
    {
      if (bool)
      {
        localObject1 = new androidx.collection.b();
        d((androidx.collection.b)localObject1);
        i2 = a1(paramArrayList1, paramArrayList2, paramInt1, paramInt2, (androidx.collection.b)localObject1);
        O0((androidx.collection.b)localObject1);
      }
      else
      {
        i2 = paramInt2;
      }
      localObject1 = paramArrayList2;
      if ((i2 != paramInt1) && (bool))
      {
        if (q >= 1) {
          v.B(r.f(), s, paramArrayList1, paramArrayList2, paramInt1, i2, true, n);
        }
        paramArrayList2 = (ArrayList)localObject1;
        Q0(q, true);
      }
      else
      {
        paramArrayList2 = (ArrayList)localObject1;
      }
    }
    while (paramInt1 < paramInt2)
    {
      localObject1 = (a)paramArrayList1.get(paramInt1);
      if ((((Boolean)paramArrayList2.get(paramInt1)).booleanValue()) && (v >= 0)) {
        v = -1;
      }
      ((a)localObject1).B();
      paramInt1 += 1;
    }
    if (i1 != 0) {
      g1();
    }
  }
  
  private void e1(ArrayList paramArrayList1, ArrayList paramArrayList2)
  {
    if (paramArrayList1.isEmpty()) {
      return;
    }
    if (paramArrayList1.size() == paramArrayList2.size())
    {
      f0(paramArrayList1, paramArrayList2);
      int i5 = paramArrayList1.size();
      int i1 = 0;
      int i2;
      for (int i3 = 0; i1 < i5; i3 = i2)
      {
        int i4 = i1;
        i2 = i3;
        if (!getr)
        {
          if (i3 != i1) {
            d0(paramArrayList1, paramArrayList2, i3, i1);
          }
          i3 = i1 + 1;
          i2 = i3;
          if (((Boolean)paramArrayList2.get(i1)).booleanValue()) {
            for (;;)
            {
              i2 = i3;
              if (i3 >= i5) {
                break;
              }
              i2 = i3;
              if (!((Boolean)paramArrayList2.get(i3)).booleanValue()) {
                break;
              }
              i2 = i3;
              if (getr) {
                break;
              }
              i3 += 1;
            }
          }
          d0(paramArrayList1, paramArrayList2, i1, i2);
          i4 = i2 - 1;
        }
        i1 = i4 + 1;
      }
      if (i3 != i5) {
        d0(paramArrayList1, paramArrayList2, i3, i5);
      }
      return;
    }
    throw new IllegalStateException("Internal error with the back stack records");
  }
  
  private void f0(ArrayList paramArrayList1, ArrayList paramArrayList2)
  {
    Object localObject = L;
    int i2;
    if (localObject == null) {
      i2 = 0;
    } else {
      i2 = ((ArrayList)localObject).size();
    }
    int i1 = 0;
    for (int i4 = i2; i1 < i4; i4 = i2)
    {
      localObject = (p)L.get(i1);
      int i3;
      if ((paramArrayList1 != null) && (!a))
      {
        i2 = paramArrayList1.indexOf(b);
        if ((i2 != -1) && (paramArrayList2 != null) && (((Boolean)paramArrayList2.get(i2)).booleanValue()))
        {
          L.remove(i1);
          i3 = i1 - 1;
          i2 = i4 - 1;
        }
      }
      do
      {
        ((p)localObject).c();
        break label241;
        if (!((p)localObject).e())
        {
          i2 = i4;
          i3 = i1;
          if (paramArrayList1 == null) {
            break label241;
          }
          i2 = i4;
          i3 = i1;
          if (!b.y(paramArrayList1, 0, paramArrayList1.size())) {
            break label241;
          }
        }
        L.remove(i1);
        i3 = i1 - 1;
        i2 = i4 - 1;
        if ((paramArrayList1 == null) || (a)) {
          break;
        }
        i1 = paramArrayList1.indexOf(b);
      } while ((i1 != -1) && (paramArrayList2 != null) && (((Boolean)paramArrayList2.get(i1)).booleanValue()));
      ((p)localObject).d();
      label241:
      i1 = i3 + 1;
    }
  }
  
  private void g1()
  {
    ArrayList localArrayList = l;
    if (localArrayList != null)
    {
      if (localArrayList.size() <= 0) {
        return;
      }
      android.support.v4.media.session.b.a(l.get(0));
      throw null;
    }
  }
  
  static int i1(int paramInt)
  {
    int i1 = 8194;
    if (paramInt != 4097)
    {
      if (paramInt != 4099)
      {
        if (paramInt != 8194) {
          return 0;
        }
        return 4097;
      }
      i1 = 4099;
    }
    return i1;
  }
  
  private void k0()
  {
    if (P)
    {
      Iterator localIterator = r().iterator();
      while (localIterator.hasNext()) {
        ((a0)localIterator.next()).k();
      }
    }
    if (L != null) {
      while (!L.isEmpty()) {
        ((p)L.remove(0)).d();
      }
    }
  }
  
  private boolean l0(ArrayList paramArrayList1, ArrayList paramArrayList2)
  {
    synchronized (a)
    {
      boolean bool = a.isEmpty();
      int i1 = 0;
      if (bool) {
        return false;
      }
      int i2 = a.size();
      bool = false;
      while (i1 < i2)
      {
        bool |= ((n)a.get(i1)).a(paramArrayList1, paramArrayList2);
        i1 += 1;
      }
      a.clear();
      r.g().removeCallbacks(N);
      return bool;
    }
  }
  
  private void n(Fragment paramFragment)
  {
    HashSet localHashSet = (HashSet)m.get(paramFragment);
    if (localHashSet != null)
    {
      Iterator localIterator = localHashSet.iterator();
      while (localIterator.hasNext()) {
        ((androidx.core.os.e)localIterator.next()).a();
      }
      localHashSet.clear();
      w(paramFragment);
      m.remove(paramFragment);
    }
  }
  
  private p n0(Fragment paramFragment)
  {
    return M.i(paramFragment);
  }
  
  private void o1(Fragment paramFragment)
  {
    ViewGroup localViewGroup = p0(paramFragment);
    if ((localViewGroup != null) && (paramFragment.getEnterAnim() + paramFragment.getExitAnim() + paramFragment.getPopEnterAnim() + paramFragment.getPopExitAnim() > 0))
    {
      int i1 = j0.b.c;
      if (localViewGroup.getTag(i1) == null) {
        localViewGroup.setTag(i1, paramFragment);
      }
      ((Fragment)localViewGroup.getTag(i1)).setPopDirection(paramFragment.getPopDirection());
    }
  }
  
  private void p()
  {
    if (!K0()) {
      return;
    }
    throw new IllegalStateException("Can not perform this action after onSaveInstanceState");
  }
  
  private ViewGroup p0(Fragment paramFragment)
  {
    ViewGroup localViewGroup = mContainer;
    if (localViewGroup != null) {
      return localViewGroup;
    }
    if (mContainerId <= 0) {
      return null;
    }
    if (s.d())
    {
      paramFragment = s.c(mContainerId);
      if ((paramFragment instanceof ViewGroup)) {
        return (ViewGroup)paramFragment;
      }
    }
    return null;
  }
  
  private void q()
  {
    b = false;
    J.clear();
    I.clear();
  }
  
  private void q1()
  {
    Iterator localIterator = c.k().iterator();
    while (localIterator.hasNext()) {
      V0((s)localIterator.next());
    }
  }
  
  private Set r()
  {
    HashSet localHashSet = new HashSet();
    Iterator localIterator = c.k().iterator();
    while (localIterator.hasNext())
    {
      ViewGroup localViewGroup = nextkmContainer;
      if (localViewGroup != null) {
        localHashSet.add(a0.o(localViewGroup, y0()));
      }
    }
    return localHashSet;
  }
  
  private Set s(ArrayList paramArrayList, int paramInt1, int paramInt2)
  {
    HashSet localHashSet = new HashSet();
    while (paramInt1 < paramInt2)
    {
      Iterator localIterator = getc.iterator();
      while (localIterator.hasNext())
      {
        Object localObject = nextb;
        if (localObject != null)
        {
          localObject = mContainer;
          if (localObject != null) {
            localHashSet.add(a0.n((ViewGroup)localObject, this));
          }
        }
      }
      paramInt1 += 1;
    }
    return localHashSet;
  }
  
  private void s1()
  {
    synchronized (a)
    {
      boolean bool2 = a.isEmpty();
      boolean bool1 = true;
      if (!bool2)
      {
        h.j(true);
        return;
      }
      ??? = h;
      if ((m0() <= 0) || (!I0(t))) {
        bool1 = false;
      }
      ((androidx.activity.o)???).j(bool1);
      return;
    }
  }
  
  private void u(final Fragment paramFragment)
  {
    if (mView != null)
    {
      f.d localD = f.c(r.f(), paramFragment, mHidden ^ true, paramFragment.getPopDirection());
      if (localD != null)
      {
        Object localObject = b;
        if (localObject != null)
        {
          ((Animator)localObject).setTarget(mView);
          if (mHidden)
          {
            if (paramFragment.isHideReplaced())
            {
              paramFragment.setHideReplaced(false);
            }
            else
            {
              localObject = mContainer;
              final View localView = mView;
              ((ViewGroup)localObject).startViewTransition(localView);
              b.addListener(new h((ViewGroup)localObject, localView, paramFragment));
            }
          }
          else {
            mView.setVisibility(0);
          }
          b.start();
          break label199;
        }
      }
      if (localD != null)
      {
        mView.startAnimation(a);
        a.start();
      }
      int i1;
      if ((mHidden) && (!paramFragment.isHideReplaced())) {
        i1 = 8;
      } else {
        i1 = 0;
      }
      mView.setVisibility(i1);
      if (paramFragment.isHideReplaced()) {
        paramFragment.setHideReplaced(false);
      }
    }
    label199:
    D0(paramFragment);
    mHiddenChanged = false;
    paramFragment.onHiddenChanged(mHidden);
  }
  
  private void w(Fragment paramFragment)
  {
    paramFragment.performDestroyView();
    o.n(paramFragment, false);
    mContainer = null;
    mView = null;
    mViewLifecycleOwner = null;
    mViewLifecycleOwnerLiveData.n(null);
    mInLayout = false;
  }
  
  static Fragment z0(View paramView)
  {
    paramView = paramView.getTag(j0.b.a);
    if ((paramView instanceof Fragment)) {
      return (Fragment)paramView;
    }
    return null;
  }
  
  void A(Configuration paramConfiguration)
  {
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if (localFragment != null) {
        localFragment.performConfigurationChanged(paramConfiguration);
      }
    }
  }
  
  l0 A0(Fragment paramFragment)
  {
    return M.l(paramFragment);
  }
  
  boolean B(MenuItem paramMenuItem)
  {
    if (q < 1) {
      return false;
    }
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if ((localFragment != null) && (localFragment.performContextItemSelected(paramMenuItem))) {
        return true;
      }
    }
    return false;
  }
  
  void B0()
  {
    a0(true);
    if (h.g())
    {
      X0();
      return;
    }
    g.k();
  }
  
  void C()
  {
    E = false;
    F = false;
    M.o(false);
    S(1);
  }
  
  void C0(Fragment paramFragment)
  {
    if (F0(2))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("hide: ");
      localStringBuilder.append(paramFragment);
      Log.v("FragmentManager", localStringBuilder.toString());
    }
    if (!mHidden)
    {
      mHidden = true;
      mHiddenChanged = (true ^ mHiddenChanged);
      o1(paramFragment);
    }
  }
  
  boolean D(Menu paramMenu, MenuInflater paramMenuInflater)
  {
    int i2 = q;
    int i1 = 0;
    if (i2 < 1) {
      return false;
    }
    Iterator localIterator = c.n().iterator();
    Object localObject1 = null;
    boolean bool = false;
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if ((localFragment != null) && (H0(localFragment)) && (localFragment.performCreateOptionsMenu(paramMenu, paramMenuInflater)))
      {
        Object localObject2 = localObject1;
        if (localObject1 == null) {
          localObject2 = new ArrayList();
        }
        ((ArrayList)localObject2).add(localFragment);
        bool = true;
        localObject1 = localObject2;
      }
    }
    if (e != null) {
      while (i1 < e.size())
      {
        paramMenu = (Fragment)e.get(i1);
        if ((localObject1 == null) || (!localObject1.contains(paramMenu))) {
          paramMenu.onDestroyOptionsMenu();
        }
        i1 += 1;
      }
    }
    e = localObject1;
    return bool;
  }
  
  void D0(Fragment paramFragment)
  {
    if ((mAdded) && (G0(paramFragment))) {
      D = true;
    }
  }
  
  void E()
  {
    G = true;
    a0(true);
    X();
    S(-1);
    r = null;
    s = null;
    t = null;
    if (g != null)
    {
      h.h();
      g = null;
    }
    androidx.activity.result.c localC = z;
    if (localC != null)
    {
      localC.d();
      A.d();
      B.d();
    }
  }
  
  public boolean E0()
  {
    return G;
  }
  
  void F()
  {
    S(1);
  }
  
  void G()
  {
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if (localFragment != null) {
        localFragment.performLowMemory();
      }
    }
  }
  
  void H(boolean paramBoolean)
  {
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if (localFragment != null) {
        localFragment.performMultiWindowModeChanged(paramBoolean);
      }
    }
  }
  
  boolean H0(Fragment paramFragment)
  {
    if (paramFragment == null) {
      return true;
    }
    return paramFragment.isMenuVisible();
  }
  
  void I(Fragment paramFragment)
  {
    Iterator localIterator = p.iterator();
    while (localIterator.hasNext()) {
      ((q)localIterator.next()).a(this, paramFragment);
    }
  }
  
  boolean I0(Fragment paramFragment)
  {
    if (paramFragment == null) {
      return true;
    }
    m localM = mFragmentManager;
    return (paramFragment.equals(localM.x0())) && (I0(t));
  }
  
  boolean J(MenuItem paramMenuItem)
  {
    if (q < 1) {
      return false;
    }
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if ((localFragment != null) && (localFragment.performOptionsItemSelected(paramMenuItem))) {
        return true;
      }
    }
    return false;
  }
  
  boolean J0(int paramInt)
  {
    return q >= paramInt;
  }
  
  void K(Menu paramMenu)
  {
    if (q < 1) {
      return;
    }
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if (localFragment != null) {
        localFragment.performOptionsMenuClosed(paramMenu);
      }
    }
  }
  
  public boolean K0()
  {
    return (E) || (F);
  }
  
  void L0(Fragment paramFragment, String[] paramArrayOfString, int paramInt)
  {
    if (B != null)
    {
      paramFragment = new m(mWho, paramInt);
      C.addLast(paramFragment);
      B.b(paramArrayOfString);
      return;
    }
    r.j(paramFragment, paramArrayOfString, paramInt);
  }
  
  void M()
  {
    S(5);
  }
  
  void M0(Fragment paramFragment, Intent paramIntent, int paramInt, Bundle paramBundle)
  {
    if (z != null)
    {
      paramFragment = new m(mWho, paramInt);
      C.addLast(paramFragment);
      if ((paramIntent != null) && (paramBundle != null)) {
        paramIntent.putExtra("androidx.activity.result.contract.extra.ACTIVITY_OPTIONS_BUNDLE", paramBundle);
      }
      z.b(paramIntent);
      return;
    }
    r.m(paramFragment, paramIntent, paramInt, paramBundle);
  }
  
  void N(boolean paramBoolean)
  {
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if (localFragment != null) {
        localFragment.performPictureInPictureModeChanged(paramBoolean);
      }
    }
  }
  
  void N0(Fragment paramFragment, IntentSender paramIntentSender, int paramInt1, Intent paramIntent, int paramInt2, int paramInt3, int paramInt4, Bundle paramBundle)
  {
    if (A != null)
    {
      if (paramBundle != null)
      {
        if (paramIntent == null)
        {
          paramIntent = new Intent();
          paramIntent.putExtra("androidx.fragment.extra.ACTIVITY_OPTIONS_BUNDLE", true);
        }
        if (F0(2))
        {
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("ActivityOptions ");
          localStringBuilder.append(paramBundle);
          localStringBuilder.append(" were added to fillInIntent ");
          localStringBuilder.append(paramIntent);
          localStringBuilder.append(" for fragment ");
          localStringBuilder.append(paramFragment);
          Log.v("FragmentManager", localStringBuilder.toString());
        }
        paramIntent.putExtra("androidx.activity.result.contract.extra.ACTIVITY_OPTIONS_BUNDLE", paramBundle);
      }
      paramIntentSender = new e.a(paramIntentSender).b(paramIntent).c(paramInt3, paramInt2).a();
      paramIntent = new m(mWho, paramInt1);
      C.addLast(paramIntent);
      if (F0(2))
      {
        paramIntent = new StringBuilder();
        paramIntent.append("Fragment ");
        paramIntent.append(paramFragment);
        paramIntent.append("is launching an IntentSender for result ");
        Log.v("FragmentManager", paramIntent.toString());
      }
      A.b(paramIntentSender);
      return;
    }
    r.n(paramFragment, paramIntentSender, paramInt1, paramIntent, paramInt2, paramInt3, paramInt4, paramBundle);
  }
  
  boolean O(Menu paramMenu)
  {
    int i1 = q;
    boolean bool = false;
    if (i1 < 1) {
      return false;
    }
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if ((localFragment != null) && (H0(localFragment)) && (localFragment.performPrepareOptionsMenu(paramMenu))) {
        bool = true;
      }
    }
    return bool;
  }
  
  void P()
  {
    s1();
    L(u);
  }
  
  void P0(Fragment paramFragment)
  {
    if (!c.c(mWho))
    {
      if (F0(3))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Ignoring moving ");
        ((StringBuilder)localObject).append(paramFragment);
        ((StringBuilder)localObject).append(" to state ");
        ((StringBuilder)localObject).append(q);
        ((StringBuilder)localObject).append("since it is not added to ");
        ((StringBuilder)localObject).append(this);
        Log.d("FragmentManager", ((StringBuilder)localObject).toString());
      }
      return;
    }
    R0(paramFragment);
    Object localObject = mView;
    if ((localObject != null) && (mIsNewlyAdded) && (mContainer != null))
    {
      float f1 = mPostponedAlpha;
      if (f1 > 0.0F) {
        ((View)localObject).setAlpha(f1);
      }
      mPostponedAlpha = 0.0F;
      mIsNewlyAdded = false;
      localObject = f.c(r.f(), paramFragment, true, paramFragment.getPopDirection());
      if (localObject != null)
      {
        Animation localAnimation = a;
        if (localAnimation != null)
        {
          mView.startAnimation(localAnimation);
        }
        else
        {
          b.setTarget(mView);
          b.start();
        }
      }
    }
    if (mHiddenChanged) {
      u(paramFragment);
    }
  }
  
  void Q()
  {
    E = false;
    F = false;
    M.o(false);
    S(7);
  }
  
  void Q0(int paramInt, boolean paramBoolean)
  {
    if ((r == null) && (paramInt != -1)) {
      throw new IllegalStateException("No activity");
    }
    if ((!paramBoolean) && (paramInt == q)) {
      return;
    }
    q = paramInt;
    Object localObject;
    if (P)
    {
      c.r();
    }
    else
    {
      localObject = c.n().iterator();
      while (((Iterator)localObject).hasNext()) {
        P0((Fragment)((Iterator)localObject).next());
      }
      localObject = c.k().iterator();
      while (((Iterator)localObject).hasNext())
      {
        s localS = (s)((Iterator)localObject).next();
        Fragment localFragment = localS.k();
        if (!mIsNewlyAdded) {
          P0(localFragment);
        }
        if ((mRemoving) && (!localFragment.isInBackStack())) {
          paramInt = 1;
        } else {
          paramInt = 0;
        }
        if (paramInt != 0) {
          c.q(localS);
        }
      }
    }
    q1();
    if (D)
    {
      localObject = r;
      if ((localObject != null) && (q == 7))
      {
        ((j)localObject).o();
        D = false;
      }
    }
  }
  
  void R()
  {
    E = false;
    F = false;
    M.o(false);
    S(5);
  }
  
  void R0(Fragment paramFragment)
  {
    S0(paramFragment, q);
  }
  
  void S0(Fragment paramFragment, int paramInt)
  {
    Object localObject2 = c.m(mWho);
    int i2 = 1;
    Object localObject1 = localObject2;
    if (localObject2 == null)
    {
      localObject1 = new s(o, c, paramFragment);
      ((s)localObject1).t(1);
    }
    int i1 = paramInt;
    if (mFromLayout)
    {
      i1 = paramInt;
      if (mInLayout)
      {
        i1 = paramInt;
        if (mState == 2) {
          i1 = Math.max(paramInt, 2);
        }
      }
    }
    paramInt = Math.min(i1, ((s)localObject1).d());
    int i3 = mState;
    if (i3 <= paramInt)
    {
      if ((i3 < paramInt) && (!m.isEmpty())) {
        n(paramFragment);
      }
      i1 = mState;
      if (i1 != -1)
      {
        if (i1 != 0)
        {
          if (i1 == 1) {
            break label186;
          }
          if (i1 == 2) {
            break label206;
          }
          if (i1 == 4) {
            break label216;
          }
          if (i1 == 5) {
            break label226;
          }
          i1 = paramInt;
          break label681;
        }
      }
      else if (paramInt > -1) {
        ((s)localObject1).c();
      }
      if (paramInt > 0) {
        ((s)localObject1).e();
      }
      label186:
      if (paramInt > -1) {
        ((s)localObject1).j();
      }
      if (paramInt > 1) {
        ((s)localObject1).f();
      }
      label206:
      if (paramInt > 2) {
        ((s)localObject1).a();
      }
      label216:
      if (paramInt > 4) {
        ((s)localObject1).u();
      }
      label226:
      i1 = paramInt;
      if (paramInt > 5)
      {
        ((s)localObject1).p();
        i1 = paramInt;
      }
    }
    else
    {
      i1 = paramInt;
      if (i3 > paramInt)
      {
        if (i3 != 0)
        {
          if (i3 != 1)
          {
            if (i3 != 2)
            {
              if (i3 != 4)
              {
                if (i3 != 5)
                {
                  if (i3 != 7)
                  {
                    i1 = paramInt;
                    break label681;
                  }
                  if (paramInt < 7) {
                    ((s)localObject1).n();
                  }
                }
                if (paramInt < 5) {
                  ((s)localObject1).v();
                }
              }
              if (paramInt < 4)
              {
                if (F0(3))
                {
                  localObject2 = new StringBuilder();
                  ((StringBuilder)localObject2).append("movefrom ACTIVITY_CREATED: ");
                  ((StringBuilder)localObject2).append(paramFragment);
                  Log.d("FragmentManager", ((StringBuilder)localObject2).toString());
                }
                if ((mView != null) && (r.k(paramFragment)) && (mSavedViewState == null)) {
                  ((s)localObject1).s();
                }
              }
            }
            if (paramInt < 2)
            {
              localObject2 = mView;
              if (localObject2 != null)
              {
                ViewGroup localViewGroup = mContainer;
                if (localViewGroup != null)
                {
                  localViewGroup.endViewTransition((View)localObject2);
                  mView.clearAnimation();
                  if (!paramFragment.isRemovingParent())
                  {
                    if ((q > -1) && (!G) && (mView.getVisibility() == 0) && (mPostponedAlpha >= 0.0F)) {
                      localObject2 = f.c(r.f(), paramFragment, false, paramFragment.getPopDirection());
                    } else {
                      localObject2 = null;
                    }
                    mPostponedAlpha = 0.0F;
                    localViewGroup = mContainer;
                    View localView = mView;
                    if (localObject2 != null) {
                      f.a(paramFragment, (f.d)localObject2, n);
                    }
                    localViewGroup.removeView(localView);
                    if (F0(2))
                    {
                      localObject2 = new StringBuilder();
                      ((StringBuilder)localObject2).append("Removing view ");
                      ((StringBuilder)localObject2).append(localView);
                      ((StringBuilder)localObject2).append(" for fragment ");
                      ((StringBuilder)localObject2).append(paramFragment);
                      ((StringBuilder)localObject2).append(" from container ");
                      ((StringBuilder)localObject2).append(localViewGroup);
                      Log.v("FragmentManager", ((StringBuilder)localObject2).toString());
                    }
                    if (localViewGroup != mContainer) {
                      return;
                    }
                  }
                }
              }
              if (m.get(paramFragment) == null) {
                ((s)localObject1).h();
              }
            }
          }
          if (paramInt < 1) {
            if (m.get(paramFragment) != null) {
              paramInt = i2;
            } else {
              ((s)localObject1).g();
            }
          }
        }
        if (paramInt < 0) {
          ((s)localObject1).i();
        }
        i1 = paramInt;
      }
    }
    label681:
    if (mState != i1)
    {
      if (F0(3))
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("moveToState: Fragment state for ");
        ((StringBuilder)localObject1).append(paramFragment);
        ((StringBuilder)localObject1).append(" not updated inline; expected state ");
        ((StringBuilder)localObject1).append(i1);
        ((StringBuilder)localObject1).append(" found ");
        ((StringBuilder)localObject1).append(mState);
        Log.d("FragmentManager", ((StringBuilder)localObject1).toString());
      }
      mState = i1;
    }
  }
  
  void T()
  {
    F = true;
    M.o(true);
    S(4);
  }
  
  void T0()
  {
    if (r == null) {
      return;
    }
    E = false;
    F = false;
    M.o(false);
    Iterator localIterator = c.n().iterator();
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      if (localFragment != null) {
        localFragment.noteStateNotSaved();
      }
    }
  }
  
  void U()
  {
    S(2);
  }
  
  void U0(FragmentContainerView paramFragmentContainerView)
  {
    Iterator localIterator = c.k().iterator();
    while (localIterator.hasNext())
    {
      s localS = (s)localIterator.next();
      Fragment localFragment = localS.k();
      if (mContainerId == paramFragmentContainerView.getId())
      {
        View localView = mView;
        if ((localView != null) && (localView.getParent() == null))
        {
          mContainer = paramFragmentContainerView;
          localS.b();
        }
      }
    }
  }
  
  void V0(s paramS)
  {
    Fragment localFragment = paramS.k();
    if (mDeferStart)
    {
      if (b)
      {
        H = true;
        return;
      }
      mDeferStart = false;
      if (P)
      {
        paramS.m();
        return;
      }
      R0(localFragment);
    }
  }
  
  public void W(String paramString, FileDescriptor arg2, PrintWriter paramPrintWriter, String[] paramArrayOfString)
  {
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(paramString);
    ((StringBuilder)localObject).append("    ");
    localObject = ((StringBuilder)localObject).toString();
    c.e(paramString, ???, paramPrintWriter, paramArrayOfString);
    ??? = e;
    int i2 = 0;
    int i3;
    int i1;
    if (??? != null)
    {
      i3 = ???.size();
      if (i3 > 0)
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.println("Fragments Created Menus:");
        i1 = 0;
        while (i1 < i3)
        {
          ??? = (Fragment)e.get(i1);
          paramPrintWriter.print(paramString);
          paramPrintWriter.print("  #");
          paramPrintWriter.print(i1);
          paramPrintWriter.print(": ");
          paramPrintWriter.println(???.toString());
          i1 += 1;
        }
      }
    }
    ??? = d;
    if (??? != null)
    {
      i3 = ???.size();
      if (i3 > 0)
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.println("Back Stack:");
        i1 = 0;
        while (i1 < i3)
        {
          ??? = (a)d.get(i1);
          paramPrintWriter.print(paramString);
          paramPrintWriter.print("  #");
          paramPrintWriter.print(i1);
          paramPrintWriter.print(": ");
          paramPrintWriter.println(???.toString());
          ???.r((String)localObject, paramPrintWriter);
          i1 += 1;
        }
      }
    }
    paramPrintWriter.print(paramString);
    ??? = new StringBuilder();
    ???.append("Back Stack Index: ");
    ???.append(i.get());
    paramPrintWriter.println(???.toString());
    synchronized (a)
    {
      i3 = a.size();
      if (i3 > 0)
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.println("Pending Actions:");
        i1 = i2;
        while (i1 < i3)
        {
          paramArrayOfString = (n)a.get(i1);
          paramPrintWriter.print(paramString);
          paramPrintWriter.print("  #");
          paramPrintWriter.print(i1);
          paramPrintWriter.print(": ");
          paramPrintWriter.println(paramArrayOfString);
          i1 += 1;
        }
      }
      paramPrintWriter.print(paramString);
      paramPrintWriter.println("FragmentManager misc state:");
      paramPrintWriter.print(paramString);
      paramPrintWriter.print("  mHost=");
      paramPrintWriter.println(r);
      paramPrintWriter.print(paramString);
      paramPrintWriter.print("  mContainer=");
      paramPrintWriter.println(s);
      if (t != null)
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("  mParent=");
        paramPrintWriter.println(t);
      }
      paramPrintWriter.print(paramString);
      paramPrintWriter.print("  mCurState=");
      paramPrintWriter.print(q);
      paramPrintWriter.print(" mStateSaved=");
      paramPrintWriter.print(E);
      paramPrintWriter.print(" mStopped=");
      paramPrintWriter.print(F);
      paramPrintWriter.print(" mDestroyed=");
      paramPrintWriter.println(G);
      if (D)
      {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("  mNeedMenuInvalidate=");
        paramPrintWriter.println(D);
      }
      return;
    }
  }
  
  public void W0(int paramInt1, int paramInt2)
  {
    if (paramInt1 >= 0)
    {
      Y(new o(null, paramInt1, paramInt2), false);
      return;
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Bad id: ");
    localStringBuilder.append(paramInt1);
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  public boolean X0()
  {
    return Y0(null, -1, 0);
  }
  
  void Y(n paramN, boolean paramBoolean)
  {
    if (!paramBoolean)
    {
      if (r == null)
      {
        if (G) {
          throw new IllegalStateException("FragmentManager has been destroyed");
        }
        throw new IllegalStateException("FragmentManager has not been attached to a host.");
      }
      p();
    }
    synchronized (a)
    {
      if (r == null)
      {
        if (paramBoolean) {
          return;
        }
        throw new IllegalStateException("Activity has been destroyed");
      }
      a.add(paramN);
      k1();
      return;
    }
  }
  
  boolean Z0(ArrayList paramArrayList1, ArrayList paramArrayList2, String paramString, int paramInt1, int paramInt2)
  {
    Object localObject = d;
    if (localObject == null) {
      return false;
    }
    if ((paramString == null) && (paramInt1 < 0) && ((paramInt2 & 0x1) == 0))
    {
      paramInt1 = ((ArrayList)localObject).size() - 1;
      if (paramInt1 < 0) {
        return false;
      }
      paramArrayList1.add(d.remove(paramInt1));
      paramArrayList2.add(Boolean.TRUE);
      return true;
    }
    if ((paramString == null) && (paramInt1 < 0))
    {
      paramInt1 = -1;
    }
    else
    {
      int i1 = ((ArrayList)localObject).size() - 1;
      while (i1 >= 0)
      {
        localObject = (a)d.get(i1);
        if (((paramString != null) && (paramString.equals(((a)localObject).w()))) || ((paramInt1 >= 0) && (paramInt1 == v))) {
          break;
        }
        i1 -= 1;
      }
      if (i1 < 0) {
        return false;
      }
      int i2 = i1;
      if ((paramInt2 & 0x1) != 0) {
        for (;;)
        {
          paramInt2 = i1 - 1;
          i2 = paramInt2;
          if (paramInt2 < 0) {
            break;
          }
          localObject = (a)d.get(paramInt2);
          if (paramString != null)
          {
            i1 = paramInt2;
            if (paramString.equals(((a)localObject).w())) {}
          }
          else
          {
            i2 = paramInt2;
            if (paramInt1 < 0) {
              break;
            }
            i2 = paramInt2;
            if (paramInt1 != v) {
              break;
            }
            i1 = paramInt2;
          }
        }
      }
      paramInt1 = i2;
    }
    if (paramInt1 == d.size() - 1) {
      return false;
    }
    paramInt2 = d.size() - 1;
    while (paramInt2 > paramInt1)
    {
      paramArrayList1.add(d.remove(paramInt2));
      paramArrayList2.add(Boolean.TRUE);
      paramInt2 -= 1;
    }
    return true;
  }
  
  boolean a0(boolean paramBoolean)
  {
    Z(paramBoolean);
    paramBoolean = false;
    for (;;)
    {
      if (l0(I, J))
      {
        paramBoolean = true;
        b = true;
      }
      try
      {
        e1(I, J);
        q();
      }
      finally
      {
        q();
      }
    }
    V();
    c.b();
    return paramBoolean;
  }
  
  void b0(n paramN, boolean paramBoolean)
  {
    if ((paramBoolean) && ((r == null) || (G))) {
      return;
    }
    Z(paramBoolean);
    if (paramN.a(I, J)) {
      b = true;
    }
    try
    {
      e1(I, J);
      q();
    }
    finally
    {
      q();
    }
    V();
    c.b();
  }
  
  public void b1(l paramL, boolean paramBoolean)
  {
    o.o(paramL, paramBoolean);
  }
  
  void c1(Fragment paramFragment, androidx.core.os.e paramE)
  {
    HashSet localHashSet = (HashSet)m.get(paramFragment);
    if ((localHashSet != null) && (localHashSet.remove(paramE)) && (localHashSet.isEmpty()))
    {
      m.remove(paramFragment);
      if (mState < 5)
      {
        w(paramFragment);
        R0(paramFragment);
      }
    }
  }
  
  void d1(Fragment paramFragment)
  {
    if (F0(2))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("remove: ");
      localStringBuilder.append(paramFragment);
      localStringBuilder.append(" nesting=");
      localStringBuilder.append(mBackStackNesting);
      Log.v("FragmentManager", localStringBuilder.toString());
    }
    boolean bool = paramFragment.isInBackStack();
    if ((!mDetached) || ((bool ^ true)))
    {
      c.s(paramFragment);
      if (G0(paramFragment)) {
        D = true;
      }
      mRemoving = true;
      o1(paramFragment);
    }
  }
  
  void e(a paramA)
  {
    if (d == null) {
      d = new ArrayList();
    }
    d.add(paramA);
  }
  
  public boolean e0()
  {
    boolean bool = a0(true);
    k0();
    return bool;
  }
  
  void f(Fragment paramFragment, androidx.core.os.e paramE)
  {
    if (m.get(paramFragment) == null) {
      m.put(paramFragment, new HashSet());
    }
    ((HashSet)m.get(paramFragment)).add(paramE);
  }
  
  void f1(Fragment paramFragment)
  {
    M.n(paramFragment);
  }
  
  s g(Fragment paramFragment)
  {
    if (F0(2))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("add: ");
      ((StringBuilder)localObject).append(paramFragment);
      Log.v("FragmentManager", ((StringBuilder)localObject).toString());
    }
    Object localObject = v(paramFragment);
    mFragmentManager = this;
    c.p((s)localObject);
    if (!mDetached)
    {
      c.a(paramFragment);
      mRemoving = false;
      if (mView == null) {
        mHiddenChanged = false;
      }
      if (G0(paramFragment)) {
        D = true;
      }
    }
    return localObject;
  }
  
  Fragment g0(String paramString)
  {
    return c.f(paramString);
  }
  
  public void h(q paramQ)
  {
    p.add(paramQ);
  }
  
  public Fragment h0(int paramInt)
  {
    return c.g(paramInt);
  }
  
  void h1(Parcelable paramParcelable)
  {
    if (paramParcelable == null) {
      return;
    }
    o localO = (o)paramParcelable;
    if (e == null) {
      return;
    }
    c.t();
    Object localObject1 = e.iterator();
    Object localObject2;
    while (((Iterator)localObject1).hasNext())
    {
      paramParcelable = (r)((Iterator)localObject1).next();
      if (paramParcelable != null)
      {
        localObject2 = M.h(f);
        StringBuilder localStringBuilder;
        if (localObject2 != null)
        {
          if (F0(2))
          {
            localStringBuilder = new StringBuilder();
            localStringBuilder.append("restoreSaveState: re-attaching retained ");
            localStringBuilder.append(localObject2);
            Log.v("FragmentManager", localStringBuilder.toString());
          }
          paramParcelable = new s(o, c, (Fragment)localObject2, paramParcelable);
        }
        else
        {
          paramParcelable = new s(o, c, r.f().getClassLoader(), q0(), paramParcelable);
        }
        localObject2 = paramParcelable.k();
        mFragmentManager = this;
        if (F0(2))
        {
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("restoreSaveState: active (");
          localStringBuilder.append(mWho);
          localStringBuilder.append("): ");
          localStringBuilder.append(localObject2);
          Log.v("FragmentManager", localStringBuilder.toString());
        }
        paramParcelable.o(r.f().getClassLoader());
        c.p(paramParcelable);
        paramParcelable.t(q);
      }
    }
    paramParcelable = M.k().iterator();
    while (paramParcelable.hasNext())
    {
      localObject1 = (Fragment)paramParcelable.next();
      if (!c.c(mWho))
      {
        if (F0(2))
        {
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append("Discarding retained Fragment ");
          ((StringBuilder)localObject2).append(localObject1);
          ((StringBuilder)localObject2).append(" that was not found in the set of active Fragments ");
          ((StringBuilder)localObject2).append(e);
          Log.v("FragmentManager", ((StringBuilder)localObject2).toString());
        }
        M.n((Fragment)localObject1);
        mFragmentManager = this;
        localObject2 = new s(o, c, (Fragment)localObject1);
        ((s)localObject2).t(1);
        ((s)localObject2).m();
        mRemoving = true;
        ((s)localObject2).m();
      }
    }
    c.u(f);
    paramParcelable = g;
    int i2 = 0;
    int i1;
    if (paramParcelable != null)
    {
      d = new ArrayList(g.length);
      i1 = 0;
      for (;;)
      {
        paramParcelable = g;
        if (i1 >= paramParcelable.length) {
          break;
        }
        paramParcelable = paramParcelable[i1].a(this);
        if (F0(2))
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append("restoreAllState: back stack #");
          ((StringBuilder)localObject1).append(i1);
          ((StringBuilder)localObject1).append(" (index ");
          ((StringBuilder)localObject1).append(v);
          ((StringBuilder)localObject1).append("): ");
          ((StringBuilder)localObject1).append(paramParcelable);
          Log.v("FragmentManager", ((StringBuilder)localObject1).toString());
          localObject1 = new PrintWriter(new z("FragmentManager"));
          paramParcelable.s("  ", (PrintWriter)localObject1, false);
          ((PrintWriter)localObject1).close();
        }
        d.add(paramParcelable);
        i1 += 1;
      }
    }
    d = null;
    i.set(h);
    paramParcelable = i;
    if (paramParcelable != null)
    {
      paramParcelable = g0(paramParcelable);
      u = paramParcelable;
      L(paramParcelable);
    }
    paramParcelable = j;
    if (paramParcelable != null)
    {
      i1 = i2;
      while (i1 < paramParcelable.size())
      {
        localObject1 = (Bundle)k.get(i1);
        ((Bundle)localObject1).setClassLoader(r.f().getClassLoader());
        j.put(paramParcelable.get(i1), localObject1);
        i1 += 1;
      }
    }
    C = new ArrayDeque(l);
  }
  
  void i(Fragment paramFragment)
  {
    M.f(paramFragment);
  }
  
  public Fragment i0(String paramString)
  {
    return c.h(paramString);
  }
  
  int j()
  {
    return i.getAndIncrement();
  }
  
  Fragment j0(String paramString)
  {
    return c.i(paramString);
  }
  
  Parcelable j1()
  {
    k0();
    X();
    a0(true);
    E = true;
    M.o(true);
    ArrayList localArrayList1 = c.v();
    boolean bool = localArrayList1.isEmpty();
    Object localObject2 = null;
    if (bool)
    {
      if (F0(2)) {
        Log.v("FragmentManager", "saveAllState: no fragments!");
      }
      return null;
    }
    ArrayList localArrayList2 = c.w();
    ArrayList localArrayList3 = d;
    Object localObject1 = localObject2;
    if (localArrayList3 != null)
    {
      int i2 = localArrayList3.size();
      localObject1 = localObject2;
      if (i2 > 0)
      {
        localObject2 = new b[i2];
        int i1 = 0;
        for (;;)
        {
          localObject1 = localObject2;
          if (i1 >= i2) {
            break;
          }
          localObject2[i1] = new b((a)d.get(i1));
          if (F0(2))
          {
            localObject1 = new StringBuilder();
            ((StringBuilder)localObject1).append("saveAllState: adding back stack #");
            ((StringBuilder)localObject1).append(i1);
            ((StringBuilder)localObject1).append(": ");
            ((StringBuilder)localObject1).append(d.get(i1));
            Log.v("FragmentManager", ((StringBuilder)localObject1).toString());
          }
          i1 += 1;
        }
      }
    }
    localObject2 = new o();
    e = localArrayList1;
    f = localArrayList2;
    g = ((b[])localObject1);
    h = i.get();
    localObject1 = u;
    if (localObject1 != null) {
      i = mWho;
    }
    j.addAll(j.keySet());
    k.addAll(j.values());
    l = new ArrayList(C);
    return localObject2;
  }
  
  void k(j paramJ, g paramG, final Fragment paramFragment)
  {
    if (r == null)
    {
      r = paramJ;
      s = paramG;
      t = paramFragment;
      if (paramFragment != null) {}
      for (paramG = new i(paramFragment);; paramG = (q)paramJ)
      {
        h(paramG);
        break;
        if (!(paramJ instanceof q)) {
          break;
        }
      }
      if (t != null) {
        s1();
      }
      if ((paramJ instanceof androidx.activity.q))
      {
        paramG = (androidx.activity.q)paramJ;
        OnBackPressedDispatcher localOnBackPressedDispatcher = paramG.getOnBackPressedDispatcher();
        g = localOnBackPressedDispatcher;
        if (paramFragment != null) {
          paramG = paramFragment;
        }
        localOnBackPressedDispatcher.h(paramG, h);
      }
      if (paramFragment != null) {
        paramJ = mFragmentManager.n0(paramFragment);
      }
      for (;;)
      {
        M = paramJ;
        break;
        if ((paramJ instanceof m0)) {
          paramJ = p.j(((m0)paramJ).getViewModelStore());
        } else {
          paramJ = new p(false);
        }
      }
      M.o(K0());
      c.x(M);
      paramJ = r;
      if ((paramJ instanceof d))
      {
        paramG = ((d)paramJ).getActivityResultRegistry();
        if (paramFragment != null)
        {
          paramJ = new StringBuilder();
          paramJ.append(mWho);
          paramJ.append(":");
          paramJ = paramJ.toString();
        }
        else
        {
          paramJ = "";
        }
        paramFragment = new StringBuilder();
        paramFragment.append("FragmentManager:");
        paramFragment.append(paramJ);
        paramJ = paramFragment.toString();
        paramFragment = new StringBuilder();
        paramFragment.append(paramJ);
        paramFragment.append("StartActivityForResult");
        z = paramG.j(paramFragment.toString(), new e.c(), new j());
        paramFragment = new StringBuilder();
        paramFragment.append(paramJ);
        paramFragment.append("StartIntentSenderForResult");
        A = paramG.j(paramFragment.toString(), new k(), new a());
        paramFragment = new StringBuilder();
        paramFragment.append(paramJ);
        paramFragment.append("RequestPermissions");
        B = paramG.j(paramFragment.toString(), new e.b(), new b());
      }
      return;
    }
    throw new IllegalStateException("Already attached");
  }
  
  void k1()
  {
    for (;;)
    {
      int i2;
      synchronized (a)
      {
        ArrayList localArrayList2 = L;
        i2 = 0;
        if ((localArrayList2 != null) && (!localArrayList2.isEmpty()))
        {
          i1 = 1;
          if (a.size() != 1) {
            break label97;
          }
          i2 = 1;
          break label97;
          r.g().removeCallbacks(N);
          r.g().post(N);
          s1();
          return;
        }
      }
      int i1 = 0;
      continue;
      label97:
      if (i1 == 0) {
        if (i2 == 0) {}
      }
    }
  }
  
  void l(Fragment paramFragment)
  {
    StringBuilder localStringBuilder;
    if (F0(2))
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("attach: ");
      localStringBuilder.append(paramFragment);
      Log.v("FragmentManager", localStringBuilder.toString());
    }
    if (mDetached)
    {
      mDetached = false;
      if (!mAdded)
      {
        c.a(paramFragment);
        if (F0(2))
        {
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("add from attach: ");
          localStringBuilder.append(paramFragment);
          Log.v("FragmentManager", localStringBuilder.toString());
        }
        if (G0(paramFragment)) {
          D = true;
        }
      }
    }
  }
  
  void l1(Fragment paramFragment, boolean paramBoolean)
  {
    paramFragment = p0(paramFragment);
    if ((paramFragment != null) && ((paramFragment instanceof FragmentContainerView))) {
      ((FragmentContainerView)paramFragment).setDrawDisappearingViewsLast(paramBoolean ^ true);
    }
  }
  
  public u m()
  {
    return new a(this);
  }
  
  public int m0()
  {
    ArrayList localArrayList = d;
    if (localArrayList != null) {
      return localArrayList.size();
    }
    return 0;
  }
  
  void m1(Fragment paramFragment, i.b paramB)
  {
    if ((paramFragment.equals(g0(mWho))) && ((mHost == null) || (mFragmentManager == this)))
    {
      mMaxState = paramB;
      return;
    }
    paramB = new StringBuilder();
    paramB.append("Fragment ");
    paramB.append(paramFragment);
    paramB.append(" is not an active fragment of FragmentManager ");
    paramB.append(this);
    throw new IllegalArgumentException(paramB.toString());
  }
  
  void n1(Fragment paramFragment)
  {
    if ((paramFragment != null) && ((!paramFragment.equals(g0(mWho))) || ((mHost != null) && (mFragmentManager != this))))
    {
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Fragment ");
      ((StringBuilder)localObject).append(paramFragment);
      ((StringBuilder)localObject).append(" is not an active fragment of FragmentManager ");
      ((StringBuilder)localObject).append(this);
      throw new IllegalArgumentException(((StringBuilder)localObject).toString());
    }
    Object localObject = u;
    u = paramFragment;
    L((Fragment)localObject);
    L(u);
  }
  
  boolean o()
  {
    Iterator localIterator = c.l().iterator();
    boolean bool1 = false;
    while (localIterator.hasNext())
    {
      Fragment localFragment = (Fragment)localIterator.next();
      boolean bool2 = bool1;
      if (localFragment != null) {
        bool2 = G0(localFragment);
      }
      bool1 = bool2;
      if (bool2) {
        return true;
      }
    }
    return false;
  }
  
  g o0()
  {
    return s;
  }
  
  void p1(Fragment paramFragment)
  {
    if (F0(2))
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("show: ");
      localStringBuilder.append(paramFragment);
      Log.v("FragmentManager", localStringBuilder.toString());
    }
    if (mHidden)
    {
      mHidden = false;
      mHiddenChanged ^= true;
    }
  }
  
  public i q0()
  {
    Object localObject = v;
    if (localObject != null) {
      return localObject;
    }
    localObject = t;
    if (localObject != null) {
      return mFragmentManager.q0();
    }
    return w;
  }
  
  t r0()
  {
    return c;
  }
  
  public void r1(l paramL)
  {
    o.p(paramL);
  }
  
  public List s0()
  {
    return c.n();
  }
  
  void t(a paramA, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    if (paramBoolean1) {
      paramA.u(paramBoolean3);
    } else {
      paramA.t();
    }
    Object localObject1 = new ArrayList(1);
    Object localObject2 = new ArrayList(1);
    ((ArrayList)localObject1).add(paramA);
    ((ArrayList)localObject2).add(Boolean.valueOf(paramBoolean1));
    if ((paramBoolean2) && (q >= 1)) {
      v.B(r.f(), s, (ArrayList)localObject1, (ArrayList)localObject2, 0, 1, true, n);
    }
    if (paramBoolean3) {
      Q0(q, true);
    }
    localObject1 = c.l().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (Fragment)((Iterator)localObject1).next();
      if ((localObject2 != null) && (mView != null) && (mIsNewlyAdded) && (paramA.x(mContainerId)))
      {
        float f1 = mPostponedAlpha;
        if (f1 > 0.0F) {
          mView.setAlpha(f1);
        }
        if (paramBoolean3)
        {
          mPostponedAlpha = 0.0F;
        }
        else
        {
          mPostponedAlpha = -1.0F;
          mIsNewlyAdded = false;
        }
      }
    }
  }
  
  j t0()
  {
    return r;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder(128);
    localStringBuilder.append("FragmentManager{");
    localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
    localStringBuilder.append(" in ");
    Object localObject = t;
    if (localObject != null)
    {
      localStringBuilder.append(localObject.getClass().getSimpleName());
      localStringBuilder.append("{");
    }
    for (localObject = t;; localObject = r)
    {
      localStringBuilder.append(Integer.toHexString(System.identityHashCode(localObject)));
      localStringBuilder.append("}");
      break label141;
      localObject = r;
      if (localObject == null) {
        break;
      }
      localStringBuilder.append(localObject.getClass().getSimpleName());
      localStringBuilder.append("{");
    }
    localStringBuilder.append("null");
    label141:
    localStringBuilder.append("}}");
    return localStringBuilder.toString();
  }
  
  LayoutInflater.Factory2 u0()
  {
    return f;
  }
  
  s v(Fragment paramFragment)
  {
    s localS = c.m(mWho);
    if (localS != null) {
      return localS;
    }
    paramFragment = new s(o, c, paramFragment);
    paramFragment.o(r.f().getClassLoader());
    paramFragment.t(q);
    return paramFragment;
  }
  
  l v0()
  {
    return o;
  }
  
  Fragment w0()
  {
    return t;
  }
  
  void x(Fragment paramFragment)
  {
    StringBuilder localStringBuilder;
    if (F0(2))
    {
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("detach: ");
      localStringBuilder.append(paramFragment);
      Log.v("FragmentManager", localStringBuilder.toString());
    }
    if (!mDetached)
    {
      mDetached = true;
      if (mAdded)
      {
        if (F0(2))
        {
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("remove from detach: ");
          localStringBuilder.append(paramFragment);
          Log.v("FragmentManager", localStringBuilder.toString());
        }
        c.s(paramFragment);
        if (G0(paramFragment)) {
          D = true;
        }
        o1(paramFragment);
      }
    }
  }
  
  public Fragment x0()
  {
    return u;
  }
  
  void y()
  {
    E = false;
    F = false;
    M.o(false);
    S(4);
  }
  
  b0 y0()
  {
    Object localObject = x;
    if (localObject != null) {
      return localObject;
    }
    localObject = t;
    if (localObject != null) {
      return mFragmentManager.y0();
    }
    return y;
  }
  
  void z()
  {
    E = false;
    F = false;
    M.o(false);
    S(0);
  }
  
  class a
    implements androidx.activity.result.b
  {
    a() {}
    
    public void b(androidx.activity.result.a paramA)
    {
      Object localObject = (m.m)C.pollFirst();
      if (localObject == null)
      {
        paramA = new StringBuilder();
        paramA.append("No IntentSenders were started for ");
        paramA.append(this);
        Log.w("FragmentManager", paramA.toString());
        return;
      }
      String str = e;
      int i = f;
      localObject = m.c(m.this).i(str);
      if (localObject == null)
      {
        paramA = new StringBuilder();
        paramA.append("Intent Sender result delivered for unknown Fragment ");
        paramA.append(str);
        Log.w("FragmentManager", paramA.toString());
        return;
      }
      ((Fragment)localObject).onActivityResult(i, paramA.b(), paramA.a());
    }
  }
  
  class b
    implements androidx.activity.result.b
  {
    b() {}
    
    public void b(Map paramMap)
    {
      String[] arrayOfString = (String[])paramMap.keySet().toArray(new String[0]);
      Object localObject1 = new ArrayList(paramMap.values());
      paramMap = new int[((ArrayList)localObject1).size()];
      int i = 0;
      while (i < ((ArrayList)localObject1).size())
      {
        int j;
        if (((Boolean)((ArrayList)localObject1).get(i)).booleanValue()) {
          j = 0;
        } else {
          j = -1;
        }
        paramMap[i] = j;
        i += 1;
      }
      Object localObject2 = (m.m)C.pollFirst();
      if (localObject2 == null)
      {
        paramMap = new StringBuilder();
        paramMap.append("No permissions were requested for ");
        paramMap.append(this);
      }
      for (;;)
      {
        Log.w("FragmentManager", paramMap.toString());
        return;
        localObject1 = e;
        i = f;
        localObject2 = m.c(m.this).i((String)localObject1);
        if (localObject2 != null) {
          break;
        }
        paramMap = new StringBuilder();
        paramMap.append("Permission request result delivered for unknown Fragment ");
        paramMap.append((String)localObject1);
      }
      ((Fragment)localObject2).onRequestPermissionsResult(i, arrayOfString, paramMap);
    }
  }
  
  class c
    extends androidx.activity.o
  {
    c(boolean paramBoolean)
    {
      super();
    }
    
    public void d()
    {
      B0();
    }
  }
  
  class d
    implements v.g
  {
    d() {}
    
    public void a(Fragment paramFragment, androidx.core.os.e paramE)
    {
      if (!paramE.b()) {
        c1(paramFragment, paramE);
      }
    }
    
    public void b(Fragment paramFragment, androidx.core.os.e paramE)
    {
      f(paramFragment, paramE);
    }
  }
  
  class e
    extends i
  {
    e() {}
    
    public Fragment a(ClassLoader paramClassLoader, String paramString)
    {
      return t0().b(t0().f(), paramString, null);
    }
  }
  
  class f
    implements b0
  {
    f() {}
    
    public a0 a(ViewGroup paramViewGroup)
    {
      return new c(paramViewGroup);
    }
  }
  
  class g
    implements Runnable
  {
    g() {}
    
    public void run()
    {
      a0(true);
    }
  }
  
  class h
    extends AnimatorListenerAdapter
  {
    h(ViewGroup paramViewGroup, View paramView, Fragment paramFragment) {}
    
    public void onAnimationEnd(Animator paramAnimator)
    {
      a.endViewTransition(localView);
      paramAnimator.removeListener(this);
      paramAnimator = paramFragment;
      View localView = mView;
      if ((localView != null) && (mHidden)) {
        localView.setVisibility(8);
      }
    }
  }
  
  class i
    implements q
  {
    i(Fragment paramFragment) {}
    
    public void a(m paramM, Fragment paramFragment)
    {
      paramFragment.onAttachFragment(paramFragment);
    }
  }
  
  class j
    implements androidx.activity.result.b
  {
    j() {}
    
    public void b(androidx.activity.result.a paramA)
    {
      Object localObject = (m.m)C.pollFirst();
      if (localObject == null)
      {
        paramA = new StringBuilder();
        paramA.append("No Activities were started for result for ");
        paramA.append(this);
        Log.w("FragmentManager", paramA.toString());
        return;
      }
      String str = e;
      int i = f;
      localObject = m.c(m.this).i(str);
      if (localObject == null)
      {
        paramA = new StringBuilder();
        paramA.append("Activity result delivered for unknown Fragment ");
        paramA.append(str);
        Log.w("FragmentManager", paramA.toString());
        return;
      }
      ((Fragment)localObject).onActivityResult(i, paramA.b(), paramA.a());
    }
  }
  
  static class k
    extends e.a
  {
    k() {}
    
    public Intent d(Context paramContext, androidx.activity.result.e paramE)
    {
      Intent localIntent1 = new Intent("androidx.activity.result.contract.action.INTENT_SENDER_REQUEST");
      Intent localIntent2 = paramE.a();
      paramContext = paramE;
      if (localIntent2 != null)
      {
        Bundle localBundle = localIntent2.getBundleExtra("androidx.activity.result.contract.extra.ACTIVITY_OPTIONS_BUNDLE");
        paramContext = paramE;
        if (localBundle != null)
        {
          localIntent1.putExtra("androidx.activity.result.contract.extra.ACTIVITY_OPTIONS_BUNDLE", localBundle);
          localIntent2.removeExtra("androidx.activity.result.contract.extra.ACTIVITY_OPTIONS_BUNDLE");
          paramContext = paramE;
          if (localIntent2.getBooleanExtra("androidx.fragment.extra.ACTIVITY_OPTIONS_BUNDLE", false)) {
            paramContext = new e.a(paramE.d()).b(null).c(paramE.c(), paramE.b()).a();
          }
        }
      }
      localIntent1.putExtra("androidx.activity.result.contract.extra.INTENT_SENDER_REQUEST", paramContext);
      if (m.F0(2))
      {
        paramContext = new StringBuilder();
        paramContext.append("CreateIntent created the following intent: ");
        paramContext.append(localIntent1);
        Log.v("FragmentManager", paramContext.toString());
      }
      return localIntent1;
    }
    
    public androidx.activity.result.a e(int paramInt, Intent paramIntent)
    {
      return new androidx.activity.result.a(paramInt, paramIntent);
    }
  }
  
  public static abstract class l
  {
    public l() {}
    
    @Deprecated
    public void onFragmentActivityCreated(m paramM, Fragment paramFragment, Bundle paramBundle) {}
    
    public void onFragmentAttached(m paramM, Fragment paramFragment, Context paramContext) {}
    
    public void onFragmentCreated(m paramM, Fragment paramFragment, Bundle paramBundle) {}
    
    public void onFragmentDestroyed(m paramM, Fragment paramFragment) {}
    
    public void onFragmentDetached(m paramM, Fragment paramFragment) {}
    
    public void onFragmentPaused(m paramM, Fragment paramFragment) {}
    
    public void onFragmentPreAttached(m paramM, Fragment paramFragment, Context paramContext) {}
    
    public void onFragmentPreCreated(m paramM, Fragment paramFragment, Bundle paramBundle) {}
    
    public void onFragmentResumed(m paramM, Fragment paramFragment) {}
    
    public void onFragmentSaveInstanceState(m paramM, Fragment paramFragment, Bundle paramBundle) {}
    
    public void onFragmentStarted(m paramM, Fragment paramFragment) {}
    
    public void onFragmentStopped(m paramM, Fragment paramFragment) {}
    
    public void onFragmentViewCreated(m paramM, Fragment paramFragment, View paramView, Bundle paramBundle) {}
    
    public void onFragmentViewDestroyed(m paramM, Fragment paramFragment) {}
  }
  
  static class m
    implements Parcelable
  {
    public static final Parcelable.Creator<m> CREATOR = new a();
    String e;
    int f;
    
    m(Parcel paramParcel)
    {
      e = paramParcel.readString();
      f = paramParcel.readInt();
    }
    
    m(String paramString, int paramInt)
    {
      e = paramString;
      f = paramInt;
    }
    
    public int describeContents()
    {
      return 0;
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      paramParcel.writeString(e);
      paramParcel.writeInt(f);
    }
    
    class a
      implements Parcelable.Creator
    {
      a() {}
      
      public m.m a(Parcel paramParcel)
      {
        return new m.m(paramParcel);
      }
      
      public m.m[] b(int paramInt)
      {
        return new m.m[paramInt];
      }
    }
  }
  
  static abstract interface n
  {
    public abstract boolean a(ArrayList paramArrayList1, ArrayList paramArrayList2);
  }
  
  private class o
    implements m.n
  {
    final String a;
    final int b;
    final int c;
    
    o(String paramString, int paramInt1, int paramInt2)
    {
      a = paramString;
      b = paramInt1;
      c = paramInt2;
    }
    
    public boolean a(ArrayList paramArrayList1, ArrayList paramArrayList2)
    {
      Fragment localFragment = u;
      if ((localFragment != null) && (b < 0) && (a == null) && (localFragment.getChildFragmentManager().X0())) {
        return false;
      }
      return Z0(paramArrayList1, paramArrayList2, a, b, c);
    }
  }
  
  static class p
    implements Fragment.l
  {
    final boolean a;
    final a b;
    private int c;
    
    p(a paramA, boolean paramBoolean)
    {
      a = paramBoolean;
      b = paramA;
    }
    
    public void a()
    {
      int i = c - 1;
      c = i;
      if (i != 0) {
        return;
      }
      b.t.k1();
    }
    
    public void b()
    {
      c += 1;
    }
    
    void c()
    {
      a localA = b;
      t.t(localA, a, false, false);
    }
    
    void d()
    {
      int i;
      if (c > 0) {
        i = 1;
      } else {
        i = 0;
      }
      Object localObject = b.t.s0().iterator();
      while (((Iterator)localObject).hasNext())
      {
        Fragment localFragment = (Fragment)((Iterator)localObject).next();
        localFragment.setOnStartEnterTransitionListener(null);
        if ((i != 0) && (localFragment.isPostponed())) {
          localFragment.startPostponedEnterTransition();
        }
      }
      localObject = b;
      t.t((a)localObject, a, i ^ 0x1, true);
    }
    
    public boolean e()
    {
      return c == 0;
    }
  }
}
