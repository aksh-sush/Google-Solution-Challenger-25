package db;

import cb.c;
import cb.f;
import cb.h;
import cb.i;
import cb.j;
import cb.k;
import cb.n;
import cb.o;
import cb.p;
import cb.r;
import cb.s;
import cb.t;
import cb.u;
import cb.v;
import cb.w;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import ta.c0;

public final class e
  implements jb.b, d
{
  public static final a b = new a(null);
  private static final Map c;
  private static final HashMap d;
  private static final HashMap e;
  private static final HashMap f;
  private static final Map g;
  private final Class a;
  
  static
  {
    int i = 0;
    Object localObject2 = ta.m.g(new Class[] { cb.a.class, cb.l.class, p.class, cb.q.class, r.class, s.class, t.class, u.class, v.class, w.class, cb.b.class, c.class, cb.d.class, cb.e.class, f.class, cb.g.class, h.class, i.class, j.class, k.class, cb.m.class, n.class, o.class });
    Object localObject1 = new ArrayList(ta.m.l((Iterable)localObject2, 10));
    localObject2 = ((Iterable)localObject2).iterator();
    while (((Iterator)localObject2).hasNext())
    {
      localObject3 = ((Iterator)localObject2).next();
      if (i < 0) {
        ta.m.k();
      }
      ((Collection)localObject1).add(sa.q.a((Class)localObject3, Integer.valueOf(i)));
      i += 1;
    }
    c = c0.j((Iterable)localObject1);
    localObject2 = new HashMap();
    ((HashMap)localObject2).put("boolean", "kotlin.Boolean");
    ((HashMap)localObject2).put("char", "kotlin.Char");
    ((HashMap)localObject2).put("byte", "kotlin.Byte");
    ((HashMap)localObject2).put("short", "kotlin.Short");
    ((HashMap)localObject2).put("int", "kotlin.Int");
    ((HashMap)localObject2).put("float", "kotlin.Float");
    ((HashMap)localObject2).put("long", "kotlin.Long");
    ((HashMap)localObject2).put("double", "kotlin.Double");
    d = (HashMap)localObject2;
    Object localObject3 = new HashMap();
    ((HashMap)localObject3).put("java.lang.Boolean", "kotlin.Boolean");
    ((HashMap)localObject3).put("java.lang.Character", "kotlin.Char");
    ((HashMap)localObject3).put("java.lang.Byte", "kotlin.Byte");
    ((HashMap)localObject3).put("java.lang.Short", "kotlin.Short");
    ((HashMap)localObject3).put("java.lang.Integer", "kotlin.Int");
    ((HashMap)localObject3).put("java.lang.Float", "kotlin.Float");
    ((HashMap)localObject3).put("java.lang.Long", "kotlin.Long");
    ((HashMap)localObject3).put("java.lang.Double", "kotlin.Double");
    e = (HashMap)localObject3;
    localObject1 = new HashMap();
    ((HashMap)localObject1).put("java.lang.Object", "kotlin.Any");
    ((HashMap)localObject1).put("java.lang.String", "kotlin.String");
    ((HashMap)localObject1).put("java.lang.CharSequence", "kotlin.CharSequence");
    ((HashMap)localObject1).put("java.lang.Throwable", "kotlin.Throwable");
    ((HashMap)localObject1).put("java.lang.Cloneable", "kotlin.Cloneable");
    ((HashMap)localObject1).put("java.lang.Number", "kotlin.Number");
    ((HashMap)localObject1).put("java.lang.Comparable", "kotlin.Comparable");
    ((HashMap)localObject1).put("java.lang.Enum", "kotlin.Enum");
    ((HashMap)localObject1).put("java.lang.annotation.Annotation", "kotlin.Annotation");
    ((HashMap)localObject1).put("java.lang.Iterable", "kotlin.collections.Iterable");
    ((HashMap)localObject1).put("java.util.Iterator", "kotlin.collections.Iterator");
    ((HashMap)localObject1).put("java.util.Collection", "kotlin.collections.Collection");
    ((HashMap)localObject1).put("java.util.List", "kotlin.collections.List");
    ((HashMap)localObject1).put("java.util.Set", "kotlin.collections.Set");
    ((HashMap)localObject1).put("java.util.ListIterator", "kotlin.collections.ListIterator");
    ((HashMap)localObject1).put("java.util.Map", "kotlin.collections.Map");
    ((HashMap)localObject1).put("java.util.Map$Entry", "kotlin.collections.Map.Entry");
    ((HashMap)localObject1).put("kotlin.jvm.internal.StringCompanionObject", "kotlin.String.Companion");
    ((HashMap)localObject1).put("kotlin.jvm.internal.EnumCompanionObject", "kotlin.Enum.Companion");
    ((HashMap)localObject1).putAll((Map)localObject2);
    ((HashMap)localObject1).putAll((Map)localObject3);
    localObject2 = ((HashMap)localObject2).values();
    l.d(localObject2, "primitiveFqNames.values");
    localObject2 = ((Iterable)localObject2).iterator();
    Object localObject4;
    while (((Iterator)localObject2).hasNext())
    {
      localObject3 = (String)((Iterator)localObject2).next();
      localObject4 = new StringBuilder();
      ((StringBuilder)localObject4).append("kotlin.jvm.internal.");
      l.d(localObject3, "kotlinName");
      ((StringBuilder)localObject4).append(lb.g.d0((String)localObject3, '.', null, 2, null));
      ((StringBuilder)localObject4).append("CompanionObject");
      localObject4 = ((StringBuilder)localObject4).toString();
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append((String)localObject3);
      localStringBuilder.append(".Companion");
      localObject3 = sa.q.a(localObject4, localStringBuilder.toString());
      ((Map)localObject1).put(((sa.m)localObject3).c(), ((sa.m)localObject3).d());
    }
    localObject2 = c.entrySet().iterator();
    while (((Iterator)localObject2).hasNext())
    {
      localObject3 = (Map.Entry)((Iterator)localObject2).next();
      localObject4 = (Class)((Map.Entry)localObject3).getKey();
      i = ((Number)((Map.Entry)localObject3).getValue()).intValue();
      localObject3 = ((Class)localObject4).getName();
      localObject4 = new StringBuilder();
      ((StringBuilder)localObject4).append("kotlin.Function");
      ((StringBuilder)localObject4).append(i);
      ((HashMap)localObject1).put(localObject3, ((StringBuilder)localObject4).toString());
    }
    f = (HashMap)localObject1;
    localObject2 = new LinkedHashMap(c0.a(((Map)localObject1).size()));
    localObject1 = ((Map)localObject1).entrySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject3 = (Map.Entry)((Iterator)localObject1).next();
      ((Map)localObject2).put(((Map.Entry)localObject3).getKey(), lb.g.d0((String)((Map.Entry)localObject3).getValue(), '.', null, 2, null));
    }
    g = (Map)localObject2;
  }
  
  public e(Class paramClass)
  {
    a = paramClass;
  }
  
  public String a()
  {
    return b.a(b());
  }
  
  public Class b()
  {
    return a;
  }
  
  public boolean equals(Object paramObject)
  {
    return ((paramObject instanceof e)) && (l.a(bb.a.b(this), bb.a.b((jb.b)paramObject)));
  }
  
  public int hashCode()
  {
    return bb.a.b(this).hashCode();
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(b().toString());
    localStringBuilder.append(" (Kotlin reflection is not available)");
    return localStringBuilder.toString();
  }
  
  public static final class a
  {
    private a() {}
    
    public final String a(Class paramClass)
    {
      l.e(paramClass, "jClass");
      boolean bool = paramClass.isAnonymousClass();
      Object localObject1 = null;
      if (bool) {
        return null;
      }
      Object localObject3;
      if (paramClass.isLocalClass())
      {
        localObject3 = paramClass.getSimpleName();
        localObject1 = paramClass.getEnclosingMethod();
        if (localObject1 != null)
        {
          l.d(localObject3, "name");
          localObject2 = new StringBuilder();
          ((StringBuilder)localObject2).append(((Method)localObject1).getName());
          ((StringBuilder)localObject2).append('$');
          localObject2 = lb.g.b0((String)localObject3, ((StringBuilder)localObject2).toString(), null, 2, null);
          localObject1 = localObject2;
          if (localObject2 == null) {}
        }
      }
      for (;;)
      {
        return localObject1;
        paramClass = paramClass.getEnclosingConstructor();
        l.d(localObject3, "name");
        if (paramClass != null)
        {
          localObject1 = new StringBuilder();
          ((StringBuilder)localObject1).append(paramClass.getName());
          ((StringBuilder)localObject1).append('$');
          return lb.g.b0((String)localObject3, ((StringBuilder)localObject1).toString(), null, 2, null);
        }
        return lb.g.a0((String)localObject3, '$', null, 2, null);
        if (!paramClass.isArray()) {
          break;
        }
        localObject3 = paramClass.getComponentType();
        bool = ((Class)localObject3).isPrimitive();
        localObject2 = "Array";
        paramClass = (Class)localObject1;
        if (bool)
        {
          localObject3 = (String)e.c().get(((Class)localObject3).getName());
          paramClass = (Class)localObject1;
          if (localObject3 != null)
          {
            paramClass = new StringBuilder();
            paramClass.append((String)localObject3);
            paramClass.append("Array");
            paramClass = paramClass.toString();
          }
        }
        localObject1 = paramClass;
        if (paramClass != null) {
          return localObject1;
        }
        localObject1 = localObject2;
      }
      Object localObject2 = (String)e.c().get(paramClass.getName());
      localObject1 = localObject2;
      if (localObject2 == null) {
        localObject1 = paramClass.getSimpleName();
      }
      return localObject1;
    }
  }
}
