package h6;

import j6.f;
import java.util.Map;
import x5.g;

public final class a
  implements g
{
  public a() {}
  
  private static a6.b b(f paramF, int paramInt1, int paramInt2, int paramInt3)
  {
    paramF = paramF.a();
    if (paramF != null)
    {
      int k = paramF.e();
      int m = paramF.d();
      paramInt3 <<= 1;
      int i = k + paramInt3;
      int j = paramInt3 + m;
      paramInt3 = Math.max(paramInt1, i);
      paramInt2 = Math.max(paramInt2, j);
      int n = Math.min(paramInt3 / i, paramInt2 / j);
      j = (paramInt3 - k * n) / 2;
      paramInt1 = (paramInt2 - m * n) / 2;
      a6.b localB = new a6.b(paramInt3, paramInt2);
      paramInt2 = 0;
      while (paramInt2 < m)
      {
        paramInt3 = j;
        i = 0;
        while (i < k)
        {
          if (paramF.b(i, paramInt2) == 1) {
            localB.h(paramInt3, paramInt1, n, n);
          }
          i += 1;
          paramInt3 += n;
        }
        paramInt2 += 1;
        paramInt1 += n;
      }
      return localB;
    }
    throw new IllegalStateException();
  }
  
  public a6.b a(String paramString, x5.a paramA, int paramInt1, int paramInt2, Map paramMap)
  {
    if (!paramString.isEmpty())
    {
      if (paramA == x5.a.p)
      {
        if ((paramInt1 >= 0) && (paramInt2 >= 0))
        {
          paramA = i6.a.f;
          int j = 4;
          int i = j;
          Object localObject = paramA;
          if (paramMap != null)
          {
            localObject = x5.c.e;
            if (paramMap.containsKey(localObject)) {
              paramA = i6.a.valueOf(paramMap.get(localObject).toString());
            }
            x5.c localC = x5.c.j;
            i = j;
            localObject = paramA;
            if (paramMap.containsKey(localC))
            {
              i = Integer.parseInt(paramMap.get(localC).toString());
              localObject = paramA;
            }
          }
          return b(j6.c.n(paramString, (i6.a)localObject, paramMap), paramInt1, paramInt2, i);
        }
        paramString = new StringBuilder("Requested dimensions are too small: ");
        paramString.append(paramInt1);
        paramString.append('x');
        paramString.append(paramInt2);
        throw new IllegalArgumentException(paramString.toString());
      }
      throw new IllegalArgumentException("Can only encode QR_CODE, but got ".concat(String.valueOf(paramA)));
    }
    throw new IllegalArgumentException("Found empty contents");
  }
}
