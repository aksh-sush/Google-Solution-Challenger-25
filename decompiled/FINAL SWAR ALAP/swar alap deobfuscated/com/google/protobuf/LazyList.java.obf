package com.google.protobuf;

import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.RandomAccess;

final class o
  extends c
  implements c0.b, RandomAccess, e1
{
  private static final o h;
  private double[] f;
  private int g;
  
  static
  {
    o localO = new o(new double[0], 0);
    h = localO;
    localO.c();
  }
  
  private o(double[] paramArrayOfDouble, int paramInt)
  {
    f = paramArrayOfDouble;
    g = paramInt;
  }
  
  private void h(int paramInt, double paramDouble)
  {
    b();
    if (paramInt >= 0)
    {
      int i = g;
      if (paramInt <= i)
      {
        double[] arrayOfDouble1 = f;
        if (i < arrayOfDouble1.length)
        {
          System.arraycopy(arrayOfDouble1, paramInt, arrayOfDouble1, paramInt + 1, i - paramInt);
        }
        else
        {
          double[] arrayOfDouble2 = new double[i * 3 / 2 + 1];
          System.arraycopy(arrayOfDouble1, 0, arrayOfDouble2, 0, paramInt);
          System.arraycopy(f, paramInt, arrayOfDouble2, paramInt + 1, g - paramInt);
          f = arrayOfDouble2;
        }
        f[paramInt] = paramDouble;
        g += 1;
        modCount += 1;
        return;
      }
    }
    throw new IndexOutOfBoundsException(m(paramInt));
  }
  
  public static o i()
  {
    return h;
  }
  
  private void j(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < g)) {
      return;
    }
    throw new IndexOutOfBoundsException(m(paramInt));
  }
  
  private String m(int paramInt)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Index:");
    localStringBuilder.append(paramInt);
    localStringBuilder.append(", Size:");
    localStringBuilder.append(g);
    return localStringBuilder.toString();
  }
  
  public c0.b a(int paramInt)
  {
    if (paramInt >= g) {
      return new o(Arrays.copyOf(f, paramInt), g);
    }
    throw new IllegalArgumentException();
  }
  
  public boolean addAll(Collection paramCollection)
  {
    b();
    c0.a(paramCollection);
    if (!(paramCollection instanceof o)) {
      return super.addAll(paramCollection);
    }
    paramCollection = (o)paramCollection;
    int i = g;
    if (i == 0) {
      return false;
    }
    int j = g;
    if (Integer.MAX_VALUE - j >= i)
    {
      i = j + i;
      double[] arrayOfDouble = f;
      if (i > arrayOfDouble.length) {
        f = Arrays.copyOf(arrayOfDouble, i);
      }
      System.arraycopy(f, 0, f, g, g);
      g = i;
      modCount += 1;
      return true;
    }
    throw new OutOfMemoryError();
  }
  
  public boolean contains(Object paramObject)
  {
    return indexOf(paramObject) != -1;
  }
  
  public void d(int paramInt, Double paramDouble)
  {
    h(paramInt, paramDouble.doubleValue());
  }
  
  public boolean e(Double paramDouble)
  {
    f(paramDouble.doubleValue());
    return true;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof o)) {
      return super.equals(paramObject);
    }
    paramObject = (o)paramObject;
    if (g != g) {
      return false;
    }
    paramObject = f;
    int i = 0;
    while (i < g)
    {
      if (Double.doubleToLongBits(f[i]) != Double.doubleToLongBits(paramObject[i])) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public void f(double paramDouble)
  {
    b();
    int i = g;
    double[] arrayOfDouble1 = f;
    if (i == arrayOfDouble1.length)
    {
      double[] arrayOfDouble2 = new double[i * 3 / 2 + 1];
      System.arraycopy(arrayOfDouble1, 0, arrayOfDouble2, 0, i);
      f = arrayOfDouble2;
    }
    arrayOfDouble1 = f;
    i = g;
    g = (i + 1);
    arrayOfDouble1[i] = paramDouble;
  }
  
  public int hashCode()
  {
    int j = 1;
    int i = 0;
    while (i < g)
    {
      j = j * 31 + c0.f(Double.doubleToLongBits(f[i]));
      i += 1;
    }
    return j;
  }
  
  public int indexOf(Object paramObject)
  {
    if (!(paramObject instanceof Double)) {
      return -1;
    }
    double d = ((Double)paramObject).doubleValue();
    int j = size();
    int i = 0;
    while (i < j)
    {
      if (f[i] == d) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public Double k(int paramInt)
  {
    return Double.valueOf(l(paramInt));
  }
  
  public double l(int paramInt)
  {
    j(paramInt);
    return f[paramInt];
  }
  
  public Double o(int paramInt)
  {
    b();
    j(paramInt);
    double[] arrayOfDouble = f;
    double d = arrayOfDouble[paramInt];
    int i = g;
    if (paramInt < i - 1) {
      System.arraycopy(arrayOfDouble, paramInt + 1, arrayOfDouble, paramInt, i - paramInt - 1);
    }
    g -= 1;
    modCount += 1;
    return Double.valueOf(d);
  }
  
  public Double p(int paramInt, Double paramDouble)
  {
    return Double.valueOf(q(paramInt, paramDouble.doubleValue()));
  }
  
  public double q(int paramInt, double paramDouble)
  {
    b();
    j(paramInt);
    double[] arrayOfDouble = f;
    double d = arrayOfDouble[paramInt];
    arrayOfDouble[paramInt] = paramDouble;
    return d;
  }
  
  protected void removeRange(int paramInt1, int paramInt2)
  {
    b();
    if (paramInt2 >= paramInt1)
    {
      double[] arrayOfDouble = f;
      System.arraycopy(arrayOfDouble, paramInt2, arrayOfDouble, paramInt1, g - paramInt2);
      g -= paramInt2 - paramInt1;
      modCount += 1;
      return;
    }
    throw new IndexOutOfBoundsException("toIndex < fromIndex");
  }
  
  public int size()
  {
    return g;
  }
}
