package androidx.lifecycle;

import android.os.BaseBundle;
import android.os.Binder;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.v4.media.session.b;
import android.util.Size;
import android.util.SizeF;
import android.util.SparseArray;
import androidx.core.os.d;
import androidx.savedstate.a.c;
import db.l;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import sa.m;
import sa.q;
import ta.c0;

public final class a0
{
  public static final a f = new a(null);
  private static final Class[] g = { Boolean.TYPE, [Z.class, Double.TYPE, [D.class, Integer.TYPE, [I.class, Long.TYPE, [J.class, String.class, [Ljava.lang.String.class, Binder.class, Bundle.class, Byte.TYPE, [B.class, Character.TYPE, [C.class, CharSequence.class, [Ljava.lang.CharSequence.class, ArrayList.class, Float.TYPE, [F.class, Parcelable.class, [Landroid.os.Parcelable.class, Serializable.class, Short.TYPE, [S.class, SparseArray.class, Size.class, SizeF.class };
  private final Map a;
  private final Map b;
  private final Map c;
  private final Map d;
  private final a.c e;
  
  public a0()
  {
    a = new LinkedHashMap();
    b = new LinkedHashMap();
    c = new LinkedHashMap();
    d = new LinkedHashMap();
    e = new z(this);
  }
  
  public a0(Map paramMap)
  {
    LinkedHashMap localLinkedHashMap = new LinkedHashMap();
    a = localLinkedHashMap;
    b = new LinkedHashMap();
    c = new LinkedHashMap();
    d = new LinkedHashMap();
    e = new z(this);
    localLinkedHashMap.putAll(paramMap);
  }
  
  private static final Bundle d(a0 paramA0)
  {
    l.e(paramA0, "this$0");
    Object localObject1 = c0.l(b).entrySet().iterator();
    while (((Iterator)localObject1).hasNext())
    {
      localObject2 = (Map.Entry)((Iterator)localObject1).next();
      paramA0.e((String)((Map.Entry)localObject2).getKey(), ((a.c)((Map.Entry)localObject2).getValue()).a());
    }
    Object localObject3 = a.keySet();
    localObject1 = new ArrayList(((Set)localObject3).size());
    Object localObject2 = new ArrayList(((ArrayList)localObject1).size());
    localObject3 = ((Set)localObject3).iterator();
    while (((Iterator)localObject3).hasNext())
    {
      String str = (String)((Iterator)localObject3).next();
      ((ArrayList)localObject1).add(str);
      ((ArrayList)localObject2).add(a.get(str));
    }
    return d.a(new m[] { q.a("keys", localObject1), q.a("values", localObject2) });
  }
  
  public final a.c c()
  {
    return e;
  }
  
  public final void e(String paramString, Object paramObject)
  {
    l.e(paramString, "key");
    if (f.b(paramObject))
    {
      Object localObject = c.get(paramString);
      if ((localObject instanceof s)) {
        localObject = (s)localObject;
      } else {
        localObject = null;
      }
      if (localObject != null) {
        ((s)localObject).n(paramObject);
      } else {
        a.put(paramString, paramObject);
      }
      b.a(d.get(paramString));
      return;
    }
    paramString = new StringBuilder();
    paramString.append("Can't put value with type ");
    l.b(paramObject);
    paramString.append(paramObject.getClass());
    paramString.append(" into saved state");
    throw new IllegalArgumentException(paramString.toString());
  }
  
  public static final class a
  {
    private a() {}
    
    public final a0 a(Bundle paramBundle1, Bundle paramBundle2)
    {
      Object localObject1;
      Object localObject2;
      if (paramBundle1 == null)
      {
        if (paramBundle2 == null) {
          return new a0();
        }
        paramBundle1 = new HashMap();
        localObject1 = paramBundle2.keySet().iterator();
        while (((Iterator)localObject1).hasNext())
        {
          localObject2 = (String)((Iterator)localObject1).next();
          l.d(localObject2, "key");
          paramBundle1.put(localObject2, paramBundle2.get((String)localObject2));
        }
        return new a0(paramBundle1);
      }
      paramBundle2 = paramBundle1.getParcelableArrayList("keys");
      paramBundle1 = paramBundle1.getParcelableArrayList("values");
      int j = 0;
      int i;
      if ((paramBundle2 != null) && (paramBundle1 != null) && (paramBundle2.size() == paramBundle1.size())) {
        i = 1;
      } else {
        i = 0;
      }
      if (i != 0)
      {
        localObject1 = new LinkedHashMap();
        int k = paramBundle2.size();
        i = j;
        while (i < k)
        {
          localObject2 = paramBundle2.get(i);
          l.c(localObject2, "null cannot be cast to non-null type kotlin.String");
          ((Map)localObject1).put((String)localObject2, paramBundle1.get(i));
          i += 1;
        }
        return new a0((Map)localObject1);
      }
      throw new IllegalStateException("Invalid bundle passed as restored state".toString());
    }
    
    public final boolean b(Object paramObject)
    {
      if (paramObject == null) {
        return true;
      }
      Class[] arrayOfClass = a0.b();
      int j = arrayOfClass.length;
      int i = 0;
      while (i < j)
      {
        Class localClass = arrayOfClass[i];
        l.b(localClass);
        if (localClass.isInstance(paramObject)) {
          return true;
        }
        i += 1;
      }
      return false;
    }
  }
}
