package androidx.core.graphics;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.CancellationSignal;
import android.util.Log;
import androidx.core.content.res.e.c;
import androidx.core.content.res.e.d;
import androidx.core.provider.g.b;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.nio.ByteBuffer;
import java.util.List;

class g
  extends k
{
  private static final Class b;
  private static final Constructor c;
  private static final Method d;
  private static final Method e;
  
  static
  {
    try
    {
      Class localClass = Class.forName("android.graphics.FontFamily");
      localObject3 = localClass.getConstructor(new Class[0]);
      localObject2 = Integer.TYPE;
      localObject4 = localClass.getMethod("addFontWeightStyle", new Class[] { ByteBuffer.class, localObject2, List.class, localObject2, Boolean.TYPE });
      localObject2 = Typeface.class.getMethod("createFromFamiliesWithDefault", new Class[] { Array.newInstance(localClass, 1).getClass() });
    }
    catch (NoSuchMethodException localNoSuchMethodException) {}catch (ClassNotFoundException localClassNotFoundException) {}
    Log.e("TypefaceCompatApi24Impl", localClassNotFoundException.getClass().getName(), localClassNotFoundException);
    Object localObject5 = null;
    Object localObject2 = null;
    Object localObject1 = localObject2;
    Object localObject4 = localObject1;
    Object localObject3 = localObject1;
    localObject1 = localObject5;
    c = (Constructor)localObject3;
    b = localObject1;
    d = (Method)localObject4;
    e = (Method)localObject2;
  }
  
  g() {}
  
  private static boolean h(Object paramObject, ByteBuffer paramByteBuffer, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    try
    {
      paramBoolean = ((Boolean)d.invoke(paramObject, new Object[] { paramByteBuffer, Integer.valueOf(paramInt1), null, Integer.valueOf(paramInt2), Boolean.valueOf(paramBoolean) })).booleanValue();
      return paramBoolean;
    }
    catch (IllegalAccessException|InvocationTargetException paramObject) {}
    return false;
  }
  
  private static Typeface i(Object paramObject)
  {
    try
    {
      Object localObject = Array.newInstance(b, 1);
      Array.set(localObject, 0, paramObject);
      paramObject = (Typeface)e.invoke(null, new Object[] { localObject });
      return paramObject;
    }
    catch (IllegalAccessException|InvocationTargetException paramObject) {}
    return null;
  }
  
  public static boolean j()
  {
    Method localMethod = d;
    if (localMethod == null) {
      Log.w("TypefaceCompatApi24Impl", "Unable to collect necessary private methods.Fallback to legacy implementation.");
    }
    return localMethod != null;
  }
  
  private static Object k()
  {
    try
    {
      Object localObject = c.newInstance(new Object[0]);
      return localObject;
    }
    catch (IllegalAccessException|InstantiationException|InvocationTargetException localIllegalAccessException)
    {
      for (;;) {}
    }
    return null;
  }
  
  public Typeface a(Context paramContext, e.c paramC, Resources paramResources, int paramInt)
  {
    Object localObject1 = k();
    if (localObject1 == null) {
      return null;
    }
    paramC = paramC.a();
    int i = paramC.length;
    paramInt = 0;
    while (paramInt < i)
    {
      Object localObject2 = paramC[paramInt];
      ByteBuffer localByteBuffer = l.b(paramContext, paramResources, localObject2.b());
      if (localByteBuffer == null) {
        return null;
      }
      if (!h(localObject1, localByteBuffer, localObject2.c(), localObject2.e(), localObject2.f())) {
        return null;
      }
      paramInt += 1;
    }
    return i(localObject1);
  }
  
  public Typeface b(Context paramContext, CancellationSignal paramCancellationSignal, g.b[] paramArrayOfB, int paramInt)
  {
    Object localObject = k();
    if (localObject == null) {
      return null;
    }
    androidx.collection.g localG = new androidx.collection.g();
    int j = paramArrayOfB.length;
    int i = 0;
    while (i < j)
    {
      g.b localB = paramArrayOfB[i];
      Uri localUri = localB.d();
      ByteBuffer localByteBuffer2 = (ByteBuffer)localG.get(localUri);
      ByteBuffer localByteBuffer1 = localByteBuffer2;
      if (localByteBuffer2 == null)
      {
        localByteBuffer1 = l.f(paramContext, paramCancellationSignal, localUri);
        localG.put(localUri, localByteBuffer1);
      }
      if (localByteBuffer1 == null) {
        return null;
      }
      if (!h(localObject, localByteBuffer1, localB.c(), localB.e(), localB.f())) {
        return null;
      }
      i += 1;
    }
    paramContext = i(localObject);
    if (paramContext == null) {
      return null;
    }
    return Typeface.create(paramContext, paramInt);
  }
}
