package com.google.protobuf;

import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.RandomAccess;

final class h
  extends c
  implements c0.a, RandomAccess, e1
{
  private static final h h;
  private boolean[] f;
  private int g;
  
  static
  {
    h localH = new h(new boolean[0], 0);
    h = localH;
    localH.c();
  }
  
  private h(boolean[] paramArrayOfBoolean, int paramInt)
  {
    f = paramArrayOfBoolean;
    g = paramInt;
  }
  
  private void f(int paramInt, boolean paramBoolean)
  {
    b();
    if (paramInt >= 0)
    {
      int i = g;
      if (paramInt <= i)
      {
        boolean[] arrayOfBoolean1 = f;
        if (i < arrayOfBoolean1.length)
        {
          System.arraycopy(arrayOfBoolean1, paramInt, arrayOfBoolean1, paramInt + 1, i - paramInt);
        }
        else
        {
          boolean[] arrayOfBoolean2 = new boolean[i * 3 / 2 + 1];
          System.arraycopy(arrayOfBoolean1, 0, arrayOfBoolean2, 0, paramInt);
          System.arraycopy(f, paramInt, arrayOfBoolean2, paramInt + 1, g - paramInt);
          f = arrayOfBoolean2;
        }
        f[paramInt] = paramBoolean;
        g += 1;
        modCount += 1;
        return;
      }
    }
    throw new IndexOutOfBoundsException(m(paramInt));
  }
  
  public static h i()
  {
    return h;
  }
  
  private void j(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < g)) {
      return;
    }
    throw new IndexOutOfBoundsException(m(paramInt));
  }
  
  private String m(int paramInt)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Index:");
    localStringBuilder.append(paramInt);
    localStringBuilder.append(", Size:");
    localStringBuilder.append(g);
    return localStringBuilder.toString();
  }
  
  public c0.a a(int paramInt)
  {
    if (paramInt >= g) {
      return new h(Arrays.copyOf(f, paramInt), g);
    }
    throw new IllegalArgumentException();
  }
  
  public boolean addAll(Collection paramCollection)
  {
    b();
    c0.a(paramCollection);
    if (!(paramCollection instanceof h)) {
      return super.addAll(paramCollection);
    }
    paramCollection = (h)paramCollection;
    int i = g;
    if (i == 0) {
      return false;
    }
    int j = g;
    if (Integer.MAX_VALUE - j >= i)
    {
      i = j + i;
      boolean[] arrayOfBoolean = f;
      if (i > arrayOfBoolean.length) {
        f = Arrays.copyOf(arrayOfBoolean, i);
      }
      System.arraycopy(f, 0, f, g, g);
      g = i;
      modCount += 1;
      return true;
    }
    throw new OutOfMemoryError();
  }
  
  public boolean contains(Object paramObject)
  {
    return indexOf(paramObject) != -1;
  }
  
  public void d(int paramInt, Boolean paramBoolean)
  {
    f(paramInt, paramBoolean.booleanValue());
  }
  
  public boolean e(Boolean paramBoolean)
  {
    h(paramBoolean.booleanValue());
    return true;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof h)) {
      return super.equals(paramObject);
    }
    paramObject = (h)paramObject;
    if (g != g) {
      return false;
    }
    paramObject = f;
    int i = 0;
    while (i < g)
    {
      if (f[i] != paramObject[i]) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public void h(boolean paramBoolean)
  {
    b();
    int i = g;
    boolean[] arrayOfBoolean1 = f;
    if (i == arrayOfBoolean1.length)
    {
      boolean[] arrayOfBoolean2 = new boolean[i * 3 / 2 + 1];
      System.arraycopy(arrayOfBoolean1, 0, arrayOfBoolean2, 0, i);
      f = arrayOfBoolean2;
    }
    arrayOfBoolean1 = f;
    i = g;
    g = (i + 1);
    arrayOfBoolean1[i] = paramBoolean;
  }
  
  public int hashCode()
  {
    int j = 1;
    int i = 0;
    while (i < g)
    {
      j = j * 31 + c0.c(f[i]);
      i += 1;
    }
    return j;
  }
  
  public int indexOf(Object paramObject)
  {
    if (!(paramObject instanceof Boolean)) {
      return -1;
    }
    int k = ((Boolean)paramObject).booleanValue();
    int j = size();
    int i = 0;
    while (i < j)
    {
      if (f[i] == k) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public Boolean k(int paramInt)
  {
    return Boolean.valueOf(l(paramInt));
  }
  
  public boolean l(int paramInt)
  {
    j(paramInt);
    return f[paramInt];
  }
  
  public Boolean o(int paramInt)
  {
    b();
    j(paramInt);
    boolean[] arrayOfBoolean = f;
    int j = arrayOfBoolean[paramInt];
    int i = g;
    if (paramInt < i - 1) {
      System.arraycopy(arrayOfBoolean, paramInt + 1, arrayOfBoolean, paramInt, i - paramInt - 1);
    }
    g -= 1;
    modCount += 1;
    return Boolean.valueOf(j);
  }
  
  public Boolean p(int paramInt, Boolean paramBoolean)
  {
    return Boolean.valueOf(q(paramInt, paramBoolean.booleanValue()));
  }
  
  public boolean q(int paramInt, boolean paramBoolean)
  {
    b();
    j(paramInt);
    boolean[] arrayOfBoolean = f;
    int i = arrayOfBoolean[paramInt];
    arrayOfBoolean[paramInt] = paramBoolean;
    return i;
  }
  
  protected void removeRange(int paramInt1, int paramInt2)
  {
    b();
    if (paramInt2 >= paramInt1)
    {
      boolean[] arrayOfBoolean = f;
      System.arraycopy(arrayOfBoolean, paramInt2, arrayOfBoolean, paramInt1, g - paramInt2);
      g -= paramInt2 - paramInt1;
      modCount += 1;
      return;
    }
    throw new IndexOutOfBoundsException("toIndex < fromIndex");
  }
  
  public int size()
  {
    return g;
  }
}
