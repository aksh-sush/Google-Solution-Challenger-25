package com.google.protobuf;

import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.RandomAccess;

final class b0
  extends c
  implements c0.g, RandomAccess, e1
{
  private static final b0 h;
  private int[] f;
  private int g;
  
  static
  {
    b0 localB0 = new b0(new int[0], 0);
    h = localB0;
    localB0.c();
  }
  
  private b0(int[] paramArrayOfInt, int paramInt)
  {
    f = paramArrayOfInt;
    g = paramInt;
  }
  
  private void h(int paramInt1, int paramInt2)
  {
    b();
    if (paramInt1 >= 0)
    {
      int i = g;
      if (paramInt1 <= i)
      {
        int[] arrayOfInt1 = f;
        if (i < arrayOfInt1.length)
        {
          System.arraycopy(arrayOfInt1, paramInt1, arrayOfInt1, paramInt1 + 1, i - paramInt1);
        }
        else
        {
          int[] arrayOfInt2 = new int[i * 3 / 2 + 1];
          System.arraycopy(arrayOfInt1, 0, arrayOfInt2, 0, paramInt1);
          System.arraycopy(f, paramInt1, arrayOfInt2, paramInt1 + 1, g - paramInt1);
          f = arrayOfInt2;
        }
        f[paramInt1] = paramInt2;
        g += 1;
        modCount += 1;
        return;
      }
    }
    throw new IndexOutOfBoundsException(m(paramInt1));
  }
  
  public static b0 i()
  {
    return h;
  }
  
  private void j(int paramInt)
  {
    if ((paramInt >= 0) && (paramInt < g)) {
      return;
    }
    throw new IndexOutOfBoundsException(m(paramInt));
  }
  
  private String m(int paramInt)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Index:");
    localStringBuilder.append(paramInt);
    localStringBuilder.append(", Size:");
    localStringBuilder.append(g);
    return localStringBuilder.toString();
  }
  
  public c0.g a(int paramInt)
  {
    if (paramInt >= g) {
      return new b0(Arrays.copyOf(f, paramInt), g);
    }
    throw new IllegalArgumentException();
  }
  
  public boolean addAll(Collection paramCollection)
  {
    b();
    c0.a(paramCollection);
    if (!(paramCollection instanceof b0)) {
      return super.addAll(paramCollection);
    }
    paramCollection = (b0)paramCollection;
    int i = g;
    if (i == 0) {
      return false;
    }
    int j = g;
    if (Integer.MAX_VALUE - j >= i)
    {
      i = j + i;
      int[] arrayOfInt = f;
      if (i > arrayOfInt.length) {
        f = Arrays.copyOf(arrayOfInt, i);
      }
      System.arraycopy(f, 0, f, g, g);
      g = i;
      modCount += 1;
      return true;
    }
    throw new OutOfMemoryError();
  }
  
  public boolean contains(Object paramObject)
  {
    return indexOf(paramObject) != -1;
  }
  
  public void d(int paramInt, Integer paramInteger)
  {
    h(paramInt, paramInteger.intValue());
  }
  
  public boolean e(Integer paramInteger)
  {
    f(paramInteger.intValue());
    return true;
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if (!(paramObject instanceof b0)) {
      return super.equals(paramObject);
    }
    paramObject = (b0)paramObject;
    if (g != g) {
      return false;
    }
    paramObject = f;
    int i = 0;
    while (i < g)
    {
      if (f[i] != paramObject[i]) {
        return false;
      }
      i += 1;
    }
    return true;
  }
  
  public void f(int paramInt)
  {
    b();
    int i = g;
    int[] arrayOfInt1 = f;
    if (i == arrayOfInt1.length)
    {
      int[] arrayOfInt2 = new int[i * 3 / 2 + 1];
      System.arraycopy(arrayOfInt1, 0, arrayOfInt2, 0, i);
      f = arrayOfInt2;
    }
    arrayOfInt1 = f;
    i = g;
    g = (i + 1);
    arrayOfInt1[i] = paramInt;
  }
  
  public int hashCode()
  {
    int j = 1;
    int i = 0;
    while (i < g)
    {
      j = j * 31 + f[i];
      i += 1;
    }
    return j;
  }
  
  public int indexOf(Object paramObject)
  {
    if (!(paramObject instanceof Integer)) {
      return -1;
    }
    int j = ((Integer)paramObject).intValue();
    int k = size();
    int i = 0;
    while (i < k)
    {
      if (f[i] == j) {
        return i;
      }
      i += 1;
    }
    return -1;
  }
  
  public Integer k(int paramInt)
  {
    return Integer.valueOf(l(paramInt));
  }
  
  public int l(int paramInt)
  {
    j(paramInt);
    return f[paramInt];
  }
  
  public Integer o(int paramInt)
  {
    b();
    j(paramInt);
    int[] arrayOfInt = f;
    int i = arrayOfInt[paramInt];
    int j = g;
    if (paramInt < j - 1) {
      System.arraycopy(arrayOfInt, paramInt + 1, arrayOfInt, paramInt, j - paramInt - 1);
    }
    g -= 1;
    modCount += 1;
    return Integer.valueOf(i);
  }
  
  public Integer p(int paramInt, Integer paramInteger)
  {
    return Integer.valueOf(q(paramInt, paramInteger.intValue()));
  }
  
  public int q(int paramInt1, int paramInt2)
  {
    b();
    j(paramInt1);
    int[] arrayOfInt = f;
    int i = arrayOfInt[paramInt1];
    arrayOfInt[paramInt1] = paramInt2;
    return i;
  }
  
  protected void removeRange(int paramInt1, int paramInt2)
  {
    b();
    if (paramInt2 >= paramInt1)
    {
      int[] arrayOfInt = f;
      System.arraycopy(arrayOfInt, paramInt2, arrayOfInt, paramInt1, g - paramInt2);
      g -= paramInt2 - paramInt1;
      modCount += 1;
      return;
    }
    throw new IndexOutOfBoundsException("toIndex < fromIndex");
  }
  
  public int size()
  {
    return g;
  }
}
