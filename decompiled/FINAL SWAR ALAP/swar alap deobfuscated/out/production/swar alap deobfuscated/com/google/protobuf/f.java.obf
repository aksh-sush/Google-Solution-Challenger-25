package com.google.protobuf;

import java.nio.Buffer;
import java.nio.ByteBuffer;

abstract class y1
{
  private static final b a;
  
  static
  {
    Object localObject;
    if ((e.m()) && (!d.c())) {
      localObject = new e();
    } else {
      localObject = new c();
    }
    a = (b)localObject;
  }
  
  static String g(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
  {
    return a.a(paramByteBuffer, paramInt1, paramInt2);
  }
  
  static String h(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    return a.b(paramArrayOfByte, paramInt1, paramInt2);
  }
  
  static int i(CharSequence paramCharSequence, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    return a.e(paramCharSequence, paramArrayOfByte, paramInt1, paramInt2);
  }
  
  static int j(CharSequence paramCharSequence)
  {
    int m = paramCharSequence.length();
    int j = 0;
    while ((j < m) && (paramCharSequence.charAt(j) < '?')) {
      j += 1;
    }
    int i = m;
    for (;;)
    {
      k = i;
      if (j >= m) {
        break label87;
      }
      k = paramCharSequence.charAt(j);
      if (k >= 2048) {
        break;
      }
      i += (127 - k >>> 31);
      j += 1;
    }
    int k = i + k(paramCharSequence, j);
    label87:
    if (k >= m) {
      return k;
    }
    paramCharSequence = new StringBuilder();
    paramCharSequence.append("UTF-8 length does not fit in int: ");
    paramCharSequence.append(k + 4294967296L);
    throw new IllegalArgumentException(paramCharSequence.toString());
  }
  
  private static int k(CharSequence paramCharSequence, int paramInt)
  {
    int m = paramCharSequence.length();
    int i = 0;
    while (paramInt < m)
    {
      int n = paramCharSequence.charAt(paramInt);
      int j;
      if (n < 2048)
      {
        i += (127 - n >>> 31);
        j = paramInt;
      }
      else
      {
        int k = i + 2;
        i = k;
        j = paramInt;
        if (55296 <= n)
        {
          i = k;
          j = paramInt;
          if (n <= 57343) {
            if (Character.codePointAt(paramCharSequence, paramInt) >= 65536)
            {
              j = paramInt + 1;
              i = k;
            }
            else
            {
              throw new d(paramInt, m);
            }
          }
        }
      }
      paramInt = j + 1;
    }
    return i;
  }
  
  private static int l(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
  {
    int i = paramInt1;
    while ((i < paramInt2 - 7) && ((paramByteBuffer.getLong(i) & 0x8080808080808080) == 0L)) {
      i += 8;
    }
    return i - paramInt1;
  }
  
  private static int m(int paramInt)
  {
    int i = paramInt;
    if (paramInt > -12) {
      i = -1;
    }
    return i;
  }
  
  private static int n(int paramInt1, int paramInt2)
  {
    if ((paramInt1 <= -12) && (paramInt2 <= -65)) {
      return paramInt1 ^ paramInt2 << 8;
    }
    return -1;
  }
  
  private static int o(int paramInt1, int paramInt2, int paramInt3)
  {
    if ((paramInt1 <= -12) && (paramInt2 <= -65) && (paramInt3 <= -65)) {
      return paramInt1 ^ paramInt2 << 8 ^ paramInt3 << 16;
    }
    return -1;
  }
  
  private static int p(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2, int paramInt3)
  {
    if (paramInt3 != 0)
    {
      if (paramInt3 != 1)
      {
        if (paramInt3 == 2) {
          return o(paramInt1, paramByteBuffer.get(paramInt2), paramByteBuffer.get(paramInt2 + 1));
        }
        throw new AssertionError();
      }
      return n(paramInt1, paramByteBuffer.get(paramInt2));
    }
    return m(paramInt1);
  }
  
  private static int q(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    int i = paramArrayOfByte[(paramInt1 - 1)];
    paramInt2 -= paramInt1;
    if (paramInt2 != 0)
    {
      if (paramInt2 != 1)
      {
        if (paramInt2 == 2) {
          return o(i, paramArrayOfByte[paramInt1], paramArrayOfByte[(paramInt1 + 1)]);
        }
        throw new AssertionError();
      }
      return n(i, paramArrayOfByte[paramInt1]);
    }
    return m(i);
  }
  
  static boolean r(ByteBuffer paramByteBuffer)
  {
    return a.f(paramByteBuffer, paramByteBuffer.position(), paramByteBuffer.remaining());
  }
  
  public static boolean s(byte[] paramArrayOfByte)
  {
    return a.g(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  public static boolean t(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    return a.g(paramArrayOfByte, paramInt1, paramInt2);
  }
  
  static int u(int paramInt1, ByteBuffer paramByteBuffer, int paramInt2, int paramInt3)
  {
    return a.h(paramInt1, paramByteBuffer, paramInt2, paramInt3);
  }
  
  public static int v(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3)
  {
    return a.i(paramInt1, paramArrayOfByte, paramInt2, paramInt3);
  }
  
  private static abstract class a
  {
    private static void h(byte paramByte1, byte paramByte2, byte paramByte3, byte paramByte4, char[] paramArrayOfChar, int paramInt)
    {
      if ((!m(paramByte2)) && ((paramByte1 << 28) + (paramByte2 + 112) >> 30 == 0) && (!m(paramByte3)) && (!m(paramByte4)))
      {
        paramByte1 = (paramByte1 & 0x7) << 18 | r(paramByte2) << 12 | r(paramByte3) << 6 | r(paramByte4);
        paramArrayOfChar[paramInt] = l(paramByte1);
        paramArrayOfChar[(paramInt + 1)] = q(paramByte1);
        return;
      }
      throw d0.c();
    }
    
    private static void i(byte paramByte, char[] paramArrayOfChar, int paramInt)
    {
      paramArrayOfChar[paramInt] = ((char)paramByte);
    }
    
    private static void j(byte paramByte1, byte paramByte2, byte paramByte3, char[] paramArrayOfChar, int paramInt)
    {
      if ((!m(paramByte2)) && ((paramByte1 != -32) || (paramByte2 >= -96)) && ((paramByte1 != -19) || (paramByte2 < -96)) && (!m(paramByte3)))
      {
        paramArrayOfChar[paramInt] = ((char)((paramByte1 & 0xF) << 12 | r(paramByte2) << 6 | r(paramByte3)));
        return;
      }
      throw d0.c();
    }
    
    private static void k(byte paramByte1, byte paramByte2, char[] paramArrayOfChar, int paramInt)
    {
      if ((paramByte1 >= -62) && (!m(paramByte2)))
      {
        paramArrayOfChar[paramInt] = ((char)((paramByte1 & 0x1F) << 6 | r(paramByte2)));
        return;
      }
      throw d0.c();
    }
    
    private static char l(int paramInt)
    {
      return (char)((paramInt >>> 10) + 55232);
    }
    
    private static boolean m(byte paramByte)
    {
      return paramByte > -65;
    }
    
    private static boolean n(byte paramByte)
    {
      return paramByte >= 0;
    }
    
    private static boolean o(byte paramByte)
    {
      return paramByte < -16;
    }
    
    private static boolean p(byte paramByte)
    {
      return paramByte < -32;
    }
    
    private static char q(int paramInt)
    {
      return (char)((paramInt & 0x3FF) + 56320);
    }
    
    private static int r(byte paramByte)
    {
      return paramByte & 0x3F;
    }
  }
  
  static abstract class b
  {
    b() {}
    
    private static int j(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
    {
      paramInt1 += y1.e(paramByteBuffer, paramInt1, paramInt2);
      label237:
      for (;;)
      {
        if (paramInt1 >= paramInt2) {
          return 0;
        }
        int i = paramInt1 + 1;
        int j = paramByteBuffer.get(paramInt1);
        paramInt1 = i;
        if (j < 0) {
          if (j < -32)
          {
            if (i >= paramInt2) {
              return j;
            }
            if (j >= -62)
            {
              if (paramByteBuffer.get(i) > -65) {
                return -1;
              }
              paramInt1 = i + 1;
            }
            else
            {
              return -1;
            }
          }
          else
          {
            if (j < -16) {
              if (i < paramInt2 - 1) {}
            }
            while (i >= paramInt2 - 2)
            {
              return y1.f(paramByteBuffer, j, i, paramInt2 - i);
              paramInt1 = i + 1;
              i = paramByteBuffer.get(i);
              if ((i <= -65) && ((j != -32) || (i >= -96)) && ((j != -19) || (i < -96)))
              {
                if (paramByteBuffer.get(paramInt1) > -65) {
                  return -1;
                }
                paramInt1 += 1;
                break;
              }
              return -1;
            }
            paramInt1 = i + 1;
            i = paramByteBuffer.get(i);
            if ((i <= -65) && ((j << 28) + (i + 112) >> 30 == 0))
            {
              i = paramInt1 + 1;
              if (paramByteBuffer.get(paramInt1) <= -65)
              {
                paramInt1 = i + 1;
                if (paramByteBuffer.get(i) <= -65) {
                  break label237;
                }
              }
            }
            return -1;
          }
        }
      }
    }
    
    final String a(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
    {
      if (paramByteBuffer.hasArray())
      {
        int i = paramByteBuffer.arrayOffset();
        return b(paramByteBuffer.array(), i + paramInt1, paramInt2);
      }
      if (paramByteBuffer.isDirect()) {
        return d(paramByteBuffer, paramInt1, paramInt2);
      }
      return c(paramByteBuffer, paramInt1, paramInt2);
    }
    
    abstract String b(byte[] paramArrayOfByte, int paramInt1, int paramInt2);
    
    final String c(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
    {
      if ((paramInt1 | paramInt2 | paramByteBuffer.limit() - paramInt1 - paramInt2) >= 0)
      {
        int j = paramInt1 + paramInt2;
        char[] arrayOfChar = new char[paramInt2];
        paramInt2 = 0;
        byte b1;
        while (paramInt1 < j)
        {
          b1 = paramByteBuffer.get(paramInt1);
          if (!y1.a.b(b1)) {
            break;
          }
          paramInt1 += 1;
          y1.a.c(b1, arrayOfChar, paramInt2);
          paramInt2 += 1;
        }
        int i = paramInt2;
        paramInt2 = paramInt1;
        paramInt1 = i;
        while (paramInt2 < j)
        {
          i = paramInt2 + 1;
          b1 = paramByteBuffer.get(paramInt2);
          if (y1.a.b(b1))
          {
            paramInt2 = paramInt1 + 1;
            y1.a.c(b1, arrayOfChar, paramInt1);
            paramInt1 = paramInt2;
            paramInt2 = i;
            while (paramInt2 < j)
            {
              b1 = paramByteBuffer.get(paramInt2);
              if (!y1.a.b(b1)) {
                break;
              }
              paramInt2 += 1;
              y1.a.c(b1, arrayOfChar, paramInt1);
              paramInt1 += 1;
            }
          }
          else if (y1.a.d(b1))
          {
            if (i < j)
            {
              y1.a.e(b1, paramByteBuffer.get(i), arrayOfChar, paramInt1);
              paramInt2 = i + 1;
              paramInt1 += 1;
            }
            else
            {
              throw d0.c();
            }
          }
          else if (y1.a.f(b1))
          {
            if (i < j - 1)
            {
              paramInt2 = i + 1;
              y1.a.g(b1, paramByteBuffer.get(i), paramByteBuffer.get(paramInt2), arrayOfChar, paramInt1);
              paramInt2 += 1;
              paramInt1 += 1;
            }
            else
            {
              throw d0.c();
            }
          }
          else if (i < j - 2)
          {
            paramInt2 = i + 1;
            byte b2 = paramByteBuffer.get(i);
            i = paramInt2 + 1;
            y1.a.a(b1, b2, paramByteBuffer.get(paramInt2), paramByteBuffer.get(i), arrayOfChar, paramInt1);
            paramInt2 = i + 1;
            paramInt1 = paramInt1 + 1 + 1;
          }
          else
          {
            throw d0.c();
          }
        }
        return new String(arrayOfChar, 0, paramInt1);
      }
      throw new ArrayIndexOutOfBoundsException(String.format("buffer limit=%d, index=%d, limit=%d", new Object[] { Integer.valueOf(paramByteBuffer.limit()), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
    }
    
    abstract String d(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2);
    
    abstract int e(CharSequence paramCharSequence, byte[] paramArrayOfByte, int paramInt1, int paramInt2);
    
    final boolean f(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
    {
      boolean bool = false;
      if (h(0, paramByteBuffer, paramInt1, paramInt2) == 0) {
        bool = true;
      }
      return bool;
    }
    
    final boolean g(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      boolean bool = false;
      if (i(0, paramArrayOfByte, paramInt1, paramInt2) == 0) {
        bool = true;
      }
      return bool;
    }
    
    final int h(int paramInt1, ByteBuffer paramByteBuffer, int paramInt2, int paramInt3)
    {
      if (paramByteBuffer.hasArray())
      {
        int i = paramByteBuffer.arrayOffset();
        return i(paramInt1, paramByteBuffer.array(), paramInt2 + i, i + paramInt3);
      }
      if (paramByteBuffer.isDirect()) {
        return l(paramInt1, paramByteBuffer, paramInt2, paramInt3);
      }
      return k(paramInt1, paramByteBuffer, paramInt2, paramInt3);
    }
    
    abstract int i(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3);
    
    final int k(int paramInt1, ByteBuffer paramByteBuffer, int paramInt2, int paramInt3)
    {
      int i = paramInt2;
      if (paramInt1 != 0)
      {
        if (paramInt2 >= paramInt3) {
          return paramInt1;
        }
        int m = (byte)paramInt1;
        if (m < -32) {
          if (m >= -62)
          {
            paramInt1 = paramInt2 + 1;
            if (paramByteBuffer.get(paramInt2) > -65) {
              return -1;
            }
          }
        }
        do
        {
          i = paramInt1;
          break label300;
          return -1;
          if (m >= -16) {
            break label157;
          }
          j = (byte)(paramInt1 >> 8);
          paramInt1 = j;
          i = paramInt2;
          if (j == 0)
          {
            i = paramInt2 + 1;
            paramInt1 = paramByteBuffer.get(paramInt2);
            if (i >= paramInt3) {
              return y1.a(m, paramInt1);
            }
          }
          if ((paramInt1 > -65) || ((m == -32) && (paramInt1 < -96)) || ((m == -19) && (paramInt1 >= -96))) {
            break;
          }
          paramInt1 = i + 1;
        } while (paramByteBuffer.get(i) <= -65);
        return -1;
        label157:
        i = (byte)(paramInt1 >> 8);
        if (i == 0)
        {
          paramInt1 = paramInt2 + 1;
          i = paramByteBuffer.get(paramInt2);
          if (paramInt1 >= paramInt3) {
            return y1.a(m, i);
          }
          paramInt2 = 0;
        }
        else
        {
          j = (byte)(paramInt1 >> 16);
          paramInt1 = paramInt2;
          paramInt2 = j;
        }
        int j = paramInt1;
        int k = paramInt2;
        if (paramInt2 == 0)
        {
          j = paramInt1 + 1;
          k = paramByteBuffer.get(paramInt1);
          if (j >= paramInt3) {
            return y1.b(m, i, k);
          }
        }
        if ((i <= -65) && ((m << 28) + (i + 112) >> 30 == 0) && (k <= -65))
        {
          i = j + 1;
          if (paramByteBuffer.get(j) <= -65) {}
        }
        else
        {
          return -1;
        }
      }
      label300:
      return j(paramByteBuffer, i, paramInt3);
    }
    
    abstract int l(int paramInt1, ByteBuffer paramByteBuffer, int paramInt2, int paramInt3);
  }
  
  static final class c
    extends y1.b
  {
    c() {}
    
    private static int m(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      while ((paramInt1 < paramInt2) && (paramArrayOfByte[paramInt1] >= 0)) {
        paramInt1 += 1;
      }
      if (paramInt1 >= paramInt2) {
        return 0;
      }
      return n(paramArrayOfByte, paramInt1, paramInt2);
    }
    
    private static int n(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      label207:
      for (;;)
      {
        if (paramInt1 >= paramInt2) {
          return 0;
        }
        int i = paramInt1 + 1;
        int j = paramArrayOfByte[paramInt1];
        paramInt1 = i;
        if (j < 0) {
          if (j < -32)
          {
            if (i >= paramInt2) {
              return j;
            }
            if (j >= -62)
            {
              paramInt1 = i + 1;
              if (paramArrayOfByte[i] <= -65) {}
            }
            else
            {
              return -1;
            }
          }
          else if (j < -16)
          {
            if (i >= paramInt2 - 1) {
              return y1.c(paramArrayOfByte, i, paramInt2);
            }
            int k = i + 1;
            paramInt1 = paramArrayOfByte[i];
            if ((paramInt1 <= -65) && ((j != -32) || (paramInt1 >= -96)) && ((j != -19) || (paramInt1 < -96)))
            {
              paramInt1 = k + 1;
              if (paramArrayOfByte[k] <= -65) {}
            }
            else
            {
              return -1;
            }
          }
          else
          {
            if (i >= paramInt2 - 2) {
              return y1.c(paramArrayOfByte, i, paramInt2);
            }
            paramInt1 = i + 1;
            i = paramArrayOfByte[i];
            if ((i <= -65) && ((j << 28) + (i + 112) >> 30 == 0))
            {
              i = paramInt1 + 1;
              if (paramArrayOfByte[paramInt1] <= -65)
              {
                paramInt1 = i + 1;
                if (paramArrayOfByte[i] <= -65) {
                  break label207;
                }
              }
            }
            return -1;
          }
        }
      }
    }
    
    String b(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      if ((paramInt1 | paramInt2 | paramArrayOfByte.length - paramInt1 - paramInt2) >= 0)
      {
        int j = paramInt1 + paramInt2;
        char[] arrayOfChar = new char[paramInt2];
        paramInt2 = 0;
        byte b1;
        while (paramInt1 < j)
        {
          b1 = paramArrayOfByte[paramInt1];
          if (!y1.a.b(b1)) {
            break;
          }
          paramInt1 += 1;
          y1.a.c(b1, arrayOfChar, paramInt2);
          paramInt2 += 1;
        }
        int i = paramInt2;
        paramInt2 = paramInt1;
        paramInt1 = i;
        while (paramInt2 < j)
        {
          i = paramInt2 + 1;
          b1 = paramArrayOfByte[paramInt2];
          if (y1.a.b(b1))
          {
            paramInt2 = paramInt1 + 1;
            y1.a.c(b1, arrayOfChar, paramInt1);
            paramInt1 = paramInt2;
            paramInt2 = i;
            while (paramInt2 < j)
            {
              b1 = paramArrayOfByte[paramInt2];
              if (!y1.a.b(b1)) {
                break;
              }
              paramInt2 += 1;
              y1.a.c(b1, arrayOfChar, paramInt1);
              paramInt1 += 1;
            }
          }
          else if (y1.a.d(b1))
          {
            if (i < j)
            {
              y1.a.e(b1, paramArrayOfByte[i], arrayOfChar, paramInt1);
              paramInt2 = i + 1;
              paramInt1 += 1;
            }
            else
            {
              throw d0.c();
            }
          }
          else if (y1.a.f(b1))
          {
            if (i < j - 1)
            {
              paramInt2 = i + 1;
              y1.a.g(b1, paramArrayOfByte[i], paramArrayOfByte[paramInt2], arrayOfChar, paramInt1);
              paramInt2 += 1;
              paramInt1 += 1;
            }
            else
            {
              throw d0.c();
            }
          }
          else if (i < j - 2)
          {
            paramInt2 = i + 1;
            byte b2 = paramArrayOfByte[i];
            i = paramInt2 + 1;
            y1.a.a(b1, b2, paramArrayOfByte[paramInt2], paramArrayOfByte[i], arrayOfChar, paramInt1);
            paramInt2 = i + 1;
            paramInt1 = paramInt1 + 1 + 1;
          }
          else
          {
            throw d0.c();
          }
        }
        return new String(arrayOfChar, 0, paramInt1);
      }
      throw new ArrayIndexOutOfBoundsException(String.format("buffer length=%d, index=%d, size=%d", new Object[] { Integer.valueOf(paramArrayOfByte.length), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
    }
    
    String d(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
    {
      return c(paramByteBuffer, paramInt1, paramInt2);
    }
    
    int e(CharSequence paramCharSequence, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      int k = paramCharSequence.length();
      int m = paramInt2 + paramInt1;
      paramInt2 = 0;
      int n;
      while (paramInt2 < k)
      {
        j = paramInt2 + paramInt1;
        if (j >= m) {
          break;
        }
        n = paramCharSequence.charAt(paramInt2);
        if (n >= 128) {
          break;
        }
        paramArrayOfByte[j] = ((byte)n);
        paramInt2 += 1;
      }
      if (paramInt2 == k) {
        return paramInt1 + k;
      }
      int j = paramInt1 + paramInt2;
      paramInt1 = paramInt2;
      while (paramInt1 < k)
      {
        int i = paramCharSequence.charAt(paramInt1);
        if ((i < 128) && (j < m))
        {
          paramInt2 = j + 1;
          paramArrayOfByte[j] = ((byte)i);
        }
        for (;;)
        {
          break;
          if ((i < 2048) && (j <= m - 2))
          {
            n = j + 1;
            paramArrayOfByte[j] = ((byte)(i >>> 6 | 0x3C0));
            paramInt2 = n + 1;
            paramArrayOfByte[n] = ((byte)(i & 0x3F | 0x80));
          }
          else if (((i < 55296) || (57343 < i)) && (j <= m - 3))
          {
            paramInt2 = j + 1;
            paramArrayOfByte[j] = ((byte)(i >>> 12 | 0x1E0));
            j = paramInt2 + 1;
            paramArrayOfByte[paramInt2] = ((byte)(i >>> 6 & 0x3F | 0x80));
            paramInt2 = j + 1;
            paramArrayOfByte[j] = ((byte)(i & 0x3F | 0x80));
          }
          else
          {
            if (j > m - 4) {
              break label456;
            }
            paramInt2 = paramInt1 + 1;
            if (paramInt2 == paramCharSequence.length()) {
              break label443;
            }
            char c = paramCharSequence.charAt(paramInt2);
            if (!Character.isSurrogatePair(i, c)) {
              break label440;
            }
            paramInt1 = Character.toCodePoint(i, c);
            n = j + 1;
            paramArrayOfByte[j] = ((byte)(paramInt1 >>> 18 | 0xF0));
            j = n + 1;
            paramArrayOfByte[n] = ((byte)(paramInt1 >>> 12 & 0x3F | 0x80));
            n = j + 1;
            paramArrayOfByte[j] = ((byte)(paramInt1 >>> 6 & 0x3F | 0x80));
            j = n + 1;
            paramArrayOfByte[n] = ((byte)(paramInt1 & 0x3F | 0x80));
            paramInt1 = paramInt2;
            paramInt2 = j;
          }
        }
        paramInt1 += 1;
        j = paramInt2;
        continue;
        label440:
        paramInt1 = paramInt2;
        label443:
        throw new y1.d(paramInt1 - 1, k);
        label456:
        if ((55296 <= i) && (i <= 57343))
        {
          paramInt2 = paramInt1 + 1;
          if ((paramInt2 == paramCharSequence.length()) || (!Character.isSurrogatePair(i, paramCharSequence.charAt(paramInt2)))) {
            throw new y1.d(paramInt1, k);
          }
        }
        paramCharSequence = new StringBuilder();
        paramCharSequence.append("Failed writing ");
        paramCharSequence.append(i);
        paramCharSequence.append(" at index ");
        paramCharSequence.append(j);
        throw new ArrayIndexOutOfBoundsException(paramCharSequence.toString());
      }
      return j;
    }
    
    int i(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3)
    {
      int i = paramInt2;
      if (paramInt1 != 0)
      {
        if (paramInt2 >= paramInt3) {
          return paramInt1;
        }
        int m = (byte)paramInt1;
        if (m < -32) {
          if (m >= -62)
          {
            paramInt1 = paramInt2 + 1;
            if (paramArrayOfByte[paramInt2] > -65) {
              return -1;
            }
          }
        }
        do
        {
          i = paramInt1;
          break label288;
          return -1;
          if (m >= -16) {
            break label151;
          }
          j = (byte)(paramInt1 >> 8);
          paramInt1 = j;
          i = paramInt2;
          if (j == 0)
          {
            i = paramInt2 + 1;
            paramInt1 = paramArrayOfByte[paramInt2];
            if (i >= paramInt3) {
              return y1.a(m, paramInt1);
            }
          }
          if ((paramInt1 > -65) || ((m == -32) && (paramInt1 < -96)) || ((m == -19) && (paramInt1 >= -96))) {
            break;
          }
          paramInt1 = i + 1;
        } while (paramArrayOfByte[i] <= -65);
        return -1;
        label151:
        i = (byte)(paramInt1 >> 8);
        if (i == 0)
        {
          paramInt1 = paramInt2 + 1;
          i = paramArrayOfByte[paramInt2];
          if (paramInt1 >= paramInt3) {
            return y1.a(m, i);
          }
          paramInt2 = 0;
        }
        else
        {
          j = (byte)(paramInt1 >> 16);
          paramInt1 = paramInt2;
          paramInt2 = j;
        }
        int j = paramInt1;
        int k = paramInt2;
        if (paramInt2 == 0)
        {
          j = paramInt1 + 1;
          k = paramArrayOfByte[paramInt1];
          if (j >= paramInt3) {
            return y1.b(m, i, k);
          }
        }
        if ((i <= -65) && ((m << 28) + (i + 112) >> 30 == 0) && (k <= -65))
        {
          i = j + 1;
          if (paramArrayOfByte[j] <= -65) {}
        }
        else
        {
          return -1;
        }
      }
      label288:
      return m(paramArrayOfByte, i, paramInt3);
    }
    
    int l(int paramInt1, ByteBuffer paramByteBuffer, int paramInt2, int paramInt3)
    {
      return k(paramInt1, paramByteBuffer, paramInt2, paramInt3);
    }
  }
  
  static class d
    extends IllegalArgumentException
  {
    d(int paramInt1, int paramInt2)
    {
      super();
    }
  }
  
  static final class e
    extends y1.b
  {
    e() {}
    
    static boolean m()
    {
      return (x1.G()) && (x1.H());
    }
    
    private static int n(long paramLong, int paramInt)
    {
      int i = p(paramLong, paramInt);
      paramLong += i;
      paramInt -= i;
      int j = 0;
      i = paramInt;
      paramInt = j;
      long l1;
      for (;;)
      {
        l1 = paramLong;
        if (i <= 0) {
          break;
        }
        l1 = paramLong + 1L;
        paramInt = x1.u(paramLong);
        if (paramInt < 0) {
          break;
        }
        i -= 1;
        paramLong = l1;
      }
      if (i == 0) {
        return 0;
      }
      i -= 1;
      if (paramInt < -32)
      {
        if (i == 0) {
          return paramInt;
        }
        i -= 1;
        if (paramInt >= -62)
        {
          paramLong = 1L + l1;
          paramInt = i;
          if (x1.u(l1) > -65) {
            return -1;
          }
        }
      }
      label196:
      label198:
      do
      {
        long l2;
        do
        {
          break;
          return -1;
          if (paramInt >= -16) {
            break label198;
          }
          if (i < 2) {
            return r(l1, paramInt, i);
          }
          i -= 2;
          l2 = l1 + 1L;
          j = x1.u(l1);
          if ((j > -65) || ((paramInt == -32) && (j < -96)) || ((paramInt == -19) && (j >= -96))) {
            break label196;
          }
          paramLong = 1L + l2;
          paramInt = i;
        } while (x1.u(l2) <= -65);
        return -1;
        if (i < 3) {
          return r(l1, paramInt, i);
        }
        i -= 3;
        paramLong = l1 + 1L;
        j = x1.u(l1);
        if ((j > -65) || ((paramInt << 28) + (j + 112) >> 30 != 0)) {
          break label281;
        }
        l1 = paramLong + 1L;
        if (x1.u(paramLong) > -65) {
          break label281;
        }
        paramLong = 1L + l1;
        paramInt = i;
      } while (x1.u(l1) <= -65);
      label281:
      return -1;
    }
    
    private static int o(byte[] paramArrayOfByte, long paramLong, int paramInt)
    {
      int i = q(paramArrayOfByte, paramLong, paramInt);
      paramInt -= i;
      paramLong += i;
      int j = 0;
      i = paramInt;
      paramInt = j;
      long l1;
      for (;;)
      {
        l1 = paramLong;
        if (i <= 0) {
          break;
        }
        l1 = paramLong + 1L;
        paramInt = x1.v(paramArrayOfByte, paramLong);
        if (paramInt < 0) {
          break;
        }
        i -= 1;
        paramLong = l1;
      }
      if (i == 0) {
        return 0;
      }
      i -= 1;
      if (paramInt < -32)
      {
        if (i == 0) {
          return paramInt;
        }
        i -= 1;
        if (paramInt >= -62)
        {
          paramLong = 1L + l1;
          paramInt = i;
          if (x1.v(paramArrayOfByte, l1) > -65) {
            return -1;
          }
        }
      }
      label221:
      label223:
      do
      {
        long l2;
        do
        {
          break;
          return -1;
          if (paramInt >= -16) {
            break label223;
          }
          if (i < 2) {
            return s(paramArrayOfByte, paramInt, l1, i);
          }
          i -= 2;
          l2 = l1 + 1L;
          j = x1.v(paramArrayOfByte, l1);
          if ((j > -65) || ((paramInt == -32) && (j < -96)) || ((paramInt == -19) && (j >= -96))) {
            break label221;
          }
          paramLong = 1L + l2;
          paramInt = i;
        } while (x1.v(paramArrayOfByte, l2) <= -65);
        return -1;
        if (i < 3) {
          return s(paramArrayOfByte, paramInt, l1, i);
        }
        i -= 3;
        paramLong = l1 + 1L;
        j = x1.v(paramArrayOfByte, l1);
        if ((j > -65) || ((paramInt << 28) + (j + 112) >> 30 != 0)) {
          break label315;
        }
        l1 = paramLong + 1L;
        if (x1.v(paramArrayOfByte, paramLong) > -65) {
          break label315;
        }
        paramLong = 1L + l1;
        paramInt = i;
      } while (x1.v(paramArrayOfByte, l1) <= -65);
      label315:
      return -1;
    }
    
    private static int p(long paramLong, int paramInt)
    {
      if (paramInt < 16) {
        return 0;
      }
      int j = 8 - ((int)paramLong & 0x7);
      int i = j;
      while (i > 0)
      {
        if (x1.u(paramLong) < 0) {
          return j - i;
        }
        i -= 1;
        paramLong = 1L + paramLong;
      }
      i = paramInt - j;
      while ((i >= 8) && ((x1.B(paramLong) & 0x8080808080808080) == 0L))
      {
        paramLong += 8L;
        i -= 8;
      }
      return paramInt - i;
    }
    
    private static int q(byte[] paramArrayOfByte, long paramLong, int paramInt)
    {
      int i = 0;
      if (paramInt < 16) {
        return 0;
      }
      while (i < paramInt)
      {
        if (x1.v(paramArrayOfByte, paramLong) < 0) {
          return i;
        }
        i += 1;
        paramLong = 1L + paramLong;
      }
      return paramInt;
    }
    
    private static int r(long paramLong, int paramInt1, int paramInt2)
    {
      if (paramInt2 != 0)
      {
        if (paramInt2 != 1)
        {
          if (paramInt2 == 2) {
            return y1.b(paramInt1, x1.u(paramLong), x1.u(paramLong + 1L));
          }
          throw new AssertionError();
        }
        return y1.a(paramInt1, x1.u(paramLong));
      }
      return y1.d(paramInt1);
    }
    
    private static int s(byte[] paramArrayOfByte, int paramInt1, long paramLong, int paramInt2)
    {
      if (paramInt2 != 0)
      {
        if (paramInt2 != 1)
        {
          if (paramInt2 == 2) {
            return y1.b(paramInt1, x1.v(paramArrayOfByte, paramLong), x1.v(paramArrayOfByte, paramLong + 1L));
          }
          throw new AssertionError();
        }
        return y1.a(paramInt1, x1.v(paramArrayOfByte, paramLong));
      }
      return y1.d(paramInt1);
    }
    
    String b(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      if ((paramInt1 | paramInt2 | paramArrayOfByte.length - paramInt1 - paramInt2) >= 0)
      {
        int j = paramInt1 + paramInt2;
        char[] arrayOfChar = new char[paramInt2];
        paramInt2 = 0;
        byte b1;
        while (paramInt1 < j)
        {
          b1 = x1.v(paramArrayOfByte, paramInt1);
          if (!y1.a.b(b1)) {
            break;
          }
          paramInt1 += 1;
          y1.a.c(b1, arrayOfChar, paramInt2);
          paramInt2 += 1;
        }
        int i = paramInt2;
        paramInt2 = paramInt1;
        paramInt1 = i;
        while (paramInt2 < j)
        {
          i = paramInt2 + 1;
          b1 = x1.v(paramArrayOfByte, paramInt2);
          if (y1.a.b(b1))
          {
            paramInt2 = paramInt1 + 1;
            y1.a.c(b1, arrayOfChar, paramInt1);
            paramInt1 = paramInt2;
            paramInt2 = i;
            while (paramInt2 < j)
            {
              b1 = x1.v(paramArrayOfByte, paramInt2);
              if (!y1.a.b(b1)) {
                break;
              }
              paramInt2 += 1;
              y1.a.c(b1, arrayOfChar, paramInt1);
              paramInt1 += 1;
            }
          }
          else if (y1.a.d(b1))
          {
            if (i < j)
            {
              y1.a.e(b1, x1.v(paramArrayOfByte, i), arrayOfChar, paramInt1);
              paramInt2 = i + 1;
              paramInt1 += 1;
            }
            else
            {
              throw d0.c();
            }
          }
          else if (y1.a.f(b1))
          {
            if (i < j - 1)
            {
              paramInt2 = i + 1;
              y1.a.g(b1, x1.v(paramArrayOfByte, i), x1.v(paramArrayOfByte, paramInt2), arrayOfChar, paramInt1);
              paramInt2 += 1;
              paramInt1 += 1;
            }
            else
            {
              throw d0.c();
            }
          }
          else if (i < j - 2)
          {
            paramInt2 = i + 1;
            byte b2 = x1.v(paramArrayOfByte, i);
            i = paramInt2 + 1;
            y1.a.a(b1, b2, x1.v(paramArrayOfByte, paramInt2), x1.v(paramArrayOfByte, i), arrayOfChar, paramInt1);
            paramInt2 = i + 1;
            paramInt1 = paramInt1 + 1 + 1;
          }
          else
          {
            throw d0.c();
          }
        }
        return new String(arrayOfChar, 0, paramInt1);
      }
      throw new ArrayIndexOutOfBoundsException(String.format("buffer length=%d, index=%d, size=%d", new Object[] { Integer.valueOf(paramArrayOfByte.length), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
    }
    
    String d(ByteBuffer paramByteBuffer, int paramInt1, int paramInt2)
    {
      if ((paramInt1 | paramInt2 | paramByteBuffer.limit() - paramInt1 - paramInt2) >= 0)
      {
        long l1 = x1.i(paramByteBuffer) + paramInt1;
        long l3 = paramInt2 + l1;
        paramByteBuffer = new char[paramInt2];
        paramInt1 = 0;
        long l2;
        byte b1;
        for (;;)
        {
          paramInt2 = paramInt1;
          l2 = l1;
          if (l1 >= l3) {
            break;
          }
          b1 = x1.u(l1);
          if (!y1.a.b(b1))
          {
            paramInt2 = paramInt1;
            l2 = l1;
            break;
          }
          l1 += 1L;
          y1.a.c(b1, paramByteBuffer, paramInt1);
          paramInt1 += 1;
        }
        for (;;)
        {
          paramInt1 = paramInt2;
          l1 = l2;
          for (;;)
          {
            if (l1 >= l3) {
              break label372;
            }
            l2 = l1 + 1L;
            b1 = x1.u(l1);
            if (y1.a.b(b1))
            {
              paramInt2 = paramInt1 + 1;
              y1.a.c(b1, paramByteBuffer, paramInt1);
              paramInt1 = paramInt2;
              l1 = l2;
              while (l1 < l3)
              {
                b1 = x1.u(l1);
                if (!y1.a.b(b1)) {
                  break;
                }
                l1 += 1L;
                y1.a.c(b1, paramByteBuffer, paramInt1);
                paramInt1 += 1;
              }
            }
            else if (y1.a.d(b1))
            {
              if (l2 < l3)
              {
                l1 = l2 + 1L;
                y1.a.e(b1, x1.u(l2), paramByteBuffer, paramInt1);
                paramInt1 += 1;
              }
              else
              {
                throw d0.c();
              }
            }
            else
            {
              if (!y1.a.f(b1)) {
                break label299;
              }
              if (l2 >= l3 - 1L) {
                break;
              }
              l1 = l2 + 1L;
              y1.a.g(b1, x1.u(l2), x1.u(l1), paramByteBuffer, paramInt1);
              paramInt1 += 1;
              l1 += 1L;
            }
          }
          throw d0.c();
          label299:
          if (l2 >= l3 - 2L) {
            break;
          }
          l1 = l2 + 1L;
          byte b2 = x1.u(l2);
          long l4 = l1 + 1L;
          byte b3 = x1.u(l1);
          l2 = l4 + 1L;
          y1.a.a(b1, b2, b3, x1.u(l4), paramByteBuffer, paramInt1);
          paramInt2 = paramInt1 + 1 + 1;
        }
        throw d0.c();
        label372:
        return new String(paramByteBuffer, 0, paramInt1);
      }
      throw new ArrayIndexOutOfBoundsException(String.format("buffer limit=%d, index=%d, limit=%d", new Object[] { Integer.valueOf(paramByteBuffer.limit()), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
    }
    
    int e(CharSequence paramCharSequence, byte[] paramArrayOfByte, int paramInt1, int paramInt2)
    {
      long l2 = paramInt1;
      long l5 = paramInt2 + l2;
      int j = paramCharSequence.length();
      if ((j <= paramInt2) && (paramArrayOfByte.length - paramInt2 >= paramInt1))
      {
        paramInt2 = 0;
        long l1;
        for (;;)
        {
          l1 = 1L;
          if (paramInt2 >= j) {
            break;
          }
          paramInt1 = paramCharSequence.charAt(paramInt2);
          if (paramInt1 >= 128) {
            break;
          }
          x1.L(paramArrayOfByte, l2, (byte)paramInt1);
          paramInt2 += 1;
          l2 = 1L + l2;
        }
        paramInt1 = paramInt2;
        long l3 = l2;
        if (paramInt2 == j) {
          return (int)l2;
        }
        while (paramInt1 < j)
        {
          int i = paramCharSequence.charAt(paramInt1);
          if ((i < 128) && (l3 < l5))
          {
            x1.L(paramArrayOfByte, l3, (byte)i);
            long l4 = l1;
            l2 = l3 + l1;
            l1 = l4;
          }
          for (;;)
          {
            break;
            if ((i < 2048) && (l3 <= l5 - 2L))
            {
              l2 = l3 + l1;
              x1.L(paramArrayOfByte, l3, (byte)(i >>> 6 | 0x3C0));
              x1.L(paramArrayOfByte, l2, (byte)(i & 0x3F | 0x80));
              l2 += l1;
            }
            else if (((i < 55296) || (57343 < i)) && (l3 <= l5 - 3L))
            {
              l2 = l3 + l1;
              x1.L(paramArrayOfByte, l3, (byte)(i >>> 12 | 0x1E0));
              l1 = l2 + l1;
              x1.L(paramArrayOfByte, l2, (byte)(i >>> 6 & 0x3F | 0x80));
              x1.L(paramArrayOfByte, l1, (byte)(i & 0x3F | 0x80));
              l2 = l1 + 1L;
              l1 = 1L;
            }
            else
            {
              if (l3 > l5 - 4L) {
                break label511;
              }
              paramInt2 = paramInt1 + 1;
              if (paramInt2 == j) {
                break label498;
              }
              char c = paramCharSequence.charAt(paramInt2);
              if (!Character.isSurrogatePair(i, c)) {
                break label495;
              }
              paramInt1 = Character.toCodePoint(i, c);
              l1 = l3 + 1L;
              x1.L(paramArrayOfByte, l3, (byte)(paramInt1 >>> 18 | 0xF0));
              l2 = l1 + 1L;
              x1.L(paramArrayOfByte, l1, (byte)(paramInt1 >>> 12 & 0x3F | 0x80));
              l3 = l2 + 1L;
              x1.L(paramArrayOfByte, l2, (byte)(paramInt1 >>> 6 & 0x3F | 0x80));
              l1 = 1L;
              l2 = l3 + 1L;
              x1.L(paramArrayOfByte, l3, (byte)(paramInt1 & 0x3F | 0x80));
              paramInt1 = paramInt2;
            }
          }
          paramInt1 += 1;
          l3 = l2;
          continue;
          label495:
          paramInt1 = paramInt2;
          label498:
          throw new y1.d(paramInt1 - 1, j);
          label511:
          if ((55296 <= i) && (i <= 57343))
          {
            paramInt2 = paramInt1 + 1;
            if ((paramInt2 == j) || (!Character.isSurrogatePair(i, paramCharSequence.charAt(paramInt2)))) {
              throw new y1.d(paramInt1, j);
            }
          }
          paramCharSequence = new StringBuilder();
          paramCharSequence.append("Failed writing ");
          paramCharSequence.append(i);
          paramCharSequence.append(" at index ");
          paramCharSequence.append(l3);
          throw new ArrayIndexOutOfBoundsException(paramCharSequence.toString());
        }
        return (int)l3;
      }
      paramArrayOfByte = new StringBuilder();
      paramArrayOfByte.append("Failed writing ");
      paramArrayOfByte.append(paramCharSequence.charAt(j - 1));
      paramArrayOfByte.append(" at index ");
      paramArrayOfByte.append(paramInt1 + paramInt2);
      throw new ArrayIndexOutOfBoundsException(paramArrayOfByte.toString());
    }
    
    int i(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3)
    {
      int j = paramArrayOfByte.length;
      int i = 0;
      if ((paramInt2 | paramInt3 | j - paramInt3) >= 0)
      {
        long l1 = paramInt2;
        long l3 = paramInt3;
        long l2 = l1;
        if (paramInt1 != 0)
        {
          if (l1 >= l3) {
            return paramInt1;
          }
          j = (byte)paramInt1;
          if (j < -32)
          {
            if (j >= -62)
            {
              if (x1.v(paramArrayOfByte, l1) > -65) {
                return -1;
              }
              l2 = 1L + l1;
            }
            else
            {
              return -1;
            }
          }
          else
          {
            if (j < -16)
            {
              paramInt2 = (byte)(paramInt1 >> 8);
              l2 = l1;
              paramInt1 = paramInt2;
              if (paramInt2 == 0)
              {
                l2 = l1 + 1L;
                paramInt1 = x1.v(paramArrayOfByte, l1);
                if (l2 >= l3) {
                  return y1.a(j, paramInt1);
                }
              }
              if ((paramInt1 <= -65) && ((j != -32) || (paramInt1 >= -96)) && ((j != -19) || (paramInt1 < -96)))
              {
                l1 = l2 + 1L;
                if (x1.v(paramArrayOfByte, l2) > -65) {
                  return -1;
                }
              }
            }
            do
            {
              l2 = l1;
              break label344;
              return -1;
              paramInt2 = (byte)(paramInt1 >> 8);
              if (paramInt2 == 0)
              {
                l2 = l1 + 1L;
                paramInt2 = x1.v(paramArrayOfByte, l1);
                if (l2 >= l3) {
                  return y1.a(j, paramInt2);
                }
                l1 = l2;
                paramInt1 = i;
              }
              else
              {
                paramInt1 = (byte)(paramInt1 >> 16);
              }
              paramInt3 = paramInt1;
              l2 = l1;
              if (paramInt1 == 0)
              {
                l2 = l1 + 1L;
                paramInt3 = x1.v(paramArrayOfByte, l1);
                if (l2 >= l3) {
                  return y1.b(j, paramInt2, paramInt3);
                }
              }
              if ((paramInt2 > -65) || ((j << 28) + (paramInt2 + 112) >> 30 != 0) || (paramInt3 > -65)) {
                break;
              }
              l1 = l2 + 1L;
            } while (x1.v(paramArrayOfByte, l2) <= -65);
            return -1;
          }
        }
        label344:
        return o(paramArrayOfByte, l2, (int)(l3 - l2));
      }
      throw new ArrayIndexOutOfBoundsException(String.format("Array length=%d, index=%d, limit=%d", new Object[] { Integer.valueOf(paramArrayOfByte.length), Integer.valueOf(paramInt2), Integer.valueOf(paramInt3) }));
    }
    
    int l(int paramInt1, ByteBuffer paramByteBuffer, int paramInt2, int paramInt3)
    {
      int j = paramByteBuffer.limit();
      int i = 0;
      if ((paramInt2 | paramInt3 | j - paramInt3) >= 0)
      {
        long l1 = x1.i(paramByteBuffer) + paramInt2;
        long l3 = paramInt3 - paramInt2 + l1;
        long l2 = l1;
        if (paramInt1 != 0)
        {
          if (l1 >= l3) {
            return paramInt1;
          }
          j = (byte)paramInt1;
          if (j < -32)
          {
            if (j >= -62)
            {
              if (x1.u(l1) > -65) {
                return -1;
              }
              l2 = 1L + l1;
            }
            else
            {
              return -1;
            }
          }
          else
          {
            if (j < -16)
            {
              paramInt2 = (byte)(paramInt1 >> 8);
              l2 = l1;
              paramInt1 = paramInt2;
              if (paramInt2 == 0)
              {
                l2 = l1 + 1L;
                paramInt1 = x1.u(l1);
                if (l2 >= l3) {
                  return y1.a(j, paramInt1);
                }
              }
              if ((paramInt1 <= -65) && ((j != -32) || (paramInt1 >= -96)) && ((j != -19) || (paramInt1 < -96)))
              {
                l1 = l2 + 1L;
                if (x1.u(l2) > -65) {
                  return -1;
                }
              }
            }
            do
            {
              l2 = l1;
              break label350;
              return -1;
              paramInt2 = (byte)(paramInt1 >> 8);
              if (paramInt2 == 0)
              {
                l2 = l1 + 1L;
                paramInt2 = x1.u(l1);
                if (l2 >= l3) {
                  return y1.a(j, paramInt2);
                }
                l1 = l2;
                paramInt1 = i;
              }
              else
              {
                paramInt1 = (byte)(paramInt1 >> 16);
              }
              paramInt3 = paramInt1;
              l2 = l1;
              if (paramInt1 == 0)
              {
                l2 = l1 + 1L;
                paramInt3 = x1.u(l1);
                if (l2 >= l3) {
                  return y1.b(j, paramInt2, paramInt3);
                }
              }
              if ((paramInt2 > -65) || ((j << 28) + (paramInt2 + 112) >> 30 != 0) || (paramInt3 > -65)) {
                break;
              }
              l1 = l2 + 1L;
            } while (x1.u(l2) <= -65);
            return -1;
          }
        }
        label350:
        return n(l2, (int)(l3 - l2));
      }
      throw new ArrayIndexOutOfBoundsException(String.format("buffer limit=%d, index=%d, limit=%d", new Object[] { Integer.valueOf(paramByteBuffer.limit()), Integer.valueOf(paramInt2), Integer.valueOf(paramInt3) }));
    }
  }
}
