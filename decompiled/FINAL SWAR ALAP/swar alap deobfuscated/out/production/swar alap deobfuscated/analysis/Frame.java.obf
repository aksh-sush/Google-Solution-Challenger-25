package y1;

import android.content.Context;
import android.text.TextUtils;
import com.facebook.i0;
import db.l;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import lb.d;
import org.json.JSONArray;
import org.json.JSONObject;

public final class j
{
  public static final j a = new j();
  
  private j() {}
  
  public static final File a()
  {
    File localFile2 = new File(i0.l().getFilesDir(), "facebook_ml/");
    File localFile1 = localFile2;
    if (!localFile2.exists())
    {
      if (localFile2.mkdirs()) {
        return localFile2;
      }
      localFile1 = null;
    }
    return localFile1;
  }
  
  public static final Map c(File paramFile)
  {
    l.e(paramFile, "file");
    int i1;
    int i;
    int i2;
    String[] arrayOfString;
    int m;
    int k;
    String str;
    try
    {
      paramFile = new FileInputStream(paramFile);
      i1 = paramFile.available();
      localObject1 = new DataInputStream(paramFile);
      paramFile = new byte[i1];
      ((DataInputStream)localObject1).readFully(paramFile);
      ((InputStream)localObject1).close();
      if (i1 < 4) {
        return null;
      }
      localObject1 = ByteBuffer.wrap(paramFile, 0, 4);
      ((ByteBuffer)localObject1).order(ByteOrder.LITTLE_ENDIAN);
      i = ((ByteBuffer)localObject1).getInt();
      j = i + 4;
      if (i1 < j) {
        return null;
      }
      localObject1 = new JSONObject(new String(paramFile, 4, i, d.b));
      localObject2 = ((JSONObject)localObject1).names();
      i2 = ((JSONArray)localObject2).length();
      arrayOfString = new String[i2];
      m = i2 - 1;
      if (m >= 0)
      {
        i = 0;
        k = i + 1;
        arrayOfString[i] = ((JSONArray)localObject2).getString(i);
        if (k <= m) {
          break label337;
        }
      }
      ta.f.g(arrayOfString);
      localObject2 = new HashMap();
      k = 0;
      i = j;
      j = k;
    }
    catch (Exception paramFile)
    {
      Object localObject1;
      Object localObject2;
      Object localObject4;
      Object localObject3;
      int i3;
      label232:
      int i4;
      return null;
    }
    localObject4 = ((JSONObject)localObject1).getJSONArray(str);
    int j = ((JSONArray)localObject4).length();
    localObject3 = new int[j];
    i3 = j - 1;
    j = 1;
    int n = 1;
    if (i3 >= 0)
    {
      k = 0;
      j = n;
      n = k + 1;
      i4 = ((JSONArray)localObject4).getInt(k);
      localObject3[k] = i4;
      j *= i4;
      if (n > i3) {
        break label376;
      }
    }
    label337:
    label368:
    label376:
    do
    {
      localObject4 = ByteBuffer.wrap(paramFile, i, n);
      ((ByteBuffer)localObject4).order(ByteOrder.LITTLE_ENDIAN);
      localObject3 = new a((int[])localObject3);
      ((ByteBuffer)localObject4).asFloatBuffer().get(((a)localObject3).a(), 0, j);
      ((Map)localObject2).put(str, localObject3);
      i = k;
      j = m;
      for (;;)
      {
        return localObject2;
        i = k;
        break;
        for (;;)
        {
          if (j >= i2) {
            break label368;
          }
          str = arrayOfString[j];
          m = j + 1;
          if (str != null) {
            break;
          }
          j = m;
        }
      }
      k = n;
      break label232;
      n = j * 4;
      k = i + n;
    } while (k <= i1);
    return null;
  }
  
  public final String b(String paramString)
  {
    l.e(paramString, "str");
    int j = paramString.length() - 1;
    int i = 0;
    int k = 0;
    while (i <= j)
    {
      int m;
      if (k == 0) {
        m = i;
      } else {
        m = j;
      }
      if (l.f(paramString.charAt(m), 32) <= 0) {
        m = 1;
      } else {
        m = 0;
      }
      if (k == 0)
      {
        if (m == 0) {
          k = 1;
        } else {
          i += 1;
        }
      }
      else
      {
        if (m == 0) {
          break;
        }
        j -= 1;
      }
    }
    paramString = paramString.subSequence(i, j + 1).toString();
    paramString = new lb.f("\\s+").c(paramString, 0).toArray(new String[0]);
    if (paramString != null)
    {
      paramString = TextUtils.join(" ", (String[])paramString);
      l.d(paramString, "join(\" \", strArray)");
      return paramString;
    }
    throw new NullPointerException("null cannot be cast to non-null type kotlin.Array<T>");
  }
  
  public final int[] d(String paramString, int paramInt)
  {
    l.e(paramString, "texts");
    int[] arrayOfInt = new int[paramInt];
    paramString = b(paramString);
    Charset localCharset = Charset.forName("UTF-8");
    l.d(localCharset, "forName(\"UTF-8\")");
    if (paramString != null)
    {
      paramString = paramString.getBytes(localCharset);
      l.d(paramString, "(this as java.lang.String).getBytes(charset)");
      if (paramInt > 0)
      {
        int j;
        for (int i = 0;; i = j)
        {
          j = i + 1;
          if (i < paramString.length) {
            paramString[i] &= 0xFF;
          } else {
            arrayOfInt[i] = 0;
          }
          if (j >= paramInt) {
            return arrayOfInt;
          }
        }
      }
      return arrayOfInt;
    }
    throw new NullPointerException("null cannot be cast to non-null type java.lang.String");
  }
}
