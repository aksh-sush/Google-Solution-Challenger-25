package androidx.core.app;

import android.app.AppOpsManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.DeadObjectException;
import android.os.Handler;
import android.os.Handler.Callback;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Message;
import android.os.RemoteException;
import android.provider.Settings.Secure;
import android.util.Log;
import b.a;
import b.a.a;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public final class k0
{
  private static final Object c = new Object();
  private static String d;
  private static Set e = new HashSet();
  private static final Object f = new Object();
  private static c g;
  private final Context a;
  private final NotificationManager b;
  
  private k0(Context paramContext)
  {
    a = paramContext;
    b = ((NotificationManager)paramContext.getSystemService("notification"));
  }
  
  public static k0 d(Context paramContext)
  {
    return new k0(paramContext);
  }
  
  public static Set e(Context paramContext)
  {
    Object localObject1 = Settings.Secure.getString(paramContext.getContentResolver(), "enabled_notification_listeners");
    paramContext = c;
    if (localObject1 != null) {}
    for (;;)
    {
      int i;
      try
      {
        if (!((String)localObject1).equals(d))
        {
          String[] arrayOfString = ((String)localObject1).split(":", -1);
          HashSet localHashSet = new HashSet(arrayOfString.length);
          int j = arrayOfString.length;
          i = 0;
          if (i < j)
          {
            ComponentName localComponentName = ComponentName.unflattenFromString(arrayOfString[i]);
            if (localComponentName != null) {
              localHashSet.add(localComponentName.getPackageName());
            }
          }
          else
          {
            e = localHashSet;
            d = (String)localObject1;
          }
        }
        else
        {
          localObject1 = e;
          return localObject1;
        }
      }
      finally {}
      i += 1;
    }
  }
  
  private void h(d paramD)
  {
    synchronized (f)
    {
      if (g == null) {
        g = new c(a.getApplicationContext());
      }
      g.h(paramD);
      return;
    }
  }
  
  private static boolean i(Notification paramNotification)
  {
    paramNotification = k.a(paramNotification);
    return (paramNotification != null) && (paramNotification.getBoolean("android.support.useSideChannel"));
  }
  
  public boolean a()
  {
    if (Build.VERSION.SDK_INT >= 24) {
      return j0.a(b);
    }
    AppOpsManager localAppOpsManager = (AppOpsManager)a.getSystemService("appops");
    Object localObject = a.getApplicationInfo();
    String str = a.getApplicationContext().getPackageName();
    int i = uid;
    try
    {
      localObject = Class.forName(AppOpsManager.class.getName());
      Class localClass = Integer.TYPE;
      i = ((Integer)((Class)localObject).getMethod("checkOpNoThrow", new Class[] { localClass, localClass, String.class }).invoke(localAppOpsManager, new Object[] { Integer.valueOf(((Integer)((Class)localObject).getDeclaredField("OP_POST_NOTIFICATION").get(Integer.class)).intValue()), Integer.valueOf(i), str })).intValue();
      return i == 0;
    }
    catch (ClassNotFoundException|NoSuchMethodException|NoSuchFieldException|InvocationTargetException|IllegalAccessException|RuntimeException localClassNotFoundException) {}
    return true;
  }
  
  public void b(int paramInt)
  {
    c(null, paramInt);
  }
  
  public void c(String paramString, int paramInt)
  {
    b.cancel(paramString, paramInt);
  }
  
  public void f(int paramInt, Notification paramNotification)
  {
    g(null, paramInt, paramNotification);
  }
  
  public void g(String paramString, int paramInt, Notification paramNotification)
  {
    if (i(paramNotification))
    {
      h(new a(a.getPackageName(), paramInt, paramString, paramNotification));
      b.cancel(paramString, paramInt);
      return;
    }
    b.notify(paramString, paramInt, paramNotification);
  }
  
  private static class a
    implements k0.d
  {
    final String a;
    final int b;
    final String c;
    final Notification d;
    
    a(String paramString1, int paramInt, String paramString2, Notification paramNotification)
    {
      a = paramString1;
      b = paramInt;
      c = paramString2;
      d = paramNotification;
    }
    
    public void a(a paramA)
    {
      paramA.O(a, b, c, d);
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder("NotifyTask[");
      localStringBuilder.append("packageName:");
      localStringBuilder.append(a);
      localStringBuilder.append(", id:");
      localStringBuilder.append(b);
      localStringBuilder.append(", tag:");
      localStringBuilder.append(c);
      localStringBuilder.append("]");
      return localStringBuilder.toString();
    }
  }
  
  private static class b
  {
    final ComponentName a;
    final IBinder b;
    
    b(ComponentName paramComponentName, IBinder paramIBinder)
    {
      a = paramComponentName;
      b = paramIBinder;
    }
  }
  
  private static class c
    implements Handler.Callback, ServiceConnection
  {
    private final Context a;
    private final HandlerThread b;
    private final Handler c;
    private final Map d = new HashMap();
    private Set e = new HashSet();
    
    c(Context paramContext)
    {
      a = paramContext;
      paramContext = new HandlerThread("NotificationManagerCompat");
      b = paramContext;
      paramContext.start();
      c = new Handler(paramContext.getLooper(), this);
    }
    
    private boolean a(a paramA)
    {
      if (b) {
        return true;
      }
      Object localObject = new Intent("android.support.BIND_NOTIFICATION_SIDE_CHANNEL").setComponent(a);
      boolean bool = a.bindService((Intent)localObject, this, 33);
      b = bool;
      if (bool)
      {
        e = 0;
      }
      else
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Unable to bind to listener ");
        ((StringBuilder)localObject).append(a);
        Log.w("NotifManCompat", ((StringBuilder)localObject).toString());
        a.unbindService(this);
      }
      return b;
    }
    
    private void b(a paramA)
    {
      if (b)
      {
        a.unbindService(this);
        b = false;
      }
      c = null;
    }
    
    private void c(k0.d paramD)
    {
      j();
      Iterator localIterator = d.values().iterator();
      while (localIterator.hasNext())
      {
        a localA = (a)localIterator.next();
        d.add(paramD);
        g(localA);
      }
    }
    
    private void d(ComponentName paramComponentName)
    {
      paramComponentName = (a)d.get(paramComponentName);
      if (paramComponentName != null) {
        g(paramComponentName);
      }
    }
    
    private void e(ComponentName paramComponentName, IBinder paramIBinder)
    {
      paramComponentName = (a)d.get(paramComponentName);
      if (paramComponentName != null)
      {
        c = a.a.c(paramIBinder);
        e = 0;
        g(paramComponentName);
      }
    }
    
    private void f(ComponentName paramComponentName)
    {
      paramComponentName = (a)d.get(paramComponentName);
      if (paramComponentName != null) {
        b(paramComponentName);
      }
    }
    
    private void g(a paramA)
    {
      Object localObject;
      if (Log.isLoggable("NotifManCompat", 3))
      {
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("Processing component ");
        ((StringBuilder)localObject).append(a);
        ((StringBuilder)localObject).append(", ");
        ((StringBuilder)localObject).append(d.size());
        ((StringBuilder)localObject).append(" queued tasks");
        Log.d("NotifManCompat", ((StringBuilder)localObject).toString());
      }
      if (d.isEmpty()) {
        return;
      }
      if ((a(paramA)) && (c != null)) {}
      for (;;)
      {
        localObject = (k0.d)d.peek();
        if (localObject != null) {}
        try
        {
          if (Log.isLoggable("NotifManCompat", 3))
          {
            localStringBuilder2 = new StringBuilder();
            localStringBuilder2.append("Sending task ");
            localStringBuilder2.append(localObject);
            Log.d("NotifManCompat", localStringBuilder2.toString());
          }
          ((k0.d)localObject).a(c);
          d.remove();
        }
        catch (RemoteException localRemoteException)
        {
          StringBuilder localStringBuilder2 = new StringBuilder();
          localStringBuilder2.append("RemoteException communicating with ");
          localStringBuilder2.append(a);
          Log.w("NotifManCompat", localStringBuilder2.toString(), localRemoteException);
          break label259;
          if (Log.isLoggable("NotifManCompat", 3))
          {
            StringBuilder localStringBuilder1 = new StringBuilder();
            localStringBuilder1.append("Remote service has died: ");
            localStringBuilder1.append(a);
            Log.d("NotifManCompat", localStringBuilder1.toString());
          }
          if (!d.isEmpty()) {
            i(paramA);
          }
          return;
          i(paramA);
          return;
        }
        catch (DeadObjectException localDeadObjectException)
        {
          label259:
          for (;;) {}
        }
      }
    }
    
    private void i(a paramA)
    {
      if (c.hasMessages(3, a)) {
        return;
      }
      int i = e + 1;
      e = i;
      StringBuilder localStringBuilder;
      if (i > 6)
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("Giving up on delivering ");
        localStringBuilder.append(d.size());
        localStringBuilder.append(" tasks to ");
        localStringBuilder.append(a);
        localStringBuilder.append(" after ");
        localStringBuilder.append(e);
        localStringBuilder.append(" retries");
        Log.w("NotifManCompat", localStringBuilder.toString());
        d.clear();
        return;
      }
      i = (1 << i - 1) * 1000;
      if (Log.isLoggable("NotifManCompat", 3))
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("Scheduling retry for ");
        localStringBuilder.append(i);
        localStringBuilder.append(" ms");
        Log.d("NotifManCompat", localStringBuilder.toString());
      }
      paramA = c.obtainMessage(3, a);
      c.sendMessageDelayed(paramA, i);
    }
    
    private void j()
    {
      Object localObject1 = k0.e(a);
      if (((Set)localObject1).equals(e)) {
        return;
      }
      e = ((Set)localObject1);
      Object localObject2 = a.getPackageManager().queryIntentServices(new Intent().setAction("android.support.BIND_NOTIFICATION_SIDE_CHANNEL"), 0);
      HashSet localHashSet = new HashSet();
      localObject2 = ((List)localObject2).iterator();
      Object localObject3;
      while (((Iterator)localObject2).hasNext())
      {
        localObject3 = (ResolveInfo)((Iterator)localObject2).next();
        if (((Set)localObject1).contains(serviceInfo.packageName))
        {
          Object localObject4 = serviceInfo;
          localObject4 = new ComponentName(packageName, name);
          if (serviceInfo.permission != null)
          {
            localObject3 = new StringBuilder();
            ((StringBuilder)localObject3).append("Permission present on component ");
            ((StringBuilder)localObject3).append(localObject4);
            ((StringBuilder)localObject3).append(", not adding listener record.");
            Log.w("NotifManCompat", ((StringBuilder)localObject3).toString());
          }
          else
          {
            localHashSet.add(localObject4);
          }
        }
      }
      localObject1 = localHashSet.iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (ComponentName)((Iterator)localObject1).next();
        if (!d.containsKey(localObject2))
        {
          if (Log.isLoggable("NotifManCompat", 3))
          {
            localObject3 = new StringBuilder();
            ((StringBuilder)localObject3).append("Adding listener record for ");
            ((StringBuilder)localObject3).append(localObject2);
            Log.d("NotifManCompat", ((StringBuilder)localObject3).toString());
          }
          d.put(localObject2, new a((ComponentName)localObject2));
        }
      }
      localObject1 = d.entrySet().iterator();
      while (((Iterator)localObject1).hasNext())
      {
        localObject2 = (Map.Entry)((Iterator)localObject1).next();
        if (!localHashSet.contains(((Map.Entry)localObject2).getKey()))
        {
          if (Log.isLoggable("NotifManCompat", 3))
          {
            localObject3 = new StringBuilder();
            ((StringBuilder)localObject3).append("Removing listener record for ");
            ((StringBuilder)localObject3).append(((Map.Entry)localObject2).getKey());
            Log.d("NotifManCompat", ((StringBuilder)localObject3).toString());
          }
          b((a)((Map.Entry)localObject2).getValue());
          ((Iterator)localObject1).remove();
        }
      }
    }
    
    public void h(k0.d paramD)
    {
      c.obtainMessage(0, paramD).sendToTarget();
    }
    
    public boolean handleMessage(Message paramMessage)
    {
      int i = what;
      if (i != 0)
      {
        if (i != 1)
        {
          if (i != 2)
          {
            if (i != 3) {
              return false;
            }
            d((ComponentName)obj);
            return true;
          }
          f((ComponentName)obj);
          return true;
        }
        paramMessage = (k0.b)obj;
        e(a, b);
        return true;
      }
      c((k0.d)obj);
      return true;
    }
    
    public void onServiceConnected(ComponentName paramComponentName, IBinder paramIBinder)
    {
      if (Log.isLoggable("NotifManCompat", 3))
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Connected to service ");
        localStringBuilder.append(paramComponentName);
        Log.d("NotifManCompat", localStringBuilder.toString());
      }
      c.obtainMessage(1, new k0.b(paramComponentName, paramIBinder)).sendToTarget();
    }
    
    public void onServiceDisconnected(ComponentName paramComponentName)
    {
      if (Log.isLoggable("NotifManCompat", 3))
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Disconnected from service ");
        localStringBuilder.append(paramComponentName);
        Log.d("NotifManCompat", localStringBuilder.toString());
      }
      c.obtainMessage(2, paramComponentName).sendToTarget();
    }
    
    private static class a
    {
      final ComponentName a;
      boolean b = false;
      a c;
      ArrayDeque d = new ArrayDeque();
      int e = 0;
      
      a(ComponentName paramComponentName)
      {
        a = paramComponentName;
      }
    }
  }
  
  private static abstract interface d
  {
    public abstract void a(a paramA);
  }
}
