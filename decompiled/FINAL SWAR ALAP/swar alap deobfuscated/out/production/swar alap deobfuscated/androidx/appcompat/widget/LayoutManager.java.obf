package androidx.appcompat.widget;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Paint;
import android.graphics.RectF;
import android.os.Build.VERSION;
import android.text.Layout;
import android.text.Layout.Alignment;
import android.text.StaticLayout;
import android.text.StaticLayout.Builder;
import android.text.TextDirectionHeuristic;
import android.text.TextDirectionHeuristics;
import android.text.TextPaint;
import android.text.method.TransformationMethod;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.widget.TextView;
import androidx.core.view.h0;
import f.j;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

class d0
{
  private static final RectF l = new RectF();
  private static ConcurrentHashMap m = new ConcurrentHashMap();
  private static ConcurrentHashMap n = new ConcurrentHashMap();
  private int a = 0;
  private boolean b = false;
  private float c = -1.0F;
  private float d = -1.0F;
  private float e = -1.0F;
  private int[] f = new int[0];
  private boolean g = false;
  private TextPaint h;
  private final TextView i;
  private final Context j;
  private final f k;
  
  d0(TextView paramTextView)
  {
    i = paramTextView;
    j = paramTextView.getContext();
    int i1 = Build.VERSION.SDK_INT;
    if (i1 >= 29) {
      paramTextView = new e();
    }
    for (;;)
    {
      k = paramTextView;
      return;
      if (i1 >= 23) {
        paramTextView = new d();
      } else {
        paramTextView = new f();
      }
    }
  }
  
  private int[] b(int[] paramArrayOfInt)
  {
    int i3 = paramArrayOfInt.length;
    if (i3 == 0) {
      return paramArrayOfInt;
    }
    Arrays.sort(paramArrayOfInt);
    ArrayList localArrayList = new ArrayList();
    int i2 = 0;
    int i1 = 0;
    while (i1 < i3)
    {
      int i4 = paramArrayOfInt[i1];
      if ((i4 > 0) && (Collections.binarySearch(localArrayList, Integer.valueOf(i4)) < 0)) {
        localArrayList.add(Integer.valueOf(i4));
      }
      i1 += 1;
    }
    if (i3 == localArrayList.size()) {
      return paramArrayOfInt;
    }
    i3 = localArrayList.size();
    paramArrayOfInt = new int[i3];
    i1 = i2;
    while (i1 < i3)
    {
      paramArrayOfInt[i1] = ((Integer)localArrayList.get(i1)).intValue();
      i1 += 1;
    }
    return paramArrayOfInt;
  }
  
  private void c()
  {
    a = 0;
    d = -1.0F;
    e = -1.0F;
    c = -1.0F;
    f = new int[0];
    b = false;
  }
  
  private int e(RectF paramRectF)
  {
    int i2 = f.length;
    if (i2 != 0)
    {
      int i1 = 1;
      int i3 = i2 - 1;
      i2 = 0;
      while (i1 <= i3)
      {
        int i4 = (i1 + i3) / 2;
        if (x(f[i4], paramRectF))
        {
          i2 = i1;
          i1 = i4 + 1;
        }
        else
        {
          i2 = i4 - 1;
          i3 = i2;
        }
      }
      return f[i2];
    }
    throw new IllegalStateException("No available text sizes to choose from.");
  }
  
  private static Method k(String paramString)
  {
    try
    {
      localObject2 = (Method)m.get(paramString);
      Object localObject1 = localObject2;
      if (localObject2 == null)
      {
        localObject2 = TextView.class.getDeclaredMethod(paramString, new Class[0]);
        localObject1 = localObject2;
        if (localObject2 != null)
        {
          ((AccessibleObject)localObject2).setAccessible(true);
          m.put(paramString, localObject2);
          localObject1 = localObject2;
        }
      }
      return localObject1;
    }
    catch (Exception localException)
    {
      Object localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Failed to retrieve TextView#");
      ((StringBuilder)localObject2).append(paramString);
      ((StringBuilder)localObject2).append("() method");
      Log.w("ACTVAutoSizeHelper", ((StringBuilder)localObject2).toString(), localException);
    }
    return null;
  }
  
  /* Error */
  static Object m(Object paramObject1, String paramString, Object paramObject2)
  {
    // Byte code:
    //   0: aload_1
    //   1: invokestatic 197	androidx/appcompat/widget/d0:k	(Ljava/lang/String;)Ljava/lang/reflect/Method;
    //   4: aload_0
    //   5: iconst_0
    //   6: anewarray 4	java/lang/Object
    //   9: invokevirtual 201	java/lang/reflect/Method:invoke	(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   12: astore_0
    //   13: aload_0
    //   14: areturn
    //   15: astore_0
    //   16: aload_0
    //   17: athrow
    //   18: astore_0
    //   19: new 173	java/lang/StringBuilder
    //   22: dup
    //   23: invokespecial 174	java/lang/StringBuilder:<init>	()V
    //   26: astore_3
    //   27: aload_3
    //   28: ldc -53
    //   30: invokevirtual 180	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   33: pop
    //   34: aload_3
    //   35: aload_1
    //   36: invokevirtual 180	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   39: pop
    //   40: aload_3
    //   41: ldc -74
    //   43: invokevirtual 180	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   46: pop
    //   47: ldc -72
    //   49: aload_3
    //   50: invokevirtual 188	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   53: aload_0
    //   54: invokestatic 194	android/util/Log:w	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   57: pop
    //   58: aload_2
    //   59: areturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	60	0	paramObject1	Object
    //   0	60	1	paramString	String
    //   0	60	2	paramObject2	Object
    //   26	24	3	localStringBuilder	StringBuilder
    // Exception table:
    //   from	to	target	type
    //   0	13	15	finally
    //   0	13	18	java/lang/Exception
  }
  
  private void s(float paramFloat)
  {
    if (paramFloat != i.getPaint().getTextSize())
    {
      i.getPaint().setTextSize(paramFloat);
      boolean bool = b.a(i);
      if (i.getLayout() != null)
      {
        b = false;
        try
        {
          Method localMethod = k("nullLayouts");
          if (localMethod != null) {
            localMethod.invoke(i, new Object[0]);
          }
        }
        catch (Exception localException)
        {
          Log.w("ACTVAutoSizeHelper", "Failed to invoke TextView#nullLayouts() method", localException);
        }
        if (!bool) {
          i.requestLayout();
        } else {
          i.forceLayout();
        }
        i.invalidate();
      }
    }
  }
  
  private boolean u()
  {
    boolean bool = y();
    int i1 = 0;
    if ((bool) && (a == 1))
    {
      if ((!g) || (f.length == 0))
      {
        int i2 = (int)Math.floor((e - d) / c) + 1;
        int[] arrayOfInt = new int[i2];
        while (i1 < i2)
        {
          arrayOfInt[i1] = Math.round(d + i1 * c);
          i1 += 1;
        }
        f = b(arrayOfInt);
      }
      b = true;
    }
    else
    {
      b = false;
    }
    return b;
  }
  
  private void v(TypedArray paramTypedArray)
  {
    int i2 = paramTypedArray.length();
    int[] arrayOfInt = new int[i2];
    if (i2 > 0)
    {
      int i1 = 0;
      while (i1 < i2)
      {
        arrayOfInt[i1] = paramTypedArray.getDimensionPixelSize(i1, -1);
        i1 += 1;
      }
      f = b(arrayOfInt);
      w();
    }
  }
  
  private boolean w()
  {
    int[] arrayOfInt = f;
    int i1 = arrayOfInt.length;
    boolean bool;
    if (i1 > 0) {
      bool = true;
    } else {
      bool = false;
    }
    g = bool;
    if (bool)
    {
      a = 1;
      d = arrayOfInt[0];
      e = arrayOfInt[(i1 - 1)];
      c = -1.0F;
    }
    return bool;
  }
  
  private boolean x(int paramInt, RectF paramRectF)
  {
    Object localObject2 = i.getText();
    Object localObject3 = i.getTransformationMethod();
    Object localObject1 = localObject2;
    if (localObject3 != null)
    {
      localObject3 = ((TransformationMethod)localObject3).getTransformation((CharSequence)localObject2, i);
      localObject1 = localObject2;
      if (localObject3 != null) {
        localObject1 = localObject3;
      }
    }
    int i1 = a.b(i);
    l(paramInt);
    localObject2 = d(localObject1, (Layout.Alignment)m(i, "getLayoutAlignment", Layout.Alignment.ALIGN_NORMAL), Math.round(right), i1);
    if ((i1 != -1) && ((((StaticLayout)localObject2).getLineCount() > i1) || (((Layout)localObject2).getLineEnd(((StaticLayout)localObject2).getLineCount() - 1) != localObject1.length()))) {
      return false;
    }
    return ((Layout)localObject2).getHeight() <= bottom;
  }
  
  private boolean y()
  {
    return i instanceof k ^ true;
  }
  
  private void z(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    if (paramFloat1 > 0.0F)
    {
      if (paramFloat2 > paramFloat1)
      {
        if (paramFloat3 > 0.0F)
        {
          a = 1;
          d = paramFloat1;
          e = paramFloat2;
          c = paramFloat3;
          g = false;
          return;
        }
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("The auto-size step granularity (");
        localStringBuilder.append(paramFloat3);
        localStringBuilder.append("px) is less or equal to (0px)");
        throw new IllegalArgumentException(localStringBuilder.toString());
      }
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("Maximum auto-size text size (");
      localStringBuilder.append(paramFloat2);
      localStringBuilder.append("px) is less or equal to minimum auto-size text size (");
      localStringBuilder.append(paramFloat1);
      localStringBuilder.append("px)");
      throw new IllegalArgumentException(localStringBuilder.toString());
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Minimum auto-size text size (");
    localStringBuilder.append(paramFloat1);
    localStringBuilder.append("px) is less or equal to (0px)");
    throw new IllegalArgumentException(localStringBuilder.toString());
  }
  
  void a()
  {
    if (!n()) {
      return;
    }
    if (b)
    {
      if (i.getMeasuredHeight() > 0)
      {
        if (i.getMeasuredWidth() <= 0) {
          return;
        }
        int i1;
        if (k.b(i)) {
          i1 = 1048576;
        } else {
          i1 = i.getMeasuredWidth() - i.getTotalPaddingLeft() - i.getTotalPaddingRight();
        }
        int i2 = i.getHeight() - i.getCompoundPaddingBottom() - i.getCompoundPaddingTop();
        if (i1 > 0)
        {
          if (i2 <= 0) {
            return;
          }
          synchronized (l)
          {
            ???.setEmpty();
            right = i1;
            bottom = i2;
            float f1 = e(???);
            if (f1 != i.getTextSize()) {
              t(0, f1);
            }
          }
        }
      }
      return;
    }
    b = true;
  }
  
  StaticLayout d(CharSequence paramCharSequence, Layout.Alignment paramAlignment, int paramInt1, int paramInt2)
  {
    if (Build.VERSION.SDK_INT >= 23) {
      return c.a(paramCharSequence, paramAlignment, paramInt1, paramInt2, i, h, k);
    }
    return a.a(paramCharSequence, paramAlignment, paramInt1, i, h);
  }
  
  int f()
  {
    return Math.round(e);
  }
  
  int g()
  {
    return Math.round(d);
  }
  
  int h()
  {
    return Math.round(c);
  }
  
  int[] i()
  {
    return f;
  }
  
  int j()
  {
    return a;
  }
  
  void l(int paramInt)
  {
    TextPaint localTextPaint = h;
    if (localTextPaint == null) {
      h = new TextPaint();
    } else {
      localTextPaint.reset();
    }
    h.set(i.getPaint());
    h.setTextSize(paramInt);
  }
  
  boolean n()
  {
    return (y()) && (a != 0);
  }
  
  void o(AttributeSet paramAttributeSet, int paramInt)
  {
    Object localObject = j;
    int[] arrayOfInt = j.g0;
    localObject = ((Context)localObject).obtainStyledAttributes(paramAttributeSet, arrayOfInt, paramInt, 0);
    TextView localTextView = i;
    h0.q0(localTextView, localTextView.getContext(), arrayOfInt, paramAttributeSet, (TypedArray)localObject, paramInt, 0);
    paramInt = j.l0;
    if (((TypedArray)localObject).hasValue(paramInt)) {
      a = ((TypedArray)localObject).getInt(paramInt, 0);
    }
    paramInt = j.k0;
    float f1;
    if (((TypedArray)localObject).hasValue(paramInt)) {
      f1 = ((TypedArray)localObject).getDimension(paramInt, -1.0F);
    } else {
      f1 = -1.0F;
    }
    paramInt = j.i0;
    float f2;
    if (((TypedArray)localObject).hasValue(paramInt)) {
      f2 = ((TypedArray)localObject).getDimension(paramInt, -1.0F);
    } else {
      f2 = -1.0F;
    }
    paramInt = j.h0;
    float f3;
    if (((TypedArray)localObject).hasValue(paramInt)) {
      f3 = ((TypedArray)localObject).getDimension(paramInt, -1.0F);
    } else {
      f3 = -1.0F;
    }
    paramInt = j.j0;
    if (((TypedArray)localObject).hasValue(paramInt))
    {
      paramInt = ((TypedArray)localObject).getResourceId(paramInt, 0);
      if (paramInt > 0)
      {
        paramAttributeSet = ((TypedArray)localObject).getResources().obtainTypedArray(paramInt);
        v(paramAttributeSet);
        paramAttributeSet.recycle();
      }
    }
    ((TypedArray)localObject).recycle();
    if (y())
    {
      if (a == 1)
      {
        if (!g)
        {
          paramAttributeSet = j.getResources().getDisplayMetrics();
          float f4 = f2;
          if (f2 == -1.0F) {
            f4 = TypedValue.applyDimension(2, 12.0F, paramAttributeSet);
          }
          f2 = f3;
          if (f3 == -1.0F) {
            f2 = TypedValue.applyDimension(2, 112.0F, paramAttributeSet);
          }
          f3 = f1;
          if (f1 == -1.0F) {
            f3 = 1.0F;
          }
          z(f4, f2, f3);
        }
        u();
      }
    }
    else {
      a = 0;
    }
  }
  
  void p(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (y())
    {
      DisplayMetrics localDisplayMetrics = j.getResources().getDisplayMetrics();
      z(TypedValue.applyDimension(paramInt4, paramInt1, localDisplayMetrics), TypedValue.applyDimension(paramInt4, paramInt2, localDisplayMetrics), TypedValue.applyDimension(paramInt4, paramInt3, localDisplayMetrics));
      if (u()) {
        a();
      }
    }
  }
  
  void q(int[] paramArrayOfInt, int paramInt)
  {
    if (y())
    {
      int i2 = paramArrayOfInt.length;
      int i1 = 0;
      if (i2 > 0)
      {
        int[] arrayOfInt = new int[i2];
        Object localObject;
        if (paramInt == 0)
        {
          localObject = Arrays.copyOf(paramArrayOfInt, i2);
        }
        else
        {
          DisplayMetrics localDisplayMetrics = j.getResources().getDisplayMetrics();
          for (;;)
          {
            localObject = arrayOfInt;
            if (i1 >= i2) {
              break;
            }
            arrayOfInt[i1] = Math.round(TypedValue.applyDimension(paramInt, paramArrayOfInt[i1], localDisplayMetrics));
            i1 += 1;
          }
        }
        f = b((int[])localObject);
        if (!w())
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("None of the preset sizes is valid: ");
          ((StringBuilder)localObject).append(Arrays.toString(paramArrayOfInt));
          throw new IllegalArgumentException(((StringBuilder)localObject).toString());
        }
      }
      else
      {
        g = false;
      }
      if (u()) {
        a();
      }
    }
  }
  
  void r(int paramInt)
  {
    if (y()) {
      if (paramInt != 0)
      {
        Object localObject;
        if (paramInt == 1)
        {
          localObject = j.getResources().getDisplayMetrics();
          z(TypedValue.applyDimension(2, 12.0F, (DisplayMetrics)localObject), TypedValue.applyDimension(2, 112.0F, (DisplayMetrics)localObject), 1.0F);
          if (u()) {
            a();
          }
        }
        else
        {
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Unknown auto-size text type: ");
          ((StringBuilder)localObject).append(paramInt);
          throw new IllegalArgumentException(((StringBuilder)localObject).toString());
        }
      }
      else
      {
        c();
      }
    }
  }
  
  void t(int paramInt, float paramFloat)
  {
    Object localObject = j;
    if (localObject == null) {
      localObject = Resources.getSystem();
    } else {
      localObject = ((Context)localObject).getResources();
    }
    s(TypedValue.applyDimension(paramInt, paramFloat, ((Resources)localObject).getDisplayMetrics()));
  }
  
  private static final abstract class a
  {
    static StaticLayout a(CharSequence paramCharSequence, Layout.Alignment paramAlignment, int paramInt, TextView paramTextView, TextPaint paramTextPaint)
    {
      return new StaticLayout(paramCharSequence, paramTextPaint, paramInt, paramAlignment, paramTextView.getLineSpacingMultiplier(), paramTextView.getLineSpacingExtra(), paramTextView.getIncludeFontPadding());
    }
    
    static int b(TextView paramTextView)
    {
      return paramTextView.getMaxLines();
    }
  }
  
  private static final abstract class b
  {
    static boolean a(View paramView)
    {
      return paramView.isInLayout();
    }
  }
  
  private static final abstract class c
  {
    static StaticLayout a(CharSequence paramCharSequence, Layout.Alignment paramAlignment, int paramInt1, int paramInt2, TextView paramTextView, TextPaint paramTextPaint, d0.f paramF)
    {
      paramCharSequence = StaticLayout.Builder.obtain(paramCharSequence, 0, paramCharSequence.length(), paramTextPaint, paramInt1);
      paramAlignment = paramCharSequence.setAlignment(paramAlignment).setLineSpacing(paramTextView.getLineSpacingExtra(), paramTextView.getLineSpacingMultiplier()).setIncludePad(paramTextView.getIncludeFontPadding()).setBreakStrategy(paramTextView.getBreakStrategy()).setHyphenationFrequency(paramTextView.getHyphenationFrequency());
      paramInt1 = paramInt2;
      if (paramInt2 == -1) {
        paramInt1 = Integer.MAX_VALUE;
      }
      paramAlignment.setMaxLines(paramInt1);
      try
      {
        paramF.a(paramCharSequence, paramTextView);
      }
      catch (ClassCastException paramAlignment)
      {
        for (;;) {}
      }
      Log.w("ACTVAutoSizeHelper", "Failed to obtain TextDirectionHeuristic, auto size may be incorrect");
      return paramCharSequence.build();
    }
  }
  
  private static class d
    extends d0.f
  {
    d() {}
    
    void a(StaticLayout.Builder paramBuilder, TextView paramTextView)
    {
      e0.a(paramBuilder, (TextDirectionHeuristic)d0.m(paramTextView, "getTextDirectionHeuristic", TextDirectionHeuristics.FIRSTSTRONG_LTR));
    }
  }
  
  private static class e
    extends d0.d
  {
    e() {}
    
    void a(StaticLayout.Builder paramBuilder, TextView paramTextView)
    {
      e0.a(paramBuilder, g0.a(paramTextView));
    }
    
    boolean b(TextView paramTextView)
    {
      return f0.a(paramTextView);
    }
  }
  
  private static class f
  {
    f() {}
    
    void a(StaticLayout.Builder paramBuilder, TextView paramTextView) {}
    
    boolean b(TextView paramTextView)
    {
      return ((Boolean)d0.m(paramTextView, "getHorizontallyScrolling", Boolean.FALSE)).booleanValue();
    }
  }
}
